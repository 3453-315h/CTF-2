===========================================================================
 * ROP gadgets generated by ROPEME * 
===========================================================================
 + Binary info
---------------------------------------------------------------------------
hash: 4fe25baedfc7ad57f6d079ce67da6a4c
name: simplecalc
arch: x86_64
type: ELF
base address: 0x400360
code size: 598452
code offset: 0x360
gadget depth: 6
gadget count: 8220
---------------------------------------------------------------------------
 + Unique gadgets: (offset : instructions)
---------------------------------------------------------------------------
0x00000020 : ret
0x000009d5 : ret 0
0x000008c3 : ret 1
0x0000b425 : ret 2
0x00025b12 : ret 3
0x0001c439 : ret 4
0x0001c455 : ret 8
0x000027d2 : ret 9
0x00025f70 : jmp r9
0x0008ebd9 : jmp r8
0x00070091 : call r9
0x000732be : jmp r11
0x00017859 : jmp r10
0x000732bf : jmp rbx
0x00000c87 : jmp rdx
0x00015a3f : ret 0xc
0x0005fd92 : call r8
0x00000c47 : jmp rax
0x00024914 : jmp rcx
0x00010e8a : call rdx
0x0003a08d : call rdi
0x000013b7 : call rbp
0x000028f9 : call rbx
0x00036fbd : call rsp
0x0008e381 : ret 0xa8
0x00049ed0 : ret 0xc0
0x00076c74 : ret 0x15
0x00019d4a : ret 0x17
0x000543ac : ret 0x11
0x00036fbc : call r12
0x0000534b : call rcx
0x00000cb1 : call rax
0x0000b5be : ret 0xba
0x00072512 : ret 0x4a
0x000340b0 : ret 0xb8
0x0003a08c : call r15
0x0003ae1e : call r14
0x00073661 : call r11
0x000013b6 : call r13
0x00037293 : ret 0x28
0x00066586 : ret 0x25
0x0005bc6d : ret 0x22
0x000172a4 : ret 0x2a
0x00006c4d : ret 0x2b
0x0003ae1f : call rsi
0x00028c4e : ret 0x80
0x00047485 : jmp [rax]
0x0002d8fd : call [rbx]
0x0008fd22 : int3 ; ret
0x000583c9 : call [rcx]
0x0003e95a : call [r13]
0x0005b5bd : call [rsi]
0x000083ce : call [rax]
0x00007665 : call [rbp]
0x00000d20 : leave ; ret
0x00000133 : pop r12; ret
0x0007ed0f : neg eax; ret
0x00037725 : pop rdx; ret
0x0007608d : dec ecx; ret
0x0004d7d4 : pop rax; ret
0x00001b6f : pop r13; ret
0x00000134 : pop rsp; ret
0x00001926 : pop r14; ret
0x00001812 : pop r15; ret
0x000082ad : pop rbx; ret
0x0000006f : pop rbp; ret
0x00037724 : pop r10; ret
0x00001813 : pop rdi; ret
0x00001927 : pop rsi; ret
0x00064585 : syscall ; ret
0x0005e55f : push rbp; ret
0x00025cae : push rdi; ret
0x00012e94 : push rsp; ret
0x0000fff9 : push rbx; ret
0x00006ba3 : push rcx; ret
0x00023178 : add al, 7; ret
0x0003c59f : call [r14 + 8]
0x0000a5df : call [rbp + 8]
0x0000a5de : call [r13 + 8]
0x0000a365 : call [r15 + 8]
0x0003c5a0 : call [rsi + 8]
0x0000a366 : call [rdi + 8]
0x00071f92 : jmp [rax + r8]
0x0003dafe : call [rbx + 8]
0x0000f4ae : mov dh, 0; ret
0x00038c56 : mov eax, 1; ret
0x000015b3 : add rsp, 8; ret
0x000177c6 : add eax, 5; ret
0x00063831 : add eax, 1; ret
0x00063880 : mov rax, 3; ret
0x0004e4f3 : jmp [rdi + 0xf]
0x0001d105 : add eax, 6; ret
0x00063871 : mov eax, 2; ret
0x00002d79 : jmp [rsi + 0xf]
0x00063827 : add rax, 2; ret
0x00063828 : add eax, 2; ret
0x00001227 : add cl, cl; ret
0x000015b4 : add esp, 8; ret
0x000638a1 : mov eax, 5; ret
0x000638c1 : mov eax, 7; ret
0x000332b3 : sub rax, 1; ret
0x00071f93 : jmp [rax + rax]
0x00063840 : add rax, 3; ret
0x00067cb1 : sbb dh, bl; ret
0x00063860 : mov rax, 1; ret
0x00016b27 : add al, ch; ret
0x0003472b : sbb bl, dh; ret
0x00063881 : mov eax, 3; ret
0x000638b0 : mov rax, 6; ret
0x00006b27 : adc al, ch; ret
0x00063891 : mov eax, 4; ret
0x0002dad8 : jmp [r14 + 0xf]
0x00063830 : add rax, 1; ret
0x0006f532 : int1 ; call rcx
0x00063870 : mov rax, 2; ret
0x00063841 : add eax, 3; ret
0x0006d32a : mov cl, ch; ret
0x0003529b : add dh, bl; ret
0x000088c8 : add bl, dh; ret
0x000638b1 : mov eax, 6; ret
0x000332b4 : sub eax, 1; ret
0x000638a0 : mov rax, 5; ret
0x0001243c : add dh, dh; ret
0x0001cac4 : adc dh, bh; ret
0x00006a52 : add cl, ch; ret
0x00063890 : mov rax, 4; ret
0x000638c0 : mov rax, 7; ret
0x0000644b : jmp [rsi + 0x44]
0x00001aed : jmp [rsi - 0x70]
0x00015715 : pop r15; jmp rax
0x0008bc89 : jmp [rdi + 0x6d]
0x00032e37 : sbb eax, -1; ret
0x0000fead : mov rax, r8; ret
0x0000e7d0 : mov rax, -1; ret
0x00042f8d : call [rbx + rax]
0x00015345 : pop rsp; jmp rax
0x00010d32 : jmp [rax + 0x18]
0x0000cfa1 : jmp [rbx + 0x2b]
0x000719e6 : add al, bpl; ret
0x00015716 : pop rdi; jmp rax
0x00001564 : jmp [rsi + 0x2e]
0x00064e7b : jmp [rsi + 0x41]
0x0004f323 : jmp [rsi - 0x3f]
0x00089ff8 : jmp [rsi + 0x43]
0x00014e21 : pop rbp; jmp rax
0x00051eb8 : jmp [rbp - 0x3a]
0x00028e1f : jmp [rsi + 0x45]
0x0008e167 : call [rax + 0xf]
0x0001cac0 : jmp [rsi - 0x77]
0x00059d56 : call [r9 + 0x38]
0x0007a38b : jmp [rbp + 0x75]
0x0006ffdf : pop r13; jmp rax
0x00010b77 : mov cl, 0xd; ret
0x00004fc3 : jmp [rsi + 0x66]
0x00049192 : call [rbx + 0xf]
0x000500dc : jmp [rsi - 0x7b]
0x00001456 : jmp [rsi - 0x7d]
0x00015344 : pop r12; jmp rax
0x0008c7aa : pop rbx; jmp rax
0x00018bec : sub eax, ecx; ret
0x000478b3 : call [rcx + 0x38]
0x00008d50 : call [rax + 0x58]
0x00046ed3 : mov rax, rsi; ret
0x0000ee4b : sub eax, edx; ret
0x000172a3 : pop rcx; ret 0x2a
0x0000e7fe : call [rax + 0x30]
0x00008db7 : call [rax + 0x68]
0x0000c385 : call [rbp + 0x53]
0x0003e4ed : pop rax; call rax
0x000001be : mov [rdi], 0; ret
0x0008dcba : add ebp, ebx; ret
0x0000feae : mov eax, eax; ret
0x000680ab : add al, 0x16; ret
0x0001c2bf : xor rax, rax; ret
0x0000b505 : call [rax + 0x40]
0x00017537 : mov rax, rdx; ret
0x0008fd21 : mov esp, ecx; ret
0x0000f150 : mov rax, rdi; ret
0x00034af9 : add [r8], al; ret
0x0003d64c : add ebx, ebp; ret
0x00000cfd : call [rbp + 0x48]
0x00008b24 : call [rax + 0x38]
0x000641c8 : mov rax, rcx; ret
0x00000cba : add ebx, esi; ret
0x000087af : call [rax + 0x60]
0x00046ed4 : mov eax, esi; ret
0x0000db7f : call [rbx - 0x75]
0x00009648 : call [rbp + 0x20]
0x00062aae : add al, 0x31; ret
0x0000c346 : call [rax + 0x48]
0x00009e6a : call [r15 + 0x20]
0x00062197 : call [rdx + 0x30]
0x000645c1 : add eax, esi; ret
0x0000bf95 : call [rax + 0x20]
0x0006cc0e : call [rbx + 0x40]
0x0000a2a9 : call [rdi + 0x30]
0x0008fd50 : call [rdx + 0x48]
0x00091d02 : call [rax + 0x53]
0x00074946 : sub eax, [0]; ret
0x0000f151 : mov eax, edi; ret
0x0001c0da : add eax, ecx; ret
0x0001c0d9 : add rax, rcx; ret
0x00090562 : call [rax + 0x75]
0x00007ff8 : add ecx, ebp; ret
0x0004ec79 : mov eax, r8d; ret
0x0008fbfb : call [rdx + 0x50]
0x0008e065 : call [rax + 0x4d]
0x00019ce0 : sub rax, rdi; ret
0x00008742 : call [rbx + 0x48]
0x0000a2a8 : call [r15 + 0x30]
0x00019ce1 : sub eax, edi; ret
0x000098da : call [r13 + 0x18]
0x0000854c : call [rax + 0x10]
0x0008fd20 : mov rsp, rcx; ret
0x00006200 : call [rbx - 0x45]
0x00044eec : add esi, ebx; ret
0x00067e26 : mov dh, 0xc0; ret
0x00044f49 : add eax, [0]; ret
0x000629aa : add al, 0x37; ret
0x00009bcd : call [rax + 0x18]
0x00037cc7 : add al, 0xe8; ret
0x00044f48 : add rax, [0]; ret
0x000096d8 : call [rbp + 0x18]
0x0001c314 : add eax, edi; ret
0x0000bdfc : call [rax + 0x78]
0x00076129 : adc eax, eax; ret
0x000641c9 : mov eax, ecx; ret
0x0000e88f : add al, 0x3a; ret
0x0001c8e0 : add esi, esi; ret
0x00017538 : mov eax, edx; ret
0x00001305 : call [rbx + 0x10]
0x00001880 : xor eax, eax; ret
0x000450f0 : sbb ebx, esi; ret
0x00009864 : call [rax + 0x70]
0x00074945 : sub rax, [0]; ret
0x0001c313 : add rax, rdi; ret
0x00016791 : add esp, 0x18; ret
0x00067e25 : movzx eax, al; ret
0x000434e1 : call [rcx + rbx*4]
0x000745d2 : add esp, 0x78; ret
0x0008b096 : call [r12 + rdx*8]
0x00074377 : adc [rsi], al; ret
0x000003d9 : xchg eax, ebp; ret
0x0002b553 : mov [rdi], dx; ret
0x00074455 : add rsp, 0x48; ret
0x000625ad : add [rcx], dh; ret
0x0007edd6 : add esp, 0x38; ret
0x00039f15 : sub [rax], al; ret
0x00016790 : add rsp, 0x18; ret
0x000728ee : call [r15 + rax*8]
0x0005679c : dec [rax + 1]; ret
0x00073712 : add rsp, 0x30; ret
0x0000f1ab : add [rcx], al; ret
0x00038c8c : add [rcx], bh; ret
0x0004524b : add esp, 0xd0; ret
0x000744e5 : add rsp, 0x58; ret
0x0006d329 : mov r9b, r13b; ret
0x00048181 : call [rax + r11*8]
0x000080c7 : add esp, 0xd8; ret
0x0002b4eb : mov [rdi], cx; ret
0x0008d373 : mov [rsi], r8; ret
0x0007edd5 : add rsp, 0x38; ret
0x00073713 : add esp, 0x30; ret
0x00074456 : add esp, 0x48; ret
0x000130e3 : xchg eax, esp; ret
0x0001c3ac : add eax, 0x1f; ret
0x0004e17e : call [rcx + rcx*2]
0x00058fd9 : xchg eax, ebx; ret
0x000080cb : add [rax], al; ret
0x000728ef : call [rdi + rax*8]
0x0002b5c3 : mov [rdi], dl; ret
0x00048182 : call [rax + rbx*8]
0x0004524a : add rsp, 0xd0; ret
0x000744e6 : add esp, 0x58; ret
0x00049c01 : call [rbx + rax*8]
0x0001d0a2 : add eax, 0x79; ret
0x0008ddf5 : add [rax], cl; ret
0x000750a8 : mov [rdi], r9; ret
0x00067e24 : movzx rax, al; ret
0x000625b4 : add [rcx], ch; ret
0x0001cac3 : adc sil, r15b; ret
0x00067fba : add rsp, 0x28; ret
0x00030a40 : mov [rdi], dh; ret
0x000745d1 : add rsp, 0x78; ret
0x00067fbb : add esp, 0x28; ret
0x00065378 : add ch, [rcx]; ret
0x0008b097 : call [rsp + rdx*8]
0x000080c6 : add rsp, 0xd8; ret
0x00049c00 : call [r11 + rax*8]
0x00030574 : lea rax, [rdx]; ret
0x00033803 : add eax, [rax]; ret
0x00017566 : add [rax], eax; ret
0x000749bc : push rax; jmp [rax]
0x00030575 : lea eax, [rdx]; ret
0x000897bd : add [rcx], edi; ret
0x00074739 : add rax, -0x10; ret
0x0008ffcc : mov edi, 1; jmp rax
0x0002afac : mov [rdi], ecx; ret
0x0006e117 : add rsp, 8; jmp rax
0x0008ebd6 : add r8, r14; jmp r8
0x0000ee14 : mov [rdx], ecx; ret
0x00091d2e : add r9, rax; jmp r9
0x000714cf : mov eax, [rax]; ret
0x00031063 : lea eax, [rdi]; ret
0x00070bb1 : mov [rsi], rax; ret
0x0000bc47 : pop rdx; cdqe ; ret
0x00031062 : lea rax, [rdi]; ret
0x00027a10 : push rdi; cld ; ret
0x0006e118 : add esp, 8; jmp rax
0x000911ad : not [rax]; call rbp
0x0002afab : mov [rdi], rcx; ret
0x00090316 : add r8, rax; jmp r8
0x00025f6d : add r9, r11; jmp r9
0x0000075a : mov [rdi], rdx; ret
0x00027898 : push rdi; clc ; ret
0x0000f125 : sub eax, [rax]; ret
0x0000075b : mov [rdi], edx; ret
0x00067f5c : push [rdi + 1]; ret
0x00044f0e : mov [rax], rdx; ret
0x0000ee13 : mov [rdx], rcx; ret
0x00070abb : mov eax, [rdx]; ret
0x00070bb2 : mov [rsi], eax; ret
0x00044f0f : mov [rax], edx; ret
0x00034779 : add [rax], r8b; ret
0x00017857 : adc al, 0xa; jmp r10
0x00090317 : add eax, eax; jmp r8
0x0008f745 : mov edi, 1; call r14
0x0002af3b : movq [rdi], mm0; ret
0x00091d2f : add ecx, eax; jmp r9
0x0002af95 : movq [rdi], mm1; ret
0x000353a7 : mov esi, 1; call rbp
0x000361d0 : mov esi, 1; call rbx
0x00074b8b : mov rbp, r9; jmp rdx
0x0008ebd7 : add eax, esi; jmp r8
0x0001c3c0 : add eax, 0x852b; ret
0x00001997 : mov edi, 1; call rax
0x00025f6e : add ecx, ebx; jmp r9
0x00074944 : sub rax, fs:[0]; ret
0x00044f47 : add rax, fs:[0]; ret
0x0005fd8f : mov rdi, rbx; call r8
0x00009a39 : inc [rcx + 0x5f]; ret
0x00008456 : pop r13; pop rbp; ret
0x0001543c : xor al, 0x24; jmp rax
0x00012c8d : dec [rax - 0x73]; ret
0x00001811 : pop rsi; pop r15; ret
0x00037749 : pop rdx; pop rsi; ret
0x00037723 : pop rdx; pop r10; ret
0x0001c3c8 : add eax, 0x15313; ret
0x0008e987 : add edx, ecx; jmp rdx
0x00024911 : add rcx, r11; jmp rcx
0x0004dbb6 : dec [rcx - 0x39]; ret
0x000002fd : pop rdi; pop rbp; ret
0x0005a23d : inc [rcx + 0x39]; ret
0x00001b6d : pop r12; pop r13; ret
0x00071976 : dec [rax + 0x69]; ret
0x00068465 : pop rsp; pop rbp; ret
0x0005fd90 : mov edi, ebx; call r8
0x00001b6e : pop rsp; pop r13; ret
0x00017563 : add eax, 0x19e58; ret
0x00026095 : adc al, 0x13; jmp rdx
0x0005700d : dec [rax - 0x39]; ret
0x00074b8c : mov ebp, ecx; jmp rdx
0x00003dba : dec [rax - 0x7d]; ret
0x0008f0e4 : add eax, edi; jmp rax
0x000199f6 : add eax, 0x13d25; ret
0x00001a55 : dec [rax - 0x77]; ret
0x0000006e : pop rbx; pop rbp; ret
0x0003dffc : dec [rcx - 0x7d]; ret
0x0008e188 : add ecx, eax; jmp rcx
0x00068464 : pop r12; pop rbp; ret
0x0003e62b : dec [rax + 0x39]; ret
0x00076268 : pop rbp; pop rbx; ret
0x00024912 : add ecx, ebx; jmp rcx
0x00000132 : pop rbp; pop r12; ret
0x0008e187 : add rcx, rax; jmp rcx
0x000002fc : pop r15; pop rbp; ret
0x00070676 : dec [rax + 0x63]; ret
0x0008e086 : add rax, r11; jmp rax
0x00001810 : pop r14; pop r15; ret
0x0008d56c : add rcx, rdi; jmp rcx
0x0008e986 : add rdx, rcx; jmp rdx
0x00001924 : pop r13; pop r14; ret
0x0008d418 : add ecx, edi; jmp rcx
0x0000c4ca : neg eax; pop r13; ret
0x0008e791 : add rdx, rbp; jmp rdx
0x0008d417 : add rcx, r15; jmp rcx
0x0008f081 : dec [rcx - 0x77]; ret
0x00008457 : pop rbp; pop rbp; ret
0x0001cf76 : add eax, 0x11f55; ret
0x0008e792 : add edx, ebp; jmp rdx
0x0000f4ad : movzx eax, [rax]; ret
0x0008e087 : add eax, ebx; jmp rax
0x0008f0e3 : add rax, r15; jmp rax
0x0006684b : dec [rcx + 0x29]; ret
0x00001925 : pop rbp; pop r14; ret
0x00044f0d : mov fs:[rax], rdx; ret
0x000756ce : adc [rax + 1], cl; ret
0x000732bb : add esp, 0x48; jmp r11
0x000159f3 : mov rdi, r12; call rax
0x00027b0b : mov [rdi - 1], dl; ret
0x000361ae : mov edi, edi; call rbx
0x00027d74 : mov [rdi - 2], dx; ret
0x00060bf7 : xor eax, eax; call r12
0x00010d88 : mov eax, 0x6c1860; ret
0x00076384 : add bh, [rax + 1]; ret
0x00034953 : add bh, [rax - 1]; ret
0x00092109 : mov edi, esp; call r12
0x00007098 : mov edi, esp; call r13
0x0008cf51 : add eax, 0x237ce2; ret
0x00039f12 : add eax, 0x28add1; ret
0x000766ce : add [rax + 1], cl; ret
0x0008c6af : adc [rsp - 4], al; ret
0x0003a089 : mov rdi, rbx; call r15
0x00045797 : mov edx, esp; call rbp
0x000714ce : mov eax, fs:[rax]; ret
0x00007097 : mov rdi, r12; call r13
0x0003a9b3 : mov rdi, rbx; call r13
0x000424c6 : mov rdi, rbx; call r12
0x0003ae1b : mov rdi, rbx; call r14
0x0006f531 : add ecx, esi; call rcx
0x0003916a : mov eax, 0x6c5000; ret
0x00073633 : add esp, 0x30; jmp r11
0x00059c65 : add [rax], al; jmp rdx
0x00030a66 : mov [rdi + 2], dh; ret
0x00035386 : mov rdi, rbx; call rbp
0x000361ad : mov rdi, r15; call rbx
0x000732ba : add rsp, 0x48; jmp r11
0x0003a9b4 : mov edi, ebx; call r13
0x000424c7 : mov edi, ebx; call r12
0x0003a08a : mov edi, ebx; call r15
0x0003ae1c : mov edi, ebx; call r14
0x00030a98 : mov [rdi + 4], dx; ret
0x0003316f : add [rcx + 1], cl; ret
0x0008a939 : mov edi, ebp; call rax
0x0008c6f5 : adc [rsp - 8], al; ret
0x0003618e : mov edi, esi; call rbx
0x00027f5c : mov [rdi - 2], cx; ret
0x00035c1c : mov edi, esp; call rbp
0x0000a105 : mov edi, ebx; call rax
0x000036e9 : xor esi, esi; call rax
0x00070115 : mov [rax], 0; call r12
0x00039d86 : add al, 0x24; call rbx
0x0000e89b : lea eax, [r8 - 1]; ret
0x00073632 : add rsp, 0x30; jmp r11
0x0006f530 : add rcx, rsi; call rcx
0x00036145 : mov edi, esp; call rbx
0x00036144 : mov rdi, r12; call rbx
0x00035c1b : mov rdi, r12; call rbp
0x00045796 : mov rdx, r12; call rbp
0x0005bad2 : mov cl, [rdx]; jmp rdx
0x00060bf6 : xor r8d, r8d; call r12
0x00059c62 : mov esi, 0x10; jmp rdx
0x00036120 : mov edi, ebp; call rbx
0x0003611f : mov rdi, rbp; call rbx
0x0003618d : mov rdi, r14; call rbx
0x000454a6 : mov rdi, r14; call rbp
0x000454a7 : mov edi, esi; call rbp
0x00092108 : mov rdi, rsp; call r12
0x0005bb70 : mov [rdx], cl; jmp rdx
0x000751e3 : mov [rdi + 8], r9; ret
0x0000a104 : mov rdi, rbx; call rax
0x0002658d : sub [rdi], esp; jmp r9
0x0000f0cf : add [rax - 1], bh; ret
0x0008ffcf : add [rax], al; jmp rax
0x00042512 : add eax, 0x2819f9; ret
0x00030ada : mov [rdi + 8], dx; ret
0x000750d9 : mov [rdi - 8], r9; ret
0x0000f122 : add eax, 0x2b1c19; ret
0x000423ff : add [rax + 1], bh; ret
0x0006783d : adc cl, [rax + 1]; ret
0x00035387 : mov edi, ebx; call rbp
0x000159f4 : mov edi, esp; call rax
0x00036169 : mov rdi, r13; call rbx
0x0001543a : mov rsi, [rsp]; jmp rax
0x0003116d : add eax, 0xc478d48; ret
0x0003060d : lea eax, [rdx + 8]; ret
0x0005bb2e : mov [rdx], ecx; jmp rdx
0x00000ad4 : push -0x40fffcd4; ret 0
0x0003108a : lea eax, [rdi + 2]; ret
0x00000aaf : sub al, 0; pop r12; ret
0x0003060b : add eax, 0x8428d48; ret
0x00070196 : mov [rax + 8], edx; ret
0x00030aa7 : mov [rdi + 3], edx; ret
0x0003059d : lea eax, [rdx + 2]; ret
0x00030b0a : mov [rdi + 5], rdx; ret
0x0001d104 : lea eax, [rip + 6]; ret
0x00030b2a : mov [rdi + 7], rdx; ret
0x00030b0b : mov [rdi + 5], edx; ret
0x0003068d : add eax, 0xc428d48; ret
0x00070195 : mov [rax + 8], rdx; ret
0x00033164 : lea eax, [rcx - 1]; ret
0x00030b1b : mov [rdi + 6], edx; ret
0x0003851b : add [r8 + 0xf], cl; ret
0x00045c4b : pop rax; or cl, ch; ret
0x00074931 : mov eax, [rax + 8]; ret
0x000305b4 : lea rax, [rdx + 3]; ret
0x000310bd : lea eax, [rdi + 5]; ret
0x0005bf79 : xchg [rdx], cl; jmp rdx
0x000177c5 : lea eax, [rip + 5]; ret
0x00031094 : lea rax, [rdi + 3]; ret
0x00031076 : lea rax, [rdi + 1]; ret
0x0000199a : add [rax], al; call rax
0x000310a8 : lea eax, [rdi + 4]; ret
0x0001543b : mov esi, [rsp]; jmp rax
0x0003059c : lea rax, [rdx + 2]; ret
0x00001223 : mov eax, 0; leave ; ret
0x00027896 : mov [rdi - 8], rdx; ret
0x000310fa : lea eax, [rdi + 8]; ret
0x00030587 : lea eax, [rdx + 1]; ret
0x0003110e : lea rax, [rdi + 9]; ret
0x000310bc : lea rax, [rdi + 5]; ret
0x00027a0f : mov [rdi - 4], edx; ret
0x000305fa : lea rax, [rdx + 6]; ret
0x00030b1a : mov [rdi + 6], rdx; ret
0x000305b5 : lea eax, [rdx + 3]; ret
0x00027897 : mov [rdi - 8], edx; ret
0x00028339 : mov [rdi - 4], ecx; ret
0x000305dc : lea rax, [rdx + 5]; ret
0x00027d75 : mov [rdi - 2], edx; ret
0x000337bf : inc [rbx]; pop rbx; ret
0x000177c4 : lea rax, [rip + 5]; ret
0x0005aeb0 : mov ecx, [rdx]; jmp rdx
0x000641cc : xor eax, eax; nop ; ret
0x000310e6 : lea rax, [rdi + 7]; ret
0x00039699 : sbb ah, [rax]; call rax
0x00030a99 : mov [rdi + 4], edx; ret
0x000305fb : lea eax, [rdx + 6]; ret
0x00037b15 : sbb eax, 0; leave ; ret
0x000305cb : lea eax, [rdx + 4]; ret
0x0000f4ce : add [rax - 1], dil; ret
0x000305dd : lea eax, [rdx + 5]; ret
0x00030507 : lea eax, [rdx + 7]; ret
0x000310e7 : lea eax, [rdi + 7]; ret
0x0003110f : lea eax, [rdi + 9]; ret
0x0000d8c7 : mov [rdi + 8], eax; ret
0x0003062d : lea eax, [rdx + 9]; ret
0x0002b3f3 : add eax, 0xf7f0ff3; ret
0x0000d8c6 : mov [rdi + 8], rax; ret
0x00027858 : mov [rdi - 8], rcx; ret
0x0000de50 : mov dh, 0; pop rbx; ret
0x00030adb : mov [rdi + 8], edx; ret
0x0008f748 : add [rax], al; call r14
0x00070119 : add [rax], al; call r12
0x00033163 : lea rax, [rcx - 1]; ret
0x00031095 : lea eax, [rdi + 3]; ret
0x00031089 : lea rax, [rdi + 2]; ret
0x0005f219 : int3 ; or al, 0x7e; ret
0x00075102 : movsd [rdi], [rsi]; ret
0x00078f96 : add [rcx + 1], ecx; ret
0x00074150 : xchg eax, edx; ret 0x4a
0x0003060c : lea rax, [rdx + 8]; ret
0x000310a7 : lea rax, [rdi + 4]; ret
0x00031077 : lea eax, [rdi + 1]; ret
0x000310da : lea rax, [rdi + 6]; ret
0x0001d103 : lea rax, [rip + 6]; ret
0x00027f5d : mov [rdi - 2], ecx; ret
0x000361d3 : add [rax], al; call rbx
0x000353aa : add [rax], al; call rbp
0x000305ca : lea rax, [rdx + 4]; ret
0x000751e4 : mov [rdi + 8], ecx; ret
0x000310db : lea eax, [rdi + 6]; ret
0x00001f8d : mov ebx, 0x80; call rax
0x0000da9e : mov dh, 2; pop rbx; ret
0x00030586 : lea rax, [rdx + 1]; ret
0x0000e89c : lea eax, [rax - 1]; ret
0x0003062c : lea rax, [rdx + 9]; ret
0x00030ae9 : mov [rdi + 7], edx; ret
0x00056b4f : add [rax + 1], ecx; ret
0x000794e5 : int3 ; add al, bpl; ret
0x000310f9 : lea rax, [rdi + 8]; ret
0x00074930 : mov rax, [rax + 8]; ret
0x00030506 : lea rax, [rdx + 7]; ret
0x00066585 : xchg eax, ebx; ret 0x25
0x00027859 : mov [rdi - 8], ecx; ret
0x00059c61 : mov r14d, 0x10; jmp rdx
0x0006f058 : add rax, [rbx]; call rax
0x0003851c : add [rax + 0xf], cl; ret
0x0006e4fe : add rax, [r15]; call rax
0x00063b5b : mov rdi, [r13]; call r12
0x0003560e : mov rdi, [rbp]; call rbx
0x0007e881 : add [rsi + 0x6c], 0; ret
0x0008a976 : mov edi, ebp; call [rbx]
0x000354da : mov edi, [rbp]; call rbx
0x00074a2b : add rsp, 0x48; jmp [rax]
0x00035447 : mov edi, [rsi]; call rbx
0x00006f7d : mov edi, [rsp]; call r13
0x00036fb8 : mov rdi, [rbp]; call r12
0x00090137 : mov rsi, [r15]; call r14
0x0004d7d2 : add al, ch; pop rax; ret
0x0006396d : mov edi, [rsp]; call rbp
0x000358d0 : mov edi, [rsp]; call rbx
0x0006ef26 : add eax, [rsi]; call rax
0x0008b469 : add [r8 - 0x77], cl; ret
0x00059cb0 : xchg [rdx], ecx; jmp rdx
0x00035488 : mov edi, [rdi]; call rbx
0x00007663 : mov ebp, eax; call [rbp]
0x000354d9 : mov rdi, [r13]; call rbx
0x00036fb9 : mov edi, [rbp]; call r12
0x0006f059 : add eax, [rbx]; call rax
0x00035446 : mov rdi, [r14]; call rbx
0x00032917 : int1 ; sub eax, edx; ret
0x00035487 : mov rdi, [r15]; call rbx
0x0003dc5d : add al, 0x24; call [rbx]
0x00006f7c : mov rdi, [r12]; call r13
0x00074a2c : add esp, 0x48; jmp [rax]
0x00039d85 : mov [rsp], eax; call rbx
0x0006b1ba : mov eax, 1; pop r15; ret
0x00036fc7 : mov rdi, [rbx]; call r12
0x0006396c : mov rdi, [r12]; call rbp
0x000358cf : mov rdi, [r12]; call rbx
0x00033879 : mov eax, 8; pop rbx; ret
0x000749ba : add esp, 0x50; jmp [rax]
0x0009018b : mov rsi, [rbp]; call r14
0x000714bf : mov eax, 1; pop rbx; ret
0x0006ef25 : add rax, [r14]; call rax
0x000749b9 : add rsp, 0x50; jmp [rax]
0x00090138 : mov esi, [rdi]; call r14
0x0009018c : mov esi, [rbp]; call r14
0x00050c2d : mov eax, 1; pop r13; ret
0x00050b5f : mov eax, 1; pop r14; ret
0x0001c418 : add [rcx - 9], cl; ret 2
0x0001c3f2 : add [rcx - 9], cl; ret 1
0x0006e4ff : add eax, [rdi]; call rax
0x00067ec4 : mov [r8 + 0x23], cl; ret
0x00007662 : mov rbp, rax; call [rbp]
0x00036fc8 : mov edi, [rbx]; call r12
0x00067ec5 : mov [rax + 0x23], cl; ret
0x0008e400 : add [r8 - 0x7d], ecx; ret
0x000711a1 : add [r8 + 0x39], r9b; ret
0x000030c0 : add [rax - 0x77], cl; ret
0x00078173 : add [rax - 0x39], cl; ret
0x000629a8 : lea rax, [rdi + rsi]; ret
0x0007bfe6 : pop r15; fmulp st(1); ret
0x0000b5ba : dec [rax + 0xf]; ret 0xba
0x00066824 : add [rcx + 0x29], cl; ret
0x0006ffde : pop rsp; pop r13; jmp rax
0x00001307 : adc [rax - 0x7d], cl; ret
0x0003112c : lea rax, [rdi + 0xa]; ret
0x0008cd4b : add [rdx + rax*2], 1; ret
0x00009080 : xor [rax + 0x29], cl; ret
0x00056a3a : xor [rax - 0x7d], cl; ret
0x00040e65 : add rcx, [r9 + 0x39]; ret
0x0003116e : lea rax, [rdi + 0xc]; ret
0x000311c9 : lea eax, [rdi + 0xf]; ret
0x00037757 : add [rcx - 0x77], al; ret
0x00030bbc : mov [rdi + 0xe], rcx; ret
0x0003118e : lea rax, [rdi + 0xd]; ret
0x0007bfe7 : pop rdi; fmulp st(1); ret
0x000163f7 : add [rbp - 0x77], cl; ret
0x00030b5c : mov [rdi + 0x10], cx; ret
0x0001273f : add [rax + 0x39], cl; ret
0x0003f483 : adc cl, [rbp - 0x77]; ret
0x00050b63 : add [rcx + 0x5e], al; ret
0x0003068f : lea eax, [rdx + 0xc]; ret
0x0003118f : lea eax, [rdi + 0xd]; ret
0x000306ce : lea rax, [rdx + 0xe]; ret
0x0000dd45 : sbb [rbx + 0x5d], bl; ret
0x0003116f : lea eax, [rdi + 0xc]; ret
0x000306af : lea eax, [rdx + 0xd]; ret
0x000694ac : mov cs, [rax - 0x7d]; ret
0x00030b48 : mov [rdi + 0x10], dh; ret
0x00023177 : lea eax, [rdi + rax]; ret
0x00050c31 : add [rcx + 0x5d], al; ret
0x000306cf : lea eax, [rdx + 0xe]; ret
0x00016440 : add [rcx - 0x7d], cl; ret
0x0003064c : lea rax, [rdx + 0xa]; ret
0x00062aad : lea eax, [rcx + rsi]; ret
0x00092024 : xor [rax + 0x39], cl; ret
0x00076ec9 : add cl, [rcx + 0x29]; ret
0x00066842 : add cl, [rcx + 0x39]; ret
0x0003068e : lea rax, [rdx + 0xc]; ret
0x00062aac : lea rax, [rcx + rsi]; ret
0x00054744 : int 0xff; jmp [rsi + 0xf]
0x00030bdc : mov [rdi + 0xf], rcx; ret
0x00073c5a : sub [rax + 0x63], cl; ret
0x0007db61 : add [rcx - 0x7d], al; ret
0x000306ae : lea rax, [rdx + 0xd]; ret
0x0003066c : lea rax, [rdx + 0xb]; ret
0x0007514e : mov [rdi - 0x10], r9; ret
0x00046fe6 : mov rax, r9; pop rbx; ret
0x00015714 : pop rsi; pop r15; jmp rax
0x00014e20 : pop rbx; pop rbp; jmp rax
0x00030b7b : mov [rdi + 0xf], ecx; ret
0x00056730 : add [r8 - 0x7d], r9b; ret
0x00034af7 : xor [rbx + rax*2], 0; ret
0x00000ab0 : add [rcx + 0x5c], al; ret
0x0007023a : add [rax + 0x63], cl; ret
0x0006e496 : sbb [rcx + 0x39], cl; ret
0x0003112d : lea eax, [rdi + 0xa]; ret
0x00015713 : pop r14; pop r15; jmp rax
0x00037b20 : xor eax, eax; leave ; ret
0x000311ae : lea rax, [rdi + 0xe]; ret
0x000629a9 : lea eax, [rdi + rsi]; ret
0x000311af : lea eax, [rdi + 0xe]; ret
0x0003055f : lea eax, [rdx + 0xf]; ret
0x0004f2cb : add [rcx - 0x77], cl; ret
0x00045b19 : adc [rax + 0x39], cl; ret
0x0003114d : lea eax, [rdi + 0xb]; ret
0x0007525e : mov [rdi + 0x10], r9; ret
0x0000ac0d : add cl, [rax + 0x39]; ret
0x000311c8 : lea rax, [rdi + 0xf]; ret
0x00074c79 : adc [rcx + 0x29], cl; ret
0x0000a4cd : sub [rbx + 0x5d], bl; ret
0x00030b9e : mov [rdi + 0x14], dh; ret
0x00015343 : pop rbp; pop r12; jmp rax
0x0000ad20 : mov rax, -1; pop rbx; ret
0x00023176 : lea rax, [rdi + rax]; ret
0x000680aa : add eax, [rsi + rdx]; ret
0x0006ffdd : pop r12; pop r13; jmp rax
0x0006b1be : add [rcx + 0x5f], al; ret
0x0000b63f : add [rax + 0x29], cl; ret
0x00030c44 : mov [rdi + 0x18], cx; ret
0x0003114c : lea rax, [rdi + 0xb]; ret
0x00030bbd : mov [rdi + 0xe], ecx; ret
0x0008abe3 : sub [rax + 0x39], cl; ret
0x0003775e : add al, [rcx + 0x39]; ret
0x0003066d : lea eax, [rdx + 0xb]; ret
0x0000006d : add [rbx + 0x5d], bl; ret
0x000018de : add [rax - 0x7d], cl; ret
0x0000e88e : lea eax, [rdx + rdi]; ret
0x0003064d : lea eax, [rdx + 0xa]; ret
0x0003055e : lea rax, [rdx + 0xf]; ret
0x00030c20 : mov [rdi + 0x18], dh; ret
0x0000b46c : xor eax, eax; pop rbx; ret
0x00090a47 : adc ecx, [rcx - 0x77]; ret
0x0000f141 : mov eax, [rdi + 0x68]; ret
0x000140b0 : mov rax, rsi; pop rbx; ret
0x0002337a : mov rax, r12; pop r12; ret
0x00031336 : lea rax, [rdi + 0x1b]; ret
0x0008faa1 : mov eax, [rdi + 0xa8]; ret
0x000311db : lea rax, [rdi + 0x10]; ret
0x000311f0 : lea rax, [rdi + 0x11]; ret
0x0003ae8d : xor eax, eax; pop r14; ret
0x00033890 : pop rbx; mov eax, eax; ret
0x0005c1a7 : xchg [rax - 0x7d], cl; ret
0x000311dc : lea eax, [rdi + 0x10]; ret
0x00008d29 : mov eax, edx; pop r12; ret
0x00031352 : lea rax, [rdi + 0x1c]; ret
0x0001c3aa : lea rax, [rip + 0x1f]; ret
0x000312f8 : lea rax, [rdi + 0x19]; ret
0x00074aef : not eax; and eax, edx; ret
0x0002337b : mov eax, esp; pop r12; ret
0x0002af3a : movdqu xmm[rdi], xmm0; ret
0x00011857 : sub ecx, [rax + 0x39]; ret
0x0000ad6a : mov rax, rbx; pop rbx; ret
0x0006064a : add ecx, [rax - 0x7d]; ret
0x00000c42 : mov edi, 0x6c2c30; jmp rax
0x00001226 : add [rax], al; leave ; ret
0x0007514f : mov [rdi - 0x10], ecx; ret
0x00025fc6 : lea r9, [r11 + r9]; jmp r9
0x00004c5c : add [rax - 0x7d], ecx; ret
0x00031392 : lea rax, [rdi + 0x1e]; ret
0x000313b2 : lea rax, [rdi + 0x1f]; ret
0x0002a4f0 : dec [rax - 0x7f]; ret 0x80
0x0000ee23 : sub eax, [rsi + 0x10]; ret
0x0008fa51 : mov eax, [rdi + 0xb8]; ret
0x00011acb : add [rax + 0x39], ecx; ret
0x00031251 : lea rax, [rdi + 0x14]; ret
0x0002af94 : movdqu xmm[rdi], xmm1; ret
0x00040e66 : add ecx, [rcx + 0x39]; ret
0x00073904 : neg edx; mov eax, edx; ret
0x00070a47 : mov eax, edx; pop rbp; ret
0x00046fe7 : mov eax, ecx; pop rbx; ret
0x0003dc5c : mov [rsp], eax; call [rbx]
0x0006121d : mov [rax + 0x40], ecx; ret
0x000110f4 : add ecx, [rax + 0x29]; ret
0x0008f9a0 : mov rax, [rdi + 0x90]; ret
0x000755b1 : xor ecx, [rax + 0x39]; ret
0x0003120f : lea eax, [rdi + 0x12]; ret
0x0006121c : mov [rax + 0x40], rcx; ret
0x0008a979 : adc ecx, [rax - 0x7d]; ret
0x0008c6ad : movss xmm0, [rsp - 4]; ret
0x0008fa91 : mov eax, [rdi + 0xb0]; ret
0x0008fa30 : mov [rdi + 0x98], rsi; ret
0x00031271 : lea eax, [rdi + 0x15]; ret
0x00000759 : int3 ; mov [rdi], rdx; ret
0x0000fbee : sub eax, [rdi + 0x18]; ret
0x0008f9a1 : mov eax, [rdi + 0x90]; ret
0x0008c6f3 : movsd xmm0, [rsp - 8]; ret
0x0007321b : mov edi, 0x6c21e0; jmp rax
0x0003122f : lea eax, [rdi + 0x13]; ret
0x00060894 : mov eax, [rax + 0x4c]; ret
0x000333f3 : add [rbp + 0x39], ecx; ret
0x00030bfc : mov [rdi + 0x10], rcx; ret
0x00031252 : lea eax, [rdi + 0x14]; ret
0x000082ab : mov eax, edx; pop rbx; ret
0x00016404 : sub ecx, [rcx - 0x7d]; ret
0x0008fa90 : mov rax, [rdi + 0xb0]; ret
0x00030cbe : movq [rdi + 0xe], mm2; ret
0x0006358c : mov eax, edx; pop r14; ret
0x00030cde : movq [rdi + 0xf], mm2; ret
0x000312d3 : lea rax, [rdi + 0x18]; ret
0x0001c3ab : lea eax, [rip + 0x1f]; ret
0x000311f1 : lea eax, [rdi + 0x11]; ret
0x0001d0a1 : lea eax, [rip + 0x79]; ret
0x0000f140 : mov rax, [rdi + 0x68]; ret
0x00031353 : lea eax, [rdi + 0x1c]; ret
0x0008a849 : stosd [rdi], eax; call rbx
0x0003122e : lea rax, [rdi + 0x13]; ret
0x00001be2 : mov rax, rcx; pop r13; ret
0x00090216 : add [rax + 0x63], ecx; ret
0x0006784c : mov rax, r14; pop r14; ret
0x00031291 : lea eax, [rdi + 0x16]; ret
0x0008faa0 : mov rax, [rdi + 0xa8]; ret
0x0000ff57 : add [rbp - 0x77], ecx; ret
0x00030b5d : mov [rdi + 0x10], ecx; ret
0x0003dc5b : mov [rsp], rax; call [rbx]
0x00060893 : mov rax, [rax + 0x4c]; ret
0x00031337 : lea eax, [rdi + 0x1b]; ret
0x00030c63 : mov [rdi + 0x17], ecx; ret
0x00074a70 : not eax; and eax, ecx; ret
0x00030c45 : mov [rdi + 0x18], ecx; ret
0x0001b57b : adc [rax + 0x39], ecx; ret
0x0000fbed : sub rax, [rdi + 0x18]; ret
0x000312d4 : lea eax, [rdi + 0x18]; ret
0x00031317 : lea eax, [rdi + 0x1a]; ret
0x00031290 : lea rax, [rdi + 0x16]; ret
0x0000ad6b : mov eax, ebx; pop rbx; ret
0x00075714 : mov rax, rdx; pop rbx; ret
0x00031316 : lea rax, [rdi + 0x1a]; ret
0x00000c82 : mov edi, 0x6c2c30; jmp rdx
0x0008fa00 : mov rax, [rdi + 0x98]; ret
0x00031270 : lea rax, [rdi + 0x15]; ret
0x00001222 : add [rax], bh; leave ; ret
0x0003120e : lea rax, [rdi + 0x12]; ret
0x00031393 : lea eax, [rdi + 0x1e]; ret
0x000624e1 : add [rax - 0x77], ecx; ret
0x000312f9 : lea eax, [rdi + 0x19]; ret
0x000313b3 : lea eax, [rdi + 0x1f]; ret
0x0006784d : mov eax, esi; pop r14; ret
0x00031372 : lea rax, [rdi + 0x1d]; ret
0x00040e52 : add [rcx - 0x7d], ecx; ret
0x0008fa31 : mov [rdi + 0x98], esi; ret
0x0008fa40 : mov rax, [rdi + 0xa0]; ret
0x0008fa01 : mov eax, [rdi + 0x98]; ret
0x0003be78 : mov [rdx + 0x54], eax; ret
0x00001be3 : mov eax, ecx; pop r13; ret
0x0000a2a7 : pop rax; call [r15 + 0x30]
0x000312b0 : lea rax, [rdi + 0x17]; ret
0x00030c9e : movq [rdi + 0xd], mm2; ret
0x00031373 : lea eax, [rdi + 0x1d]; ret
0x000061ea : xor eax, eax; pop r12; ret
0x0008fa41 : mov eax, [rdi + 0xa0]; ret
0x0001d0a0 : lea rax, [rip + 0x79]; ret
0x000312b1 : lea eax, [rdi + 0x17]; ret
0x0004c513 : mov eax, ebp; pop rbp; ret
0x0008bbef : add ecx, [rax - 0x46]; ret
0x0008fa50 : mov rax, [rdi + 0xb8]; ret
0x000892c6 : add eax, [rcx + 0x5f]; ret
0x000140b1 : mov eax, esi; pop rbx; ret
0x0006dc26 : mov edi, 0x6c21a0; call rax
0x000337a7 : movzx eax, cl; pop rbx; ret
0x000337cf : movzx eax, dl; pop rbx; ret
0x000902b0 : mov eax, 4; add rsp, 8; ret
0x0000326b : mov edi, 0x6c31a0; call r13
0x00090292 : mov eax, 8; add rsp, 8; ret
0x00000cf1 : mov edi, 0x6c0ef0; call rax
0x0003aa4f : mov edi, 0x6c4220; call rax
0x000028f4 : mov edi, 0x6c42a0; call rbx
0x0006dbe7 : mov [rdi + 0x300], rax; ret
0x00091d5b : mov [rbx], r8; pop rbx; ret
0x0002a71c : movq [rdi - 0x10], mm0; ret
0x0007e8d1 : mov edi, 0x6c4640; call rax
0x0001c2fa : push rbp; xor rax, rax; ret
0x00062504 : add ah, bh; jmp [rsi + 0xf]
0x0006dbbc : mov [rdi + 0x308], eax; ret
0x00000cac : mov edi, 0x4b2f78; call rax
0x00050c30 : add [rax], al; pop r13; ret
0x00063a30 : dec [rbx - 0x16dfdbbc]; ret
0x00032926 : push rsi; sub eax, edx; ret
0x00038c9a : sub [rax], al; pop rbx; ret
0x0000320e : mov edi, 0x6c31a0; call rax
0x000029ab : mov edi, 0x6c3140; call rax
0x0008f76c : add [rdi + 1], bh; call rax
0x0006dbe8 : mov [rdi + 0x300], eax; ret
0x000361cf : add [rsi + 1], bh; call rbx
0x0006e1e9 : inc [rbp + 0x5b0278c0]; ret
0x00038968 : mov edi, 0x6c21e0; call rax
0x00070746 : adc di, cx; jmp [rsi + 0xf]
0x0006dbbb : mov [rdi + 0x308], rax; ret
0x0008f744 : add [rdi + 1], bh; call r14
0x00002caf : mov edi, 0x6c42a0; call rax
0x0008b468 : add es:[r8 - 0x77], cl; ret
0x000028fb : mov edi, 0x6c30c0; call rbx
0x00006f7b : mov rdi, ss:[r12]; call r13
0x00050b62 : add [rax], al; pop r14; ret
0x00077515 : add [rcx], dh; imul al; ret
0x000902c0 : mov eax, 2; add rsp, 8; ret
0x0007ed0c : movzx eax, al; neg eax; ret
0x0001cc08 : dec [rax - 0x77]; clc ; ret
0x0006b1bd : add [rax], al; pop r15; ret
0x0007ea8e : pop rax; and al, 0; jmp rax
0x0002a78c : movq [rdi - 0x10], mm1; ret
0x00030cfe : movq [rdi + 0x10], mm2; ret
0x000714bb : add [rcx], al; pop rbx; ret
0x0008ccf6 : leave ; cmove rax, rdx; ret
0x0000ad1b : add [rax], al; pop rbx; ret
0x00000dd3 : add [rax], al; pop rbp; ret
0x0003f10e : mov [rsp + 8], rax; call r12
0x0003fabf : mov [rsp + 8], rax; call r15
0x0003c59d : mov esi, ebx; call [r14 + 8]
0x000337e0 : add eax, [rax]; pop rbx; ret
0x00035885 : mov [rsp + 8], rax; call rbx
0x0000a54b : push [rbp + 2]; pop rbx; ret
0x00025fc7 : lea ecx, [rbx + rcx]; jmp r9
0x0003c8ed : mov [rsp + 8], rax; call r14
0x0001cac1 : mov [rax + rdx - 2], cx; ret
0x00091d5c : mov [rbx], eax; pop rbx; ret
0x00063df6 : lea ecx, [rax + 4]; call rbx
0x0003cbce : mov [rsp + 8], eax; call r15
0x0003f10f : mov [rsp + 8], eax; call r12
0x00000cb8 : sub al, 0; add ebx, esi; ret
0x0003dafb : mov rsi, r13; call [rbx + 8]
0x0000a5dc : add al, 0x24; call [r13 + 8]
0x0007ec59 : mov [rax], edx; pop rbx; ret
0x00063df5 : lea rcx, [rax + 4]; call rbx
0x00035886 : mov [rsp + 8], eax; call rbx
0x0003db73 : mov [rsp + 8], eax; call rbp
0x0003cb6d : mov esi, esp; call [r15 + 8]
0x0007290c : add eax, [rdx + 8]; call rax
0x0003cb6c : mov rsi, r12; call [r15 + 8]
0x0007ec65 : mov [rax], edi; pop rbx; ret
0x00042f8b : add al, ch; call [rbx + rax]
0x0001c3be : lea rax, [rip + 0x852b]; ret
0x0007290b : add rax, [rdx + 8]; call rax
0x0003f09c : mov rsi, r12; call [r14 + 8]
0x0000a363 : add al, 0x24; call [r15 + 8]
0x0001c3bf : lea eax, [rip + 0x852b]; ret
0x00073b0e : movsb [rdi], [rsi]; ret 0x4a
0x0003f09d : mov esi, esp; call [r14 + 8]
0x0004086b : mov rsi, rbx; call [r13 + 8]
0x0007ec44 : mov [rdx], rax; pop rbx; ret
0x000617a7 : mov eax, [rdx]; pop rbx; ret
0x00063a17 : lea rcx, [rax + 1]; call rbx
0x00063a18 : lea ecx, [rax + 1]; call rbx
0x0007ec64 : mov [rax], rdi; pop rbx; ret
0x00064583 : add [rax], al; syscall ; ret
0x00018c04 : mov dh, 7; sub eax, ecx; ret
0x0003c155 : mov esi, ebp; call [r15 + 8]
0x0000f205 : mov [rip + 0x2b4199], 0; ret
0x00014cd8 : mov [rip + 0x2ae74e], 0; ret
0x00017855 : lea r10, [r10 + r9]; jmp r10
0x0003c154 : mov rsi, rbp; call [r15 + 8]
0x0008ddf0 : mov [rip + 0x236729], 8; ret
0x0007ec58 : mov [rax], rdx; pop rbx; ret
0x0000f1a6 : add [rip + 0x2b41f7], 1; ret
0x0003c59c : mov rsi, rbx; call [r14 + 8]
0x00034927 : mov [rip + 0x28ebff], 1; ret
0x00061702 : mov eax, [rsi]; pop rbx; ret
0x00037722 : int1 ; pop rdx; pop r10; ret
0x0000768e : xor rax, fs:[0x30]; call rax
0x0003dafc : mov esi, ebp; call [rbx + 8]
0x0004086c : mov esi, ebx; call [r13 + 8]
0x0003c2af : mov [rsp + 8], eax; call r14
0x0007ec45 : mov [rdx], eax; pop rbx; ret
0x0001c3c6 : lea rax, [rip + 0x15313]; ret
0x0001cac2 : mov [rax + rdx - 2], ecx; ret
0x000264e3 : sub [rdi - 0x10], ebp; jmp r9
0x000308fd : lea rcx, [r11 + rcx]; jmp rcx
0x0001c3c7 : lea eax, [rip + 0x15313]; ret
0x0001cf75 : lea eax, [rip + 0x11f55]; ret
0x00073916 : mov edx, 1; mov eax, edx; ret
0x00063893 : add al, 0; add [rax], al; ret
0x0008fa93 : mov al, 0; add [rax], al; ret
0x0007eb78 : push rdi; and al, 0; call rax
0x00017534 : add esp, 8; mov rax, rdx; ret
0x0001cad1 : mov [rdi + rdx - 8], rcx; ret
0x00017533 : add rsp, 8; mov rax, rdx; ret
0x00017561 : lea rax, [rip + 0x19e58]; ret
0x0008d224 : sub al, 0xfe; jmp [rsi + 0xf]
0x000199f5 : lea eax, [rip + 0x13d25]; ret
0x00026094 : lea edx, [rbx + rdx]; jmp rdx
0x000308fe : lea ecx, [rbx + rcx]; jmp rcx
0x00010d87 : add [rax + 0x6c1860], bh; ret
0x0001cad2 : mov [rdi + rdx - 8], ecx; ret
0x0001cac9 : mov [rdi + rdx - 4], ecx; ret
0x00026487 : lea rdx, [rdx - 0x40]; jmp r9
0x00008700 : add [rax], 0; add cl, ch; ret
0x00076300 : mov [rdx], 0; mov eax, 1; ret
0x000199f4 : lea rax, [rip + 0x13d25]; ret
0x00017856 : lea edx, [rdx + rcx]; jmp r10
0x00026488 : lea edx, [rdx - 0x40]; jmp r9
0x00070747 : adc edi, ecx; jmp [rsi + 0xf]
0x0007008c : mov r9, [rsp + 0x30]; call r9
0x0002658c : movaps xmm[rdi], xmm4; jmp r9
0x0006dc96 : add [rbx + 0x5d], bl; jmp rax
0x00026093 : lea rdx, [r11 + rdx]; jmp rdx
0x0001c3ca : push rbx; add [rax], eax; ret
0x0001cf74 : lea rax, [rip + 0x11f55]; ret
0x00042ec1 : div [rbp + rax*8 + 0x5b]; ret
0x00017562 : lea eax, [rip + 0x19e58]; ret
0x00015ab0 : xor eax, eax; add rsp, 8; ret
0x00088daa : add [rcx - 0xcfd8130], cl; ret
0x000002fa : pop r14; pop r15; pop rbp; ret
0x0008c6f4 : movups xmm0, xmm[rsp - 8]; ret
0x0000180e : pop r13; pop r14; pop r15; ret
0x0003ee52 : sub al, 0xfc; jmp [rsi + 0x66]
0x0008cf50 : mov eax, [rip + 0x237ce2]; ret
0x0000a5db : mov [rsp], eax; call [r13 + 8]
0x0008c6ae : movups xmm0, xmm[rsp - 4]; ret
0x00042511 : mov eax, [rip + 0x2819f9]; ret
0x00073bf0 : pop rsi; dec [rax + 0x63]; ret
0x0000f120 : mov rax, [rip + 0x2b1c19]; ret
0x0007e85f : div rbp; pop rbp; pop r12; ret
0x00015450 : mov ah, 0xff; jmp [rsi + 0x66]
0x0006383e : add [rax], al; add rax, 3; ret
0x00074ddb : pop rsi; idiv r9; pop r15; ret
0x0000dbd7 : mov rax, [rax + 0x28]; jmp rax
0x00008455 : pop rsp; pop r13; pop rbp; ret
0x0000f1e5 : add al, [rax]; add bl, dh; ret
0x000638be : add [rax], al; mov rax, 7; ret
0x0000df97 : mov rax, [rax + 0x40]; jmp rax
0x0000c4c9 : pop rsp; neg eax; pop r13; ret
0x000423fe : add [rax], al; mov eax, 1; ret
0x0006389e : add [rax], al; mov rax, 5; ret
0x000659c8 : add [rax], al; add rsp, 8; ret
0x0008e5bf : sbb [rax + 0xf4c10fa], al; ret
0x00001923 : pop rsp; pop r13; pop r14; ret
0x0006388e : add [rax], al; mov rax, 4; ret
0x0000df98 : mov eax, [rax + 0x40]; jmp rax
0x00076723 : mov bl, 0xf8; jmp [rsi + 0x2e]
0x00028c4b : add [rax - 0x7f], cl; ret 0x80
0x000641f9 : adc [rbp - 0xc0d8a2e], al; ret
0x0000a562 : mov rax, [rax + 0x20]; jmp rax
0x00012840 : add [rax], al; add dh, dh; ret
0x00006ffd : mov [rsp + 0x10], r9; call r13
0x00008701 : add [rax], al; add cl, ch; ret
0x0000180f : pop rbp; pop r14; pop r15; ret
0x0007693c : mulss xmm0, xmm0; pop r15; ret
0x00014c7f : mov bl, 0xff; jmp [rsi + 0x66]
0x0000a361 : mov [rsp], rax; call [r15 + 8]
0x0000d9ec : mov eax, [rax + 0x18]; jmp rax
0x0000e3eb : mov rax, [rax + 0x48]; jmp rax
0x00032e35 : sbb eax, eax; sbb eax, -1; ret
0x00039f11 : mov eax, [rip + 0x28add1]; ret
0x0003105f : add [rax + 0x78d4837], cl; ret
0x000002fb : pop rsi; pop r15; pop rbp; ret
0x00001922 : pop r12; pop r13; pop r14; ret
0x0000a5da : mov [rsp], rax; call [r13 + 8]
0x0000d9eb : mov rax, [rax + 0x18]; jmp rax
0x000337ff : pop rbx; and eax, 0x3fc00; ret
0x00001225 : add [rax], al; add cl, cl; ret
0x0006f52f : dec [rax + 1]; int1 ; call rcx
0x00001b6c : pop rbp; pop r12; pop r13; ret
0x00039f10 : mov rax, [rip + 0x28add1]; ret
0x0007008d : mov ecx, [rsp + 0x30]; call r9
0x0002a7ab : int1 ; mov [rdi - 8], rcx; ret
0x00074dda : pop r14; idiv r9; pop r15; ret
0x000013b2 : mov edi, [rsp + 0xc]; call r13
0x0006387e : add [rax], al; mov rax, 3; ret
0x0000c4c8 : pop r12; neg eax; pop r13; ret
0x00008454 : pop r12; pop r13; pop rbp; ret
0x0000dbd8 : mov eax, [rax + 0x28]; jmp rax
0x0000a362 : mov [rsp], eax; call [r15 + 8]
0x00068463 : pop rbx; pop r12; pop rbp; ret
0x0006386e : add [rax], al; mov rax, 2; ret
0x0002857f : int1 ; mov [rdi - 8], rdx; ret
0x0000e3ec : mov eax, [rax + 0x48]; jmp rax
0x00000131 : pop rbx; pop rbp; pop r12; ret
0x0000e5ee : add [rax], al; add bl, dh; ret
0x0005f218 : int3 ; int3 ; or al, 0x7e; ret
0x00044eea : add [rbx + rax - 0xd], dh; ret
0x0006385e : add [rax], al; mov rax, 1; ret
0x000484a6 : inc [rax - 0x4df43]; jmp [rax]
0x0007e860 : div ebp; pop rbp; pop r12; ret
0x0007693d : mulps xmm0, xmm0; pop r15; ret
0x0000de4f : movzx eax, [rax]; pop rbx; ret
0x0000da9d : movzx eax, [rdx]; pop rbx; ret
0x0000f121 : mov eax, [rip + 0x2b1c19]; ret
0x00042510 : mov rax, [rip + 0x2819f9]; ret
0x0007972c : mulsd xmm0, xmm0; pop r15; ret
0x00042f8a : add r8b, bpl; call [rbx + rax]
0x00047a41 : inc [rax - 0x4dd43]; jmp [rax]
0x000638ae : add [rax], al; mov rax, 6; ret
0x0000a563 : mov eax, [rax + 0x20]; jmp rax
0x0004547a : mov rdi, [rsp + 0x18]; call rbp
0x00039ce3 : mov rsi, [rsp + 0x18]; call rbx
0x00006a50 : add [rax], eax; add cl, ch; ret
0x0005a270 : mov edi, edi; call [rax + 0x38]
0x0008e5c2 : adc [rdi + rcx + 0x44], cl; ret
0x00008d4d : mov rdi, rbx; call [rax + 0x58]
0x0000de39 : mov ebx, edi; call [rax + 0x20]
0x000738d4 : sub edx, ecx; mov eax, edx; ret
0x0006621a : add al, [rsi + 0x39480001]; ret
0x0008f991 : mov eax, [rax]; add rsp, 8; ret
0x0007365e : mov edi, [rdi + 0x28]; call r11
0x0000854a : mov edi, ebx; call [rax + 0x10]
0x0008fc7e : mov edi, [rbp - 8]; leave ; ret
0x00004b1d : mov ah, 0xff; call [rbp + 0x48]
0x0007365d : mov rdi, [rdi + 0x28]; call r11
0x00009e68 : mov edi, edi; call [r15 + 0x20]
0x00061b24 : mov rdi, r12; call [rax + 0x18]
0x0000c477 : mov edi, ebx; call [rax + 0x78]
0x00076127 : mov eax, ecx; adc eax, eax; ret
0x00019cde : add eax, edx; sub rax, rdi; ret
0x00060799 : mov edi, esp; call [rax + 0x38]
0x00087e73 : mov [rsp + 0x70], esi; call rbp
0x00087d95 : lea edi, [rsp + 0x80]; call rbp
0x0001c0d7 : add eax, edi; add rax, rcx; ret
0x0006c9d0 : mov rdi, [rsp + 0x30]; call rax
0x00062195 : mov edi, ebx; call [rdx + 0x30]
0x0001f325 : mov cl, [rbx - 0x37d67dfc]; ret
0x000762ee : mov [rdi], eax; mov eax, 1; ret
0x00059ef5 : inc [rbx - 0x110b43]; jmp [rax]
0x000485f6 : mov rdx, r14; call [rax + 0x38]
0x00019cdd : add rax, rdx; sub rax, rdi; ret
0x0008f990 : mov rax, [rax]; add rsp, 8; ret
0x0003e4e9 : mov rsi, [rsp + 0x58]; call rax
0x000087ad : mov edi, ebx; call [rax + 0x60]
0x00009645 : mov rdi, rbp; call [rbp + 0x20]
0x0000bdf9 : mov rdi, rbp; call [rax + 0x78]
0x00062194 : mov rdi, rbx; call [rdx + 0x30]
0x00009e67 : mov rdi, r15; call [r15 + 0x20]
0x0006eb18 : mov [rbp - 0xe0], r11; call rax
0x0000c704 : mov rdi, r12; call [rax + 0x48]
0x0002ed55 : add cl, [rax - 0x77]; clc ; ret
0x0004547b : mov edi, [rsp + 0x18]; call rbp
0x00039b79 : mov [rbp - 0x68], eax; call rcx
0x0000c343 : mov rdi, rbx; call [rax + 0x48]
0x000590bf : dec [rdi]; test [rcx], ebp; ret
0x00001f8b : lea rdi, [rbx + 0x80]; call rax
0x00039ea9 : mov rdi, [rbx + 0x18]; call rax
0x00087f73 : lea rdi, [rsp + 0x90]; call r12
0x00060798 : mov rdi, r12; call [rax + 0x38]
0x0000b798 : mov rdx, r13; call [rax + 0x40]
0x00008d4e : mov edi, ebx; call [rax + 0x58]
0x00061e99 : mov edi, edi; call [rax + 0x20]
0x00039ce4 : mov esi, [rsp + 0x18]; call rbx
0x00061b25 : mov edi, esp; call [rax + 0x18]
0x00001405 : mov rax, [rsp + 0x18]; call rax
0x0003350a : lea rax, [r9 + 1]; pop rbp; ret
0x000088c6 : add [rax], eax; add bl, dh; ret
0x00087e72 : mov [rsp + 0x70], r14; call rbp
0x0000ba13 : mov rdi, rbx; call [rax + 0x70]
0x00047f2f : sub rdx, rsi; call [rax + 0x38]
0x000248de : xor eax, eax; sub eax, ecx; ret
0x0001c0d6 : add rax, rdi; add rax, rcx; ret
0x000470da : mov rdx, r13; call [rax + 0x38]
0x0000bcfb : mov rdi, rbp; call [rax + 0x18]
0x0008f9f8 : mov [rcx], rdx; add rsp, 8; ret
0x00009862 : sub edx, esp; call [rax + 0x70]
0x000359aa : mov eax, [rsp + 0x10]; call rax
0x0000d1f4 : mov rdi, rbx; call [rax + 0x18]
0x0002edc1 : add [rax - 0x776b7fe], ecx; ret
0x0000b502 : mov rdi, rbx; call [rax + 0x40]
0x0000ee47 : sbb [rbx - 0x2fd6efb9], cl; ret
0x0004763a : mov rdi, rbx; call [rax + 0x38]
0x0000e2d2 : mov ebx, edi; call [rax + 0x60]
0x0005a26f : mov rdi, r15; call [rax + 0x38]
0x00039b78 : mov [rbp - 0x68], rax; call rcx
0x00013a11 : mov [rsp + 0x10], ecx; call rdx
0x0000b799 : mov edx, ebp; call [rax + 0x40]
0x00006ffe : mov [rsp + 0x10], ecx; call r13
0x0004763b : mov edi, ebx; call [rax + 0x38]
0x00073911 : sub edx, eax; mov eax, edx; ret
0x0000c476 : mov rdi, rbx; call [rax + 0x78]
0x00059842 : mov rdx, r12; call [rax + 0x38]
0x00061677 : add [rax - 1], bh; pop rbx; ret
0x00009c49 : mov rdx, r14; call [r13 + 0x18]
0x0006eb19 : mov [rbp - 0xe0], ebx; call rax
0x00061e98 : mov rdi, r15; call [rax + 0x20]
0x0004ec90 : add eax, eax; mov eax, r8d; ret
0x000762ed : mov [rdi], rax; mov eax, 1; ret
0x00008db5 : mov edi, ebx; call [rax + 0x68]
0x0000c344 : mov edi, ebx; call [rax + 0x48]
0x0000de38 : mov rbx, rdi; call [rax + 0x20]
0x00037747 : syscall ; pop rdx; pop rsi; ret
0x000478b1 : mov edi, ebx; call [rcx + 0x38]
0x000620bb : sbb [rcx + 0x5bc0310b], cl; ret
0x00009861 : sub rdx, r12; call [rax + 0x70]
0x0008f9f9 : mov [rcx], edx; add rsp, 8; ret
0x0008826a : mov [rsp + 0x90], rbx; call r12
0x0000f14f : add [rax - 0x77], cl; clc ; ret
0x0006c9d1 : mov edi, [rsp + 0x30]; call rax
0x00090136 : int3 ; mov rsi, [r15]; call r14
0x000087ac : mov rdi, rbx; call [rax + 0x60]
0x000762d1 : mov eax, 1; mov [rdx], ecx; ret
0x0008826b : mov [rsp + 0x90], ebx; call r12
0x0003a711 : mov eax, [rbp - 0x60]; call rax
0x00008549 : mov rdi, rbx; call [rax + 0x10]
0x00042e5b : adc [rip - 0xc6f0003], esp; ret
0x0004239d : mov edi, [rsp + 0x10]; call r15
0x000422c0 : mov edi, [rsp + 0x10]; call r12
0x0006f241 : mov [rbp - 0xe0], ebx; call rsi
0x0009053c : mov eax, [rdx]; add rsp, 8; ret
0x0006cc0c : mov esp, esi; call [rbx + 0x40]
0x0009053b : mov rax, [rdx]; add rsp, 8; ret
0x00001f8c : lea edi, [rbx + 0x80]; call rax
0x0000ee52 : adc [rbx - 0x2fd6efb9], cl; ret
0x0000e2d1 : mov rbx, rdi; call [rax + 0x60]
0x0000e7fc : mov edi, ebx; call [rax + 0x30]
0x0006cc0b : mov r12, r14; call [rbx + 0x40]
0x000714cd : pop rbx; mov eax, fs:[rax]; ret
0x00047f30 : sub edx, esi; call [rax + 0x38]
0x00076383 : mov [rdx], eax; mov eax, 1; ret
0x0003a710 : mov rax, [rbp - 0x60]; call rax
0x000375da : add [rbp - 0x3dbaf02e], al; ret
0x0001382a : mov [rsp + 0x28], ebx; call rax
0x00030571 : add [rax + 0x28d4802], ecx; ret
0x0000b503 : mov edi, ebx; call [rax + 0x40]
0x0001382b : pop rsp; and al, 0x28; call rax
0x000096d6 : add al, 0x24; call [rbp + 0x18]
0x00067412 : mov [rax], 2; xor eax, eax; ret
0x00013a10 : mov [rsp + 0x10], rcx; call rdx
0x00008db4 : mov rdi, rbx; call [rax + 0x68]
0x0000f0de : add [rax], al; mov rax, -1; ret
0x0000c705 : mov edi, esp; call [rax + 0x48]
0x0005a6e6 : inc [rax - 0x10b143]; jmp [rax]
0x0000bcfc : mov edi, ebp; call [rax + 0x18]
0x0000e7fb : mov rdi, rbx; call [rax + 0x30]
0x0000bf92 : mov rdi, rbx; call [rax + 0x20]
0x00090581 : mov eax, [rsi]; add rsp, 8; ret
0x0008f3a9 : add [rax], eax; add dh, dh; ret
0x000485f7 : mov edx, esi; call [rax + 0x38]
0x00030aa4 : add ecx, [rcx + 0x357890f]; ret
0x00008b21 : mov rsi, r12; call [rax + 0x38]
0x00063d68 : lea esi, [rsp + 0x40]; call rbx
0x00039eaa : mov edi, [rbx + 0x18]; call rax
0x00061f04 : mov rdi, r15; call [rax + 0x18]
0x00063d67 : lea rsi, [rsp + 0x40]; call rbx
0x000130c4 : add [rcx + 0x548d48cf], cl; ret
0x00001406 : mov eax, [rsp + 0x18]; call rax
0x0006f5e8 : mov [rbp - 0x100], r8; call rsi
0x000359a9 : mov rax, [rsp + 0x10]; call rax
0x00087b8b : lea edi, [rsp + 0x70]; call rbp
0x0003e4ea : mov esi, [rsp + 0x58]; call rax
0x0000bf93 : mov edi, ebx; call [rax + 0x20]
0x0008fc7d : mov r15, [rbp - 8]; leave ; ret
0x000098d8 : add al, 0x24; call [r13 + 0x18]
0x00061f05 : mov edi, edi; call [rax + 0x18]
0x00033801 : add ah, bh; add eax, [rax]; ret
0x00059843 : mov edx, esp; call [rax + 0x38]
0x00009c4a : mov edx, esi; call [r13 + 0x18]
0x0000bdfa : mov edi, ebp; call [rax + 0x78]
0x0006f240 : mov [rbp - 0xe0], r11; call rsi
0x00087b8a : lea rdi, [rsp + 0x70]; call rbp
0x00090580 : mov rax, [rsi]; add rsp, 8; ret
0x0007bf0b : pop rbx; clc ; jmp [rsi - 0x70]
0x00035cd5 : mov eax, [rbp - 0x48]; call rax
0x0000e851 : push [rbp - 0x1a]; pop rbx; ret
0x0000d1f5 : mov edi, ebx; call [rax + 0x18]
0x00008b22 : mov esi, esp; call [rax + 0x38]
0x0004ec8f : add r8d, eax; mov eax, r8d; ret
0x000422bf : mov rdi, [rsp + 0x10]; call r12
0x0004239c : mov rdi, [rsp + 0x10]; call r15
0x00035cd4 : mov rax, [rbp - 0x48]; call rax
0x000478b0 : mov rdi, rbx; call [rcx + 0x38]
0x00087f74 : lea edi, [rsp + 0x90]; call r12
0x0002edf1 : add [rcx - 0x776b7fe], ecx; ret
0x0000ba14 : mov edi, ebx; call [rax + 0x70]
0x00087d94 : lea rdi, [rsp + 0x80]; call rbp
0x000470db : mov edx, ebp; call [rax + 0x38]
0x00009646 : mov edi, ebp; call [rbp + 0x20]
0x0001c23e : xor [rsi + 0xf], ah; xlatb ; ret
0x00049bfe : add edx, ebx; call [r11 + rax*8]
0x0001f5cf : xchg eax, ecx; sub eax, edx; ret
0x0001678e : xor eax, eax; add rsp, 0x18; ret
0x0001c334 : lea eax, [rax + rdi + 0x20]; ret
0x0000feaa : mov [rsi], rax; mov rax, r8; ret
0x0001c4c9 : movzx edx, dl; sub eax, edx; ret
0x0001c303 : lea rax, [rax + rdi - 0x10]; ret
0x0002b543 : add dh, bl; movq [rdi], mm1; ret
0x00074a9c : sub rax, rdx; shr rax, 0x3f; ret
0x0002edd3 : mov [rdx], ax; mov rax, rdi; ret
0x0000f14e : add [rax], al; mov rax, rdi; ret
0x0001c359 : lea eax, [rdi + rax + 0x10]; ret
0x00030c9d : movdqu xmm[rdi + 0xd], xmm2; ret
0x00042ed7 : mov [rbx + 8], eax; pop rbx; ret
0x0008b094 : mov edx, edi; call [r12 + rdx*8]
0x000744f6 : xor eax, eax; add rsp, 0x58; ret
0x0000c3c2 : add [rax], al; call [rax + 0x48]
0x0001c369 : lea eax, [rdi + rax + 0x20]; ret
0x0001c358 : lea rax, [rdi + rax + 0x10]; ret
0x0003350b : lea eax, [rcx + 1]; pop rbp; ret
0x0000bc46 : add [rdx + 0x48], bl; cwde ; ret
0x0001c333 : lea rax, [rax + rdi + 0x20]; ret
0x00030cbd : movdqu xmm[rdi + 0xe], xmm2; ret
0x00062747 : add [rax], al; bsf rax, rdx; ret
0x0000feab : mov [rsi], eax; mov rax, r8; ret
0x0007edd2 : mov rax, rdx; add rsp, 0x38; ret
0x0005ab6c : mov rdi, r15; call [rax + r11*8]
0x0004f321 : add [rcx], ebx; jmp [rsi - 0x3f]
0x0001c253 : lea eax, [rdi + rax + 0x30]; ret
0x00074b2f : sub eax, edx; sar eax, 0x10; ret
0x00049bfd : add rdx, rbx; call [r11 + rax*8]
0x0001c304 : lea eax, [rax + rdi - 0x10]; ret
0x0003395e : mov dh, [rdi + rbx*8 - 0xd]; ret
0x0005ab6d : mov edi, edi; call [rax + r11*8]
0x00009616 : add [rax], al; xor eax, eax; ret
0x00042154 : adc ecx, [rcx + 0x29d231f3]; ret
0x000626a2 : div [rbp + 4]; xor rax, rax; ret
0x000680a9 : mov al, [rbx]; add al, 0x16; ret
0x00073919 : add [rax], al; mov eax, edx; ret
0x0001c2bd : add [rax], al; xor rax, rax; ret
0x0003c37e : push rdi; cld ; jmp [rsi + 0x66]
0x00015169 : add [rax - 0x7d], cl; call [rax]
0x000641c6 : add [rax], al; mov rax, rcx; ret
0x00013829 : mov [rsp + 0x28], r11d; call rax
0x00088dd8 : add [rax], al; mov eax, esi; ret
0x0001c324 : lea eax, [rax + rdi + 0x10]; ret
0x0002ee29 : add ecx, [rax - 0x77]; clc ; ret
0x000361cb : mov edx, 4; mov esi, 1; call rbx
0x0001c323 : lea rax, [rax + rdi + 0x10]; ret
0x00012438 : xchg [rbx - 0x9fffffb], ebp; ret
0x0004817e : mov rdi, rbx; call [rax + r11*8]
0x000728ec : mov eax, esi; call [r15 + rax*8]
0x0007edd3 : mov eax, edx; add rsp, 0x38; ret
0x00077e33 : int3 ; add [rax - 0x7d], cl; ret
0x0008fd1f : add [rax - 0x77], cl; int3 ; ret
0x0005b9b0 : add [rbx - 0x7bf0fe40], eax; ret
0x0002565c : add [rax], al; sub eax, ecx; ret
0x0001c368 : lea rax, [rdi + rax + 0x20]; ret
0x000745cf : xor eax, eax; add rsp, 0x78; ret
0x0008d4a6 : add [rax - 0x7d], cl; call [rcx]
0x00061f95 : add [rax], al; call [rax + 0x68]
0x0006c693 : push rsp; stc ; jmp [rsi + 0x2e]
0x0006087c : inc ebx; nop ; xor eax, eax; ret
0x0005c201 : add edx, esp; call [r11 + rax*8]
0x0008caed : mov rax, rdx; add rsp, 0x28; ret
0x0006f5e9 : mov [rbp - 0x100], eax; call rsi
0x0001c252 : lea rax, [rdi + rax + 0x30]; ret
0x00019977 : xchg eax, edx; sub eax, edx; ret
0x0002edc2 : mov [rdx], al; mov rax, rdi; ret
0x00074a9d : sub eax, edx; shr rax, 0x3f; ret
0x0004817f : mov edi, ebx; call [rax + r11*8]
0x0008fc37 : mov esi, 1; mov edi, 1; call rax
0x00030cdd : movdqu xmm[rdi + 0xf], xmm2; ret
0x00001303 : add [rax], al; call [rbx + 0x10]
0x0003f3cc : add eax, [rbx + 0x394807e0]; ret
0x0005c200 : add rdx, r12; call [r11 + rax*8]
0x0008caee : mov eax, edx; add rsp, 0x28; ret
0x000892c1 : pop r14; sar rax, 3; pop r15; ret
0x00030a50 : mov dx, [rsi]; mov [rdi], dx; ret
0x000673c5 : mov [rax + 0x28], 0; pop rbx; ret
0x00008155 : add [rax], al; add rsp, 0xd8; ret
0x00050b5d : pop r13; mov eax, 1; pop r14; ret
0x00014f54 : mov [rax + rbx], dh; pop rbx; ret
0x0001ca28 : movq [rdi + rdx - 0x20], mm0; ret
0x000892c2 : pop rsi; sar rax, 3; pop r15; ret
0x000096d5 : mov [rsp], eax; call [rbp + 0x18]
0x0008fd1d : mov ebp, [rbp]; mov rsp, rcx; ret
0x0003e956 : mov edi, [rsp + 0x68]; call [r13]
0x000098d7 : mov [rsp], eax; call [r13 + 0x18]
0x00050c2b : pop r12; mov eax, 1; pop r13; ret
0x00074b88 : mov rsp, r8; mov rbp, r9; jmp rdx
0x00030a3e : add [rax], al; mov [rdi], dh; ret
0x000741de : add [rdx + rbp*2 - 0x7d], dh; ret
0x000098d6 : mov [rsp], rax; call [r13 + 0x18]
0x0008fd1c : mov rbp, [rbp]; mov rsp, rcx; ret
0x000641c5 : add [rax], r8b; mov rax, rcx; ret
0x0008b093 : mov edx, r15d; call [r12 + rdx*8]
0x00074193 : add [rcx + rdi*2 - 0x7d], dh; ret
0x00001d03 : add esp, 8; pop rbx; pop rbp; ret
0x0002ed54 : mov [rdx], eax; mov rax, rdi; ret
0x00074732 : mov eax, [0]; add rax, -0x10; ret
0x00025f6a : add rdi, rdx; add r9, r11; jmp r9
0x00067f39 : mov [rax], edx; xor eax, eax; ret
0x00001d02 : add rsp, 8; pop rbx; pop rbp; ret
0x00038cab : add [rcx], dh; sar [rcx], cl; ret
0x00062157 : mov [rax + 0x48], 0; pop rbx; ret
0x00050c2c : pop rsp; mov eax, 1; pop r13; ret
0x00025f6b : add edi, edx; add r9, r11; jmp r9
0x00042eb7 : mov [rbx + 0x10], 0; pop rbx; ret
0x00030cfd : movdqu xmm[rdi + 0x10], xmm2; ret
0x0002a71b : movdqu xmm[rdi - 0x10], xmm0; ret
0x00032956 : push rsi; cmc ; sub eax, edx; ret
0x0005fd8a : mov esi, 1; mov rdi, rbx; call r8
0x0006b1b9 : pop rsi; mov eax, 1; pop r15; ret
0x00032a66 : add [rbx - 0x7bf0ed07], al; ret 2
0x0002a78b : movdqu xmm[rdi - 0x10], xmm1; ret
0x0006b1b8 : pop r14; mov eax, 1; pop r15; ret
0x000625ab : add [rax], al; add [rcx], dh; ret
0x0002ed53 : mov [rdx], rax; mov rax, rdi; ret
0x00074731 : mov rax, [0]; add rax, -0x10; ret
0x0002a83a : push rdi; mov [rdi - 8], rcx; ret
0x00033dfb : mov eax, 1; pop rbx; pop rbp; ret
0x0003116c : push rdi; add eax, 0xc478d48; ret
0x000096d4 : mov [rsp], rax; call [rbp + 0x18]
0x0000187e : sub eax, [rax]; xor eax, eax; ret
0x000728eb : mov eax, r14d; call [r15 + rax*8]
0x00063873 : add al, [rax]; add [rax], al; ret
0x0000b41f : add [rbx + 0x18e9707f], cl; ret 2
0x00009615 : add [rax], r8b; xor eax, eax; ret
0x0003e955 : mov rdi, [rsp + 0x68]; call [r13]
0x0000e53d : add [rax], al; add [rax], al; ret
0x0000fcfd : sub eax, [rax]; add ebx, esi; ret
0x00045326 : add [rax], al; add rsp, 0xd0; ret
0x0008ffca : mov esi, edi; mov edi, 1; jmp rax
0x0003388f : int1 ; pop rbx; mov eax, eax; ret
0x0000d8f4 : push rdi; mov [rdi + 8], rax; ret
0x0008ffc9 : mov rsi, rdi; mov edi, 1; jmp rax
0x0000d9ba : mov [rbx + 0x50], 0; pop rbx; ret
0x00050b5e : pop rbp; mov eax, 1; pop r14; ret
0x0006dbea : add [rbx], al; add [rax], al; ret
0x00032916 : push rsi; int1 ; sub eax, edx; ret
0x00031060 : mov [rdi], dh; lea rax, [rdi]; ret
0x000347d8 : xchg eax, esp; add [rax], r8b; ret
0x00035972 : push rbx; or [rax - 0x7d], cl; ret
0x00015712 : pop rbp; pop r14; pop r15; jmp rax
0x0003492d : add [rax], eax; add [rax], al; ret
0x000363ae : mov esi, 2; mov rdi, r13; call rbx
0x00074737 : add [rax], al; add rax, -0x10; ret
0x0007370e : mov rbx, [rsp]; add rsp, 0x30; ret
0x00034083 : xor [rbx + 0x5d], bl; pop r12; ret
0x0007e8d0 : add [rdi + 0x6c4640], bh; call rax
0x00036289 : mov esi, 1; mov rdi, r13; call rbx
0x00044f2e : mov rax, [rax + rdi*8 + 0x80]; ret
0x000361f2 : mov esi, 2; mov rdi, r15; call rbx
0x0007370f : mov ebx, [rsp]; add rsp, 0x30; ret
0x000353a5 : mov edx, esp; mov esi, 1; call rbp
0x00036c73 : mov esi, 3; mov rdi, r14; call rbx
0x00015711 : pop r13; pop r14; pop r15; jmp rax
0x0000bc45 : add al, [rax]; pop rdx; cdqe ; ret
0x0007bfe4 : pop r14; pop r15; fmulp st(1); ret
0x00000aae : adc ebp, [rax + rax]; pop r12; ret
0x00036d73 : mov esi, 3; mov rdi, r15; call rbx
0x00036647 : mov esi, 1; mov rdi, rbp; call rbx
0x000015b0 : push [rax + 0x48]; add esp, 8; ret
0x0007bfe5 : pop rsi; pop r15; fmulp st(1); ret
0x000762d4 : add [rax], al; mov [rdx], ecx; ret
0x0008f0e2 : xchg [rcx + rax - 8], ecx; jmp rax
0x00002e7e : add [rdi + 0x6c42a0], bh; call rax
0x00038d61 : pop rbx; shl eax, cl; pop rbp; ret
0x00030a51 : mov edx, [rsi]; mov [rdi], dx; ret
0x00015342 : pop rbx; pop rbp; pop r12; jmp rax
0x00005345 : add [rcx - 0x55551e], al; call rcx
0x00001995 : xor esi, esi; mov edi, 1; call rax
0x0003384d : add [r8 + 0x10], dil; pop rbx; ret
0x000902bf : add [rax + 2], bh; add rsp, 8; ret
0x00005743 : adc [rbx + 0x5d], bl; pop r12; ret
0x0003384e : add [rax + 0x10], bh; pop rbx; ret
0x00036bf3 : mov esi, 3; mov rdi, r13; call rbx
0x00067411 : mov fs:[rax], 2; xor eax, eax; ret
0x0007ea8b : mov edi, [rip + 0x24585f]; jmp rax
0x00044f2f : mov eax, [rax + rdi*8 + 0x80]; ret
0x00014e1f : pop rdx; pop rbx; pop rbp; jmp rax
0x0003663b : mov esi, 2; mov rdi, r12; call rbx
0x00011aca : leave ; add [rax + 0x39], ecx; ret
0x0005f57f : mov esi, 1; mov rdi, rbx; call rax
0x0008abe2 : pop rax; sub [rax + 0x39], cl; ret
0x0002b5b3 : add ebx, esi; movq [rdi], mm1; ret
0x000080c4 : add eax, [rax]; add rsp, 0xd8; ret
0x00014f53 : mov [rax + rbx], sil; pop rbx; ret
0x00063883 : add eax, [rax]; add [rax], al; ret
0x00030572 : mov [rdx], al; lea rax, [rdx]; ret
0x00036201 : mov esi, 1; mov rdi, r14; call rbx
0x000315fe : add [rax], al; lea rax, [rdi]; ret
0x0008a965 : add [rbp + rcx*4 + 0x74], ecx; ret
0x0002b4d3 : add esi, ebx; movq [rdi], mm1; ret
0x00074b89 : mov esp, eax; mov rbp, r9; jmp rdx
0x000902af : add [rax + 4], bh; add rsp, 8; ret
0x00000130 : add [rbx + 0x5d], bl; pop r12; ret
0x0003aa4e : add [rdi + 0x6c4220], bh; call rax
0x0001c23d : xor [r14 + 0xf], r12b; xlatb ; ret
0x00036b9c : mov esi, 3; mov rdi, r12; call rbx
0x0003627a : mov esi, 2; mov rdi, r14; call rbx
0x000363bd : mov esi, 1; mov rdi, r12; call rbx
0x0007477e : sbb [rdi + 0x6c21e0], bh; call rax
0x0006784a : pop r13; mov rax, r14; pop r14; ret
0x0008f76b : add [rax], al; mov edi, 1; call rax
0x0007eb75 : mov edi, [rip + 0x245775]; call rax
0x000095ed : adc ebx, [rbx + 0x5d]; pop r12; ret
0x0007e87b : mov [rip + 0x245a7b], 0x6c4680; ret
0x00070a46 : pop rbx; mov eax, edx; pop rbp; ret
0x0007135f : mov rax, rbp; pop rbp; pop r12; ret
0x00000c41 : pop rbp; mov edi, 0x6c2c30; jmp rax
0x000353a4 : mov edx, r12d; mov esi, 1; call rbp
0x0003ae8b : pop r13; xor eax, eax; pop r14; ret
0x0008cb44 : mov [rbx + 0x18], rax; pop rbx; ret
0x000337bd : add ah, bh; inc [rbx]; pop rbx; ret
0x00008d28 : pop rbp; mov eax, edx; pop r12; ret
0x00078f35 : mov edi, eax; dec [rax - 0x77]; ret
0x00076266 : adc eax, edx; pop rbp; pop rbx; ret
0x0006358b : pop rbp; mov eax, edx; pop r14; ret
0x0008f743 : add [rax], al; mov edi, 1; call r14
0x0001c37c : xor bl, al; nop ; xor rax, rax; ret
0x00014cc6 : mov [rip + 0x2ac790], 0x414630; ret
0x0006784b : pop rbp; mov rax, r14; pop r14; ret
0x0004c495 : mov eax, ebp; pop rbx; pop rbp; ret
0x0002b2b1 : mov edx, [rsi]; mov [rdi], rdx; ret
0x0008f97a : adc dh, [rdx - 9]; jmp [rsi - 0x70]
0x00036205 : add [rcx + rcx*4 - 9], cl; call rbx
0x00047a1a : adc al, [rbx - 0x54f43]; call [rax]
0x00019b1c : xor eax, eax; pop rbx; pop rbp; ret
0x0000ad17 : mov [rbx + 0x90], eax; pop rbx; ret
0x0005198a : sub al, [rbx - 0x1df43]; call [rax]
0x00091839 : mov [rsi + 0x28], eax; pop rbx; ret
0x0002b470 : mov edx, [rsi]; mov [rdi], edx; ret
0x0003523e : mov eax, ebx; pop rbx; pop rbp; ret
0x000061e9 : pop rbp; xor eax, eax; pop r12; ret
0x00061d6e : sub eax, esi; pop r14; pop r15; ret
0x00007819 : mov rax, rsi; pop rbx; pop rbp; ret
0x00001306 : push rbx; adc [rax - 0x7d], cl; ret
0x0000ad16 : mov [rbx + 0x90], rax; pop rbx; ret
0x0000e151 : sub eax, ebp; pop r13; pop r14; ret
0x00010a0f : mov eax, edx; pop rbx; pop rbp; ret
0x0002b2b0 : mov rdx, [rsi]; mov [rdi], rdx; ret
0x00067c2f : add [rax + 0x6c], bh; syscall ; ret
0x0006358a : pop r13; mov eax, edx; pop r14; ret
0x0006457f : add [rax + 0xc9], bh; syscall ; ret
0x0003523d : mov rax, rbx; pop rbx; pop rbp; ret
0x0008cb45 : mov [rbx + 0x18], eax; pop rbx; ret
0x00061d6d : sub rax, r14; pop r14; pop r15; ret
0x0007321a : pop rbx; mov edi, 0x6c21e0; jmp rax
0x00067c0f : add [rax + 0x6b], bh; syscall ; ret
0x0003aa4d : add [r15 + 0x6c4220], dil; call rax
0x00017564 : pop rax; sahf ; add [rax], eax; ret
0x00091838 : mov [rsi + 0x28], rax; pop rbx; ret
0x00010a0e : mov rax, rdx; pop rbx; pop rbp; ret
0x00088e13 : mov [rbx + 0x20], eax; pop rbx; ret
0x00001be0 : pop r12; mov rax, rcx; pop r13; ret
0x0003ae8c : pop rbp; xor eax, eax; pop r14; ret
0x0003a3a4 : xchg [rbp + rcx*4 + 0x74], ecx; ret
0x00088e12 : mov [rbx + 0x20], rax; pop rbx; ret
0x0004c512 : pop rbx; mov eax, ebp; pop rbp; ret
0x00018c03 : movzx eax, [rdi]; sub eax, ecx; ret
0x0000dde3 : add ebx, [rbx + 0x5d]; pop r12; ret
0x0000781a : mov eax, esi; pop rbx; pop rbp; ret
0x00090291 : adc edi, [rax + 8]; add rsp, 8; ret
0x0001c4a3 : movzx edx, [rsi]; sub eax, edx; ret
0x00063e19 : sub rax, rbp; pop rbp; pop r12; ret
0x00050cf7 : pop rsp; mov eax, edx; pop rbx; ret
0x0000ee11 : mov ecx, [rdi]; mov [rdx], rcx; ret
0x0000ee10 : mov rcx, [rdi]; mov [rdx], rcx; ret
0x000361ce : add [rax], al; mov esi, 1; call rbx
0x0000e898 : sub r8, rcx; lea eax, [r8 - 1]; ret
0x00063e1a : sub eax, ebp; pop rbp; pop r12; ret
0x00001be1 : pop rsp; mov rax, rcx; pop r13; ret
0x00012e91 : add cl, [rax - 0x73]; push rsp; ret
0x00067c1f : add [rax + 0x68], bh; syscall ; ret
0x000085f6 : mov eax, ebp; pop rbp; pop r12; ret
0x0003388e : div ecx; pop rbx; mov eax, eax; ret
0x000361f6 : add [rcx + rcx*4 - 1], cl; call rbx
0x00076265 : adc rax, rdx; pop rbp; pop rbx; ret
0x00067bff : add [rax + 0x66], bh; syscall ; ret
0x0000e150 : sub rax, r13; pop r13; pop r14; ret
0x00023379 : pop rbp; mov rax, r12; pop r12; ret
0x00024923 : movzx ecx, [rsi]; sub eax, ecx; ret
0x00045464 : add rbx, rax; mov rdi, rbx; call rbp
0x0005a755 : add [rbx - 0x116343], al; call [rax]
0x00059cab : mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00044f60 : mov rax, -0x28; add rax, fs:[0]; ret
0x0008a936 : mov rsi, r12; mov edi, ebp; call rax
0x0002b5b2 : add r11d, r14d; movq [rdi], mm1; ret
0x0000e899 : sub eax, ecx; lea eax, [r8 - 1]; ret
0x00038f7c : add [rbx - 0x76bef019], al; ret 0xb8
0x0008f669 : mov edx, [rsp]; mov edi, 1; call rax
0x0004b7f4 : mov edx, [rax*8 + 0x4a7bc0]; jmp rdx
0x0004b92c : mov edx, [rax*8 + 0x4a79c0]; jmp rdx
0x0004ba4f : mov rdx, [rax*8 + 0x4a78c0]; jmp rdx
0x0000a101 : mov rdx, r14; mov rdi, rbx; call rax
0x00045465 : add ebx, eax; mov rdi, rbx; call rbp
0x0000006c : add [rax], al; pop rbx; pop rbp; ret
0x0002b5c0 : movzx edx, [rsi]; mov [rdi], dl; ret
0x0004749c : mov rdx, [rax*8 + 0x4a7dc0]; jmp rdx
0x00045794 : mov edi, ebp; mov rdx, r12; call rbp
0x00045793 : mov rdi, r13; mov rdx, r12; call rbp
0x000711c0 : adc [r11 + 0x5d], r11b; pop r12; ret
0x0002b4d2 : add r14d, r11d; movq [rdi], mm1; ret
0x00067f38 : mov fs:[rax], edx; xor eax, eax; ret
0x0004b842 : mov edx, [rax*8 + 0x4a7ac0]; jmp rdx
0x00090020 : mov rsi, r14; mov rdi, rbx; call r15
0x0003611d : xor esi, esi; mov rdi, rbp; call rbx
0x00036167 : xor esi, esi; mov rdi, r13; call rbx
0x0002ede9 : mov [rdx + 2], al; mov rax, rdi; ret
0x00007095 : mov esi, esi; mov rdi, r12; call r13
0x000264e2 : movaps xmm[rdi - 0x10], xmm5; jmp r9
0x00034af5 : dec [rdi]; xor [rbx + rax*2], 0; ret
0x00070111 : mov rdi, rbp; mov [rax], 0; call r12
0x00036142 : xor esi, esi; mov rdi, r12; call rbx
0x00032e18 : push [rbp + 0x1a]; xor eax, eax; ret
0x0003be77 : push rax; mov [rdx + 0x54], eax; ret
0x0005aeac : mov edx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0005bb6c : mov edx, [rax*8 + 0x4a88c0]; jmp rdx
0x00059cac : mov edx, [rax*8 + 0x4a87c0]; jmp rdx
0x000454a3 : mov rsi, rbx; mov rdi, r14; call rbp
0x00035384 : xor esi, esi; mov rdi, rbx; call rbp
0x00059ece : adc al, [rbx - 0x110f43]; call [rax]
0x000361ab : xor esi, esi; mov rdi, r15; call rbx
0x00060bf4 : mov edi, ebp; xor r8d, r8d; call r12
0x00007094 : mov rsi, r14; mov rdi, r12; call r13
0x0002ee07 : mov [rdx + 4], al; mov rax, rdi; ret
0x0007ea8d : pop rdi; pop rax; and al, 0; jmp rax
0x0000b331 : sub rdx, rsi; mov rdi, rbx; call rax
0x0007e8cf : add [r15 + 0x6c4640], r15b; call rax
0x00074730 : mov rax, fs:[0]; add rax, -0x10; ret
0x0005bace : mov edx, [rax*8 + 0x4a8ac0]; jmp rdx
0x0004b60c : mov rdx, [rax*8 + 0x4a7cc0]; jmp rdx
0x000481fb : mov edx, [rax*8 + 0x4a77c0]; jmp rdx
0x000459d6 : mov rsi, r14; mov rdi, rbx; call rbp
0x0004b92b : mov rdx, [rax*8 + 0x4a79c0]; jmp rdx
0x0002ee18 : mov [rdx + 4], ax; mov rax, rdi; ret
0x00090021 : mov esi, esi; mov rdi, rbx; call r15
0x00009bc7 : add [rsi - 1], bh; call [rax + 0x18]
0x0005fd8d : add [rax], al; mov rdi, rbx; call r8
0x0005bb6b : mov rdx, [rax*8 + 0x4a88c0]; jmp rdx
0x0000a102 : mov edx, esi; mov rdi, rbx; call rax
0x0004b841 : mov rdx, [rax*8 + 0x4a7ac0]; jmp rdx
0x00039d82 : add eax, 2; mov [rsp], eax; call rbx
0x0004b85c : inc [rbx - 0x7bf0fe40]; pop rdi; ret
0x000454a4 : mov esi, ebx; mov rdi, r14; call rbp
0x00060bf3 : mov rdi, r13; xor r8d, r8d; call r12
0x0003618b : xor esi, esi; mov rdi, r14; call rbx
0x0007e8a1 : add [rsi + 0x6c], 0; add rsp, 8; ret
0x000454be : mov rsi, r15; mov rdi, rbx; call rbp
0x000459d7 : mov esi, esi; mov rdi, rbx; call rbp
0x00070238 : add al, 0; add [rax + 0x63], cl; ret
0x00070112 : mov edi, ebp; mov [rax], 0; call r12
0x0002b542 : add r14b, r11b; movq [rdi], mm1; ret
0x00044f40 : mov rax, -0x18; add rax, fs:[0]; ret
0x0004e4ed : inc [rax - 0x12743]; jmp [rdi + 0xf]
0x0008f668 : mov rdx, [r12]; mov edi, 1; call rax
0x0004ba50 : mov edx, [rax*8 + 0x4a78c0]; jmp rdx
0x00004c5b : push rbx; add [rax - 0x7d], ecx; ret
0x000481fa : mov rdx, [rax*8 + 0x4a77c0]; jmp rdx
0x0000b332 : sub edx, esi; mov rdi, rbx; call rax
0x0005bacd : mov rdx, [rax*8 + 0x4a8ac0]; jmp rdx
0x0007258b : add [rax + rax], cl; add bl, dh; ret
0x0002b550 : movzx edx, [rsi]; mov [rdi], dx; ret
0x000454bf : mov esi, edi; mov rdi, rbx; call rbp
0x00069b4d : add al, 0; add [rax - 0x7d], cl; ret
0x00059f69 : add [rbx - 0x110f43], al; call [rax]
0x0005bf74 : mov rdx, [rax*8 + 0x4a86c0]; jmp rdx
0x0004749d : mov edx, [rax*8 + 0x4a7dc0]; jmp rdx
0x000013b1 : adc [rbx + 0x410c247c], cl; call rbp
0x0005bb29 : mov rdx, [rax*8 + 0x4a89c0]; jmp rdx
0x0005bb2a : mov edx, [rax*8 + 0x4a89c0]; jmp rdx
0x0005aeab : mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0006432d : mov esi, esi; mov rdi, r12; call rbp
0x00024910 : xchg eax, ebx; add rcx, r11; jmp rcx
0x0004b60d : mov edx, [rax*8 + 0x4a7cc0]; jmp rdx
0x0005bf75 : mov edx, [rax*8 + 0x4a86c0]; jmp rdx
0x0002ede7 : add cl, [r8 - 0x76b7fdbe]; clc ; ret
0x0006432c : mov rsi, r14; mov rdi, r12; call rbp
0x00044f80 : mov rax, -0x20; add rax, fs:[0]; ret
0x0000e846 : add [rsi - 1], bh; call [rax + 0x30]
0x0004b7f3 : mov rdx, [rax*8 + 0x4a7bc0]; jmp rdx
0x0008a937 : mov esi, esp; mov edi, ebp; call rax
0x0002b4e7 : mov [rdi + 1], dx; mov [rdi], cx; ret
0x000031d0 : add cl, ch; idiv bh; jmp [rsi + 0x2e]
0x0002ee49 : mov [rdx + 6], eax; mov rax, rdi; ret
0x00092106 : add [rax], al; mov rdi, rsp; call r12
0x0005f582 : add [rax], al; mov rdi, rbx; call rax
0x0002edab : mov [rdx + 8], eax; mov rax, rdi; ret
0x0002ee59 : mov [rdx + 7], eax; mov rax, rdi; ret
0x0002edaa : mov [rdx + 8], rax; mov rax, rdi; ret
0x00022b89 : mov [rdi], rax; pop rbx; pop rbp; ret
0x0005f217 : int3 ; int3 ; int3 ; or al, 0x7e; ret
0x0002ede8 : add cl, [rax - 0x76b7fdbe]; clc ; ret
0x0000326d : xor [rax + rax + 0x41], ebp; call rbp
0x0002ee9a : mov [rdx + 6], rax; mov rax, rdi; ret
0x00039697 : mov esi, [rdx + rbx + 0x20]; call rax
0x00039b77 : sbb [rax - 0x77], cl; cwde ; call rcx
0x000615cf : add rsp, 8; pop rbx; pop rbp; jmp rax
0x000363c0 : add [rax], al; mov rdi, r12; call rbx
0x0003664a : add [rax], al; mov rdi, rbp; call rbx
0x0002eeba : mov [rdx + 7], rax; mov rax, rdi; ret
0x000028f9 : call rbx; mov edi, 0x6c30c0; call rbx
0x0000df15 : lea r13, [rbp + 1]; call [rax + 0x18]
0x000694aa : add bl, ch; mov cs, [rax - 0x7d]; ret
0x0002ee19 : mov [rdx + 4], eax; mov rax, rdi; ret
0x0000df16 : lea ebp, [rbp + 1]; call [rax + 0x18]
0x0007608a : xchg eax, edx; idiv edi; dec ecx; ret
0x00039696 : mov rsi, [rdx + rbx + 0x20]; call rax
0x000036e7 : add [rax], al; xor esi, esi; call rax
0x00022b8a : mov [rdi], eax; pop rbx; pop rbp; ret
0x00044ff0 : add [rax], al; mov fs:[rax], rdx; ret
0x000361f5 : add [rax], al; mov rdi, r15; call rbx
0x00038931 : xchg eax, ecx; cld ; jmp [rsi + 0x2e]
0x0003316d : add [rax], al; add [rcx + 1], cl; ret
0x00010d86 : add [rax], al; mov eax, 0x6c1860; ret
0x000423fd : add [rax], al; add [rax + 1], bh; ret
0x0000f0cd : add [rax], al; add [rax - 1], bh; ret
0x00044910 : pushfq ; sar ebx, 1; jmp [rsi + 0x66]
0x00030a63 : mov [rdi], cx; mov [rdi + 2], dh; ret
0x0002ee7a : mov [rdx + 5], rax; mov rax, rdi; ret
0x00036204 : add [rax], al; mov rdi, r14; call rbx
0x00059c63 : adc [rax], al; add [rax], al; jmp rdx
0x00038c53 : sub [rbx - 0x26], dh; mov eax, 1; ret
0x0002ee27 : mov [rdx + 3], eax; mov rax, rdi; ret
0x0002ad4f : add [rbx + 0x5789fc56], cl; cld ; ret
0x0003a34e : add [rbp + 0x31], al; jmp [rsi + 0xf]
0x0002ee39 : mov [rdx + 5], eax; mov rax, rdi; ret
0x000766cc : add [rax], al; add [rax + 1], cl; ret
0x0003628c : add [rax], al; mov rdi, r13; call rbx
0x000615d0 : add esp, 8; pop rbx; pop rbp; jmp rax
0x0002ee25 : add ecx, [r9 - 0x76b7fcbe]; clc ; ret
0x000744e1 : add rax, [rdx + 8]; add rsp, 0x58; ret
0x00030a82 : mov [rdi + 4], dh; mov [rdi], ecx; ret
0x00014e1e : sbb [rdx + 0x5b], bl; pop rbp; jmp rax
0x0003167e : add [rax], al; lea rax, [rdi + 9]; ret
0x00063f66 : xor [rcx + rcx*4 - 0x19], cl; call rbx
0x00039f63 : add eax, [rax]; mov rdi, rbx; call rbp
0x00090fa8 : mov rdx, [r15]; mov rdi, rbx; call rbp
0x0007362f : mov ebx, [rsp]; add rsp, 0x30; jmp r11
0x00044f06 : mov rax, -0x20; mov fs:[rax], rdx; ret
0x000159f2 : sub [rcx + rcx*4 - 0x19], cl; call rax
0x00060912 : adc [rcx + rcx*4 - 0x19], cl; call rbp
0x00030ac3 : mov [rdi + 8], dh; mov [rdi], rcx; ret
0x00070117 : add [rax], al; add [rax], al; call r12
0x0003166e : add [rax], al; lea rax, [rdi + 8]; ret
0x0003db72 : push rax; mov [rsp + 8], eax; call rbp
0x0003de47 : push rax; mov [rsp + 8], eax; call rbx
0x0008a973 : mov rsi, r12; mov edi, ebp; call [rbx]
0x00027f5a : push rdi; std ; mov [rdi - 2], cx; ret
0x0008e164 : add [rcx - 0x80], al; call [rax + 0xf]
0x00067fb6 : mov eax, [rsp + 8]; add rsp, 0x28; ret
0x0006e100 : add [rax + rcx*2], al; add esp, 8; ret
0x0004041d : push rax; mov [rsp + 8], eax; call r14
0x00001220 : add [r8], eax; mov eax, 0; leave ; ret
0x0001750f : add cl, ch; idiv rdi; jmp [rsi + 0x2e]
0x00088dd2 : mov fs:[0x2d0], esi; mov eax, esi; ret
0x0006382a : add al, bl; nop [rax]; add rax, 1; ret
0x00035c18 : mov rsi, [rbx]; mov rdi, r12; call rbp
0x00076baa : mov [rbp - 0x7c], es; jmp [rsi - 0x70]
0x00030a96 : mov [rdi], ecx; mov [rdi + 4], dx; ret
0x0007362e : mov rbx, [rsp]; add rsp, 0x30; jmp r11
0x000744e2 : add eax, [rdx + 8]; add rsp, 0x58; ret
0x00090fa9 : mov edx, [rdi]; mov rdi, rbx; call rbp
0x000424c4 : add eax, [rax]; mov rdi, rbx; call r12
0x0003a9b1 : add eax, [rax]; mov rdi, rbx; call r13
0x0003ae19 : add eax, [rax]; mov rdi, rbx; call r14
0x0003a087 : add eax, [rax]; mov rdi, rbx; call r15
0x0008ffcd : add [rax], eax; add [rax], al; jmp rax
0x00015aa1 : lea eax, [rdx - 0x10]; add rsp, 8; ret
0x0006d50a : add [rbp - 0x7b], cl; jmp [rsi - 0x70]
0x0002b4e8 : mov [rdi + 1], edx; mov [rdi], cx; ret
0x0003160e : add [rax], al; lea rax, [rdi + 1]; ret
0x0003163e : add [rax], al; lea rax, [rdi + 4]; ret
0x00010d2f : add [rax - 0x7f], cl; jmp [rax + 0x18]
0x00035c19 : mov esi, [rbx]; mov rdi, r12; call rbp
0x00030a64 : mov [rdi], ecx; mov [rdi + 2], dh; ret
0x00067fb5 : mov rax, [rsp + 8]; add rsp, 0x28; ret
0x000363c1 : add [rcx + rcx*4 - 0x19], cl; call rbx
0x0003164e : add [rax], al; lea rax, [rdi + 5]; ret
0x00030ad7 : mov [rdi], rcx; mov [rdi + 8], dx; ret
0x0003162e : add [rax], al; lea rax, [rdi + 3]; ret
0x00031073 : mov [rdi], dx; lea rax, [rdi + 1]; ret
0x00030583 : mov [rdx], ax; lea rax, [rdx + 1]; ret
0x00030ad8 : mov [rdi], ecx; mov [rdi + 8], dx; ret
0x0007492e : add [rax], al; mov rax, [rax + 8]; ret
0x0004ec8e : int1 ; add r8d, eax; mov eax, r8d; ret
0x00007693 : xor [rax], al; add [rax], al; call rax
0x00038c52 : sub [rbx - 0x26], sil; mov eax, 1; ret
0x00015aa0 : lea rax, [rdx - 0x10]; add rsp, 8; ret
0x000732b7 : mov eax, [rsp]; add rsp, 0x48; jmp r11
0x0003165e : add [rax], al; lea rax, [rdi + 6]; ret
0x0008a974 : mov esi, esp; mov edi, ebp; call [rbx]
0x0002ee26 : add ecx, [rcx - 0x76b7fcbe]; clc ; ret
0x000732b6 : mov rax, [rsp]; add rsp, 0x48; jmp r11
0x0003159a : add [rax], al; lea rax, [rdi + 7]; ret
0x0003161e : add [rax], al; lea rax, [rdi + 2]; ret
0x0003628d : add [rcx + rcx*4 - 0x11], cl; call rbx
0x0002b1d8 : mov [rdi + 2], edx; mov [rdi], rcx; ret
0x00038c96 : mov [rip + 0x287f9c], edx; pop rbx; ret
0x0007693a : pop r14; mulss xmm0, xmm0; pop r15; ret
0x00045014 : mov [rsp - 2], di; fldcw [rsp - 2]; ret
0x0001ca26 : movdqu xmm[rdi + rdx - 0x20], xmm8; ret
0x00001221 : add [rax], eax; mov eax, 0; leave ; ret
0x00035c1a : xor ecx, [rcx + rcx*4 - 0x19]; call rbp
0x000392fb : mov [rip + 0x28b99f], edi; pop rbx; ret
0x0002b0f7 : mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x00030b17 : mov [rdi], rcx; mov [rdi + 6], rdx; ret
0x00031074 : mov [rdi], edx; lea rax, [rdi + 1]; ret
0x0007e85e : pop rbx; div rbp; pop rbp; pop r12; ret
0x000310f6 : mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x00008453 : pop rbx; pop r12; pop r13; pop rbp; ret
0x00063969 : movzx esi, bl; mov rdi, [r12]; call rbp
0x0008f746 : add [rax], eax; add [rax], al; call r14
0x00007fb3 : adc [rdx + rdx*8 + 0x394ce875], al; ret
0x000279c2 : push rsi; clc ; mov [rdi - 8], rdx; ret
0x000257c4 : movzx ecx, [rsi - 1]; sub eax, ecx; ret
0x00030af6 : mov [rdi], rcx; mov [rdi + 8], edx; ret
0x00038f21 : mov [rip + 0x28bd78], r8d; pop rbx; ret
0x0002b0f8 : mov [rdi + 4], edx; mov [rdi], rcx; ret
0x0002b1d7 : mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x0000a548 : add [rbx + 0x275fff8], al; pop rbx; ret
0x0001cb58 : adc [rbp - 0x1b], dh; mov rax, rdi; ret
0x000911aa : mov rsi, [r15 + r14*8 + 0x10]; call rbp
0x00030aa5 : mov [rdi], ecx; mov [rdi + 3], edx; ret
0x0002b018 : mov [rdi + 6], edx; mov [rdi], rcx; ret
0x00060134 : div rbp; pop rbp; pop r12; pop r13; ret
0x00030b07 : mov [rdi], rcx; mov [rdi + 5], rdx; ret
0x000002f8 : pop r13; pop r14; pop r15; pop rbp; ret
0x000328eb : movzx edx, [rsi - 9]; sub eax, edx; ret
0x00030584 : mov [rdx], eax; lea rax, [rdx + 1]; ret
0x00025577 : movzx edx, [rsi - 1]; sub eax, edx; ret
0x000310f7 : mov [rdi], ecx; lea rax, [rdi + 8]; ret
0x0002b168 : mov [rdi + 3], edx; mov [rdi], rcx; ret
0x0008cb26 : add rsp, 8; movzx eax, al; neg eax; ret
0x00030503 : mov [rdx], rax; lea rax, [rdx + 7]; ret
0x0000cfc9 : pop rsi; and al, [rax]; add bl, dh; ret
0x0000dbd6 : pop rbx; mov rax, [rax + 0x28]; jmp rax
0x0009055f : add [rax - 0x80], al; call [rax + 0x75]
0x00001921 : pop rbp; pop r12; pop r13; pop r14; ret
0x0007972a : pop r14; mulsd xmm0, xmm0; pop r15; ret
0x00030ae7 : mov [rdi], ecx; mov [rdi + 7], edx; ret
0x0002afa8 : mov [rdi + 7], edx; mov [rdi], rcx; ret
0x00030b28 : mov [rdi], ecx; mov [rdi + 7], rdx; ret
0x000911ab : mov esi, [rdi + rsi*8 + 0x10]; call rbp
0x000361d1 : add [rax], eax; add [rax], al; call rbx
0x000353a8 : add [rax], eax; add [rax], al; call rbp
0x0002539a : adc [rsi + 0xf], ah; cmp [rdi], dl; ret
0x0007693b : pop rsi; mulss xmm0, xmm0; pop r15; ret
0x000310e4 : mov [rdi], edx; lea rax, [rdi + 7]; ret
0x00091e3c : add eax, 8; mov [rbx], r8; pop rbx; ret
0x00030b08 : mov [rdi], ecx; mov [rdi + 5], rdx; ret
0x0002afa7 : mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x0002b087 : mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0000da56 : pop rbx; mov rax, [rax + 0x20]; jmp rax
0x00028131 : push rsi; cld ; mov [rdi - 4], edx; ret
0x0007972b : pop rsi; mulsd xmm0, xmm0; pop r15; ret
0x0006ffdb : mov edi, esp; pop r12; pop r13; jmp rax
0x00030af7 : mov [rdi], ecx; mov [rdi + 8], edx; ret
0x0002b167 : mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x00074452 : add [rbp + 0xb], dh; add rsp, 0x48; ret
0x00091d5a : add [rcx + rcx*4 + 3], cl; pop rbx; ret
0x000305b2 : mov [rdx], eax; lea rax, [rdx + 3]; ret
0x000310a5 : mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x0000180d : pop rsp; pop r13; pop r14; pop r15; ret
0x00038f22 : mov [rip + 0x28bd78], eax; pop rbx; ret
0x00059c5e : mov ecx, [rdx]; mov r14d, 0x10; jmp rdx
0x0002b017 : mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x00000aab : mov [rip + 0x2c131f], eax; pop r12; ret
0x0008f9ea : mov [rdi + rsi*8], rdx; add rsp, 8; ret
0x00030b27 : mov [rdi], rcx; mov [rdi + 7], rdx; ret
0x00030ae6 : mov [rdi], rcx; mov [rdi + 7], edx; ret
0x00070744 : add al, ch; adc di, cx; jmp [rsi + 0xf]
0x000310e3 : mov [rdi], rdx; lea rax, [rdi + 7]; ret
0x00030504 : mov [rdx], eax; lea rax, [rdx + 7]; ret
0x0001c416 : add [rax], al; add [rcx - 9], cl; ret 2
0x0001c3f0 : add [rax], al; add [rcx - 9], cl; ret 1
0x000002f9 : pop rbp; pop r14; pop r15; pop rbp; ret
0x0000180c : pop r12; pop r13; pop r14; pop r15; ret
0x0002b405 : mov [rdi + 1], edx; mov [rdi], ecx; ret
0x00075711 : add rdx, r8; mov rax, rdx; pop rbx; ret
0x00000aaa : mov [rip + 0x2c131f], rax; pop r12; ret
0x00091e3b : add rax, 8; mov [rbx], r8; pop rbx; ret
0x00028737 : push rdi; stc ; mov [rdi - 4], ecx; ret
0x0008f9eb : mov [rdi + rsi*8], edx; add rsp, 8; ret
0x0002b248 : mov [rdi + 1], edx; mov [rdi], rcx; ret
0x00060135 : div ebp; pop rbp; pop r12; pop r13; ret
0x00001b6b : pop rbx; pop rbp; pop r12; pop r13; ret
0x0008cb27 : add esp, 8; movzx eax, al; neg eax; ret
0x00030b18 : mov [rdi], ecx; mov [rdi + 6], rdx; ret
0x0003ee51 : pop rbx; sub al, 0xfc; jmp [rsi + 0x66]
0x0002b088 : mov [rdi + 5], edx; mov [rdi], rcx; ret
0x0002b247 : mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x00031092 : mov [rdi], edx; lea rax, [rdi + 3]; ret
0x0002b395 : mov [rdi + 2], edx; mov [rdi], ecx; ret
0x0008fc36 : add [rsi + 1], bh; mov edi, 1; call rax
0x0002a9d9 : push rdi; cmc ; mov [rdi - 4], ecx; ret
0x0000c4c7 : pop rbp; pop r12; neg eax; pop r13; ret
0x00001998 : add [rax], eax; add [rax], al; call rax
0x00091cff : add [rax - 0x80], al; call [rax + 0x53]
0x0002b325 : mov [rdi + 3], edx; mov [rdi], ecx; ret
0x0003c84a : add [rcx], dh; ror [rax + 0x39], cl; ret
0x00005805 : add r8b, [r8]; add [rax - 0x7d], cl; ret
0x0000fbba : add [rbx + 0x5d5b080b], al; pop r12; ret
0x0006d326 : add [rax - 0x75], cl; mov r9b, r13b; ret
0x0007e74f : mov [rax], 5; mov rax, rdx; pop rbx; ret
0x0000ee48 : mov eax, [rdi + 0x10]; sub eax, edx; ret
0x00038c5a : add bl, al; nop [rax]; xor eax, eax; ret
0x00043714 : xor [rax - 0x7f], cl; call [rcx + rbx*4]
0x000315ed : add [rax], al; lea rax, [rdi + 0xf]; ret
0x0007db5f : add [rax], al; add [rcx - 0x7d], al; ret
0x00000c80 : mov esi, eax; mov edi, 0x6c2c30; jmp rdx
0x00070743 : add al, bpl; adc di, cx; jmp [rsi + 0xf]
0x0003169e : add [rax], al; lea rax, [rdi + 0xb]; ret
0x000316ce : add [rax], al; lea rax, [rdi + 0xe]; ret
0x000316ae : add [rax], al; lea rax, [rdi + 0xc]; ret
0x0008b1dd : add [rax], al; add [rcx - 0x77], al; ret
0x0000e84e : xor [rbx - 0x198a0008], al; pop rbx; ret
0x00074941 : mov eax, [rax + 8]; sub rax, fs:[0]; ret
0x00052282 : xor al, [rax]; add [rax - 0x7d], cl; ret
0x0003f3c4 : add al, [rax]; add [rax + 0x29], cl; ret
0x00000c7f : mov rsi, rax; mov edi, 0x6c2c30; jmp rdx
0x0007118d : add [rax], al; add [rax + 0x29], cl; ret
0x0000ae9a : mov [rbx + 0x20], esi; call [rax + 0x70]
0x0004d156 : add [rax - 0x12743], al; jmp [rsi + 0xf]
0x00075712 : add edx, eax; mov rax, rdx; pop rbx; ret
0x0000a2a5 : lea esi, [rax + 0x58]; call [r15 + 0x30]
0x000030be : sub [rbx], al; add [rax - 0x77], cl; ret
0x0000a2a4 : lea rsi, [rax + 0x58]; call [r15 + 0x30]
0x0004ec8d : div ecx; add r8d, eax; mov eax, r8d; ret
0x00066d87 : add al, [rax]; add [rax - 0x77], cl; ret
0x00005806 : add al, [rax]; add [rax - 0x7d], cl; ret
0x00008901 : add [rax], al; add [rax - 0x77], cl; ret
0x00074940 : mov rax, [rax + 8]; sub rax, fs:[0]; ret
0x00074aed : sub edx, ecx; not eax; and eax, edx; ret
0x0000ae99 : mov [rbx + 0x20], rsi; call [rax + 0x70]
0x00045321 : mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x00033dfa : sub [rax + 1], bh; pop rbx; pop rbp; ret
0x00033509 : pop rbx; lea rax, [r9 + 1]; pop rbp; ret
0x000742a9 : mov [rip + 0x25000d], 0; add rsp, 8; ret
0x0006b1bc : add [rax], al; add [rcx + 0x5f], al; ret
0x00015d7f : add [rax], al; add [rax - 0x7d], cl; ret
0x00036e7e : xchg eax, esi; idiv edi; jmp [rsi + 0xf]
0x0003daa1 : add [rax], al; add [rax + 0x39], cl; ret
0x0000cac4 : adc [rax], al; add [rax - 0x77], cl; ret
0x0007447d : mov eax, [rsp + 0xc]; add rsp, 0x48; ret
0x0002a7aa : push rdi; int1 ; mov [rdi - 8], rcx; ret
0x000358ce : dec [rcx - 0x75]; cmp al, 0x24; call rbx
0x0007af4d : add al, [rax]; add [rax - 0x39], cl; ret
0x0001642d : add [rax], al; add [rbp - 0x77], cl; ret
0x00045015 : mov [rsp - 2], edi; fldcw [rsp - 2]; ret
0x000337de : add ah, bh; add eax, [rax]; pop rbx; ret
0x00006f7a : mov esi, [rsi]; mov rdi, [r12]; call r13
0x000434de : add [rax - 0x7f], cl; call [rcx + rbx*4]
0x000316be : add [rax], al; lea rax, [rdi + 0xd]; ret
0x00050c2f : add [rax], al; add [rcx + 0x5d], al; ret
0x0000c3bd : mov rax, [rdi + 0xd8]; call [rax + 0x48]
0x0000c3be : mov eax, [rdi + 0xd8]; call [rax + 0x48]
0x0008bd03 : mov fs, [rbx]; add [rax - 0x77], cl; ret
0x00006f79 : mov rsi, [r14]; mov rdi, [r12]; call r13
0x0003168e : add [rax], al; lea rax, [rdi + 0xa]; ret
0x0008a779 : push rax; or [rbp + 0x440f4cd2], al; ret
0x0006ffda : mov edi, r12d; pop r12; pop r13; jmp rax
0x0000006b : add [rax], al; add [rbx + 0x5d], bl; ret
0x0007b5a5 : add [rax], al; add [rcx + 0x29], cl; ret
0x00050b61 : add [rax], al; add [rcx + 0x5e], al; ret
0x000651ac : add cl, ch; sar esi, -1; jmp [rsi + 0xf]
0x00061f03 : dec [rcx + rcx*4 - 1]; call [rax + 0x18]
0x0004a638 : add [rax - 0x4f743], al; call [rbx + 0xf]
0x0008fa2e : add [rax], al; mov [rdi + 0x98], rsi; ret
0x00032944 : movzx edx, [rsi - 0xc]; sub eax, edx; ret
0x0008f767 : add [rsi + 0xa], bh; mov edi, 1; call rax
0x0008fa8e : add [rax], al; mov rax, [rdi + 0xb0]; ret
0x0003dc59 : add [rax], al; mov [rsp], rax; call [rbx]
0x0000f13e : add [rax], al; mov rax, [rdi + 0x68]; ret
0x0007460b : mov eax, [rsp + 0x48]; add rsp, 0x78; ret
0x0007e196 : add [rax], eax; add [rax + 0x39], cl; ret
0x00027f58 : mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x000363bc : add [rsi + 1], bh; mov rdi, r12; call rbx
0x0008f73f : add [rsi + 0xa], bh; mov edi, 1; call r14
0x0008fa4e : add [rax], al; mov rax, [rdi + 0xb8]; ret
0x00025fc5 : mov ecx, [rdi - 0x73]; or al, 0xb; jmp r9
0x000082a9 : add [rax], al; mov eax, edx; pop rbx; ret
0x0007460a : mov rax, [rsp + 0x48]; add rsp, 0x78; ret
0x0007390d : dec [rcx - 0x3dd63c30]; mov eax, edx; ret
0x00001224 : add [rax], al; add [rax], al; leave ; ret
0x0000ee46 : push rax; sbb [rbx - 0x2fd6efb9], cl; ret
0x0001643e : add [rax], eax; add [rcx - 0x7d], cl; ret
0x0006c976 : add [rax], eax; add [rax - 0x77], cl; ret
0x00070399 : add [rax], r8d; add [rax + 0x63], cl; ret
0x0008fa76 : mov eax, [rsp + 0x10]; add rsp, 0x28; ret
0x00036279 : add [rsi + 2], bh; mov rdi, r14; call rbx
0x00037755 : add eax, [rax]; add [rcx - 0x77], al; ret
0x000247f1 : movzx edx, [rdx + rcx]; sub eax, edx; ret
0x00004c3d : add [rax], eax; add [rax - 0x7d], cl; ret
0x000022a7 : dec [rax - 0x73]; mov ebx, 0x80; call rax
0x000902b1 : add al, 0; add [rax], al; add rsp, 8; ret
0x0008fa75 : mov rax, [rsp + 0x10]; add rsp, 0x28; ret
0x00036200 : add [rsi + 1], bh; mov rdi, r14; call rbx
0x00032914 : movzx edx, [rsi - 0xf]; sub eax, edx; ret
0x0007044c : add cl, ch; cmp dh, 0xff; jmp [rsi + 0xf]
0x0001f326 : mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000620ba : push rax; sbb [rcx + 0x5bc0310b], cl; ret
0x0006dbb8 : sub rax, rdx; mov [rdi + 0x308], rax; ret
0x0004facf : add [rip - 0xa8d17], ch; jmp [rsi + 0x2e]
0x0006621b : xchg [rcx], al; add [rax + 0x39], cl; ret
0x00047b8f : mov [rbp - 0x4f8], ecx; call [rax + 0x38]
0x000651ab : add cl, bpl; sar esi, -1; jmp [rsi + 0xf]
0x000363ad : add [rsi + 2], bh; mov rdi, r13; call rbx
0x00020ea2 : mov eax, [rcx + rax*4]; sub eax, edx; ret
0x00032964 : movzx edx, [rsi - 0xa]; sub eax, edx; ret
0x00027d70 : mov dx, [rsi - 2]; mov [rdi - 2], dx; ret
0x00038d43 : add [rax], eax; add [rbx + 0x5d], bl; ret
0x00030aa3 : push rsi; add ecx, [rcx + 0x357890f]; ret
0x00024683 : movzx edx, [rsi + rdx]; sub eax, edx; ret
0x00032954 : movzx edx, [rsi - 0xb]; sub eax, edx; ret
0x00061f91 : mov eax, [rax + 0x140]; call [rax + 0x68]
0x000361f1 : add [rsi + 2], bh; mov rdi, r15; call rbx
0x00074bba : sbb eax, eax; and eax, 2; sub eax, 1; ret
0x000376f7 : xor eax, eax; cmp rdx, rdi; setae al; ret
0x00036288 : add [rsi + 1], bh; mov rdi, r13; call rbx
0x00018be8 : movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x00032924 : movzx edx, [rsi - 0xe]; sub eax, edx; ret
0x00061f90 : mov rax, [rax + 0x140]; call [rax + 0x68]
0x000140d4 : add [rax], al; xor eax, eax; pop rbx; ret
0x0004fe67 : add [rip - 0x71817], ch; jmp [rsi - 0x70]
0x0001f5cd : mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0007039a : add [rax], eax; add [rax + 0x63], cl; ret
0x0008fa9e : add [rax], al; mov rax, [rdi + 0xa8]; ret
0x0004f2c9 : add [rax], eax; add [rcx - 0x77], cl; ret
0x00047b8e : mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x0004cd17 : add [rip - 0x1ae17], ch; jmp [rsi - 0x70]
0x00073901 : movsx edx, al; neg edx; mov eax, edx; ret
0x0008f99e : add [rax], al; mov rax, [rdi + 0x90]; ret
0x00045322 : mov [rax + 0x90], edx; add rsp, 0xd0; ret
0x0005693f : add eax, [rax]; add [rax - 0x7d], cl; ret
0x00015140 : add [rax], al; mov rax, rbx; pop rbx; ret
0x00091d58 : mov r8, [r8]; mov [rbx], r8; pop rbx; ret
0x00027b90 : mov dl, [rsi - 1]; mov [rdi - 1], dl; ret
0x0004918c : add [rax - 0x4de43], al; call [rbx + 0xf]
0x0007e753 : add [rax], al; mov rax, rdx; pop rbx; ret
0x00018d2f : movzx edx, [rsi + rcx]; sub eax, edx; ret
0x0008ddf2 : sub [rdi + 0x23], esp; add [rax], cl; ret
0x0006dbb9 : sub eax, edx; mov [rdi + 0x308], rax; ret
0x0000de37 : push rbx; mov rbx, rdi; call [rax + 0x20]
0x0001c3c4 : add bl, al; lea rax, [rip + 0x15313]; ret
0x0005a08c : mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x0003663a : add [rsi + 2], bh; mov rdi, r12; call rbx
0x00032934 : movzx edx, [rsi - 0xd]; sub eax, edx; ret
0x0000ee51 : push rax; adc [rbx - 0x2fd6efb9], cl; ret
0x000700c6 : add [rax], al; mov eax, ebx; pop rbx; ret
0x0008fa3e : add [rax], al; mov rax, [rdi + 0xa0]; ret
0x0008fa1b : mov [rsi], eax; mov rax, [rdi + 0x98]; ret
0x00002e7d : add [rax], al; mov edi, 0x6c42a0; call rax
0x00030bd9 : movq [rdi], mm0; mov [rdi + 0xf], rcx; ret
0x0006523e : mov rax, [rip + 0x25fb53]; add rsp, 8; ret
0x0007447c : dec [rbx + 0x480c2444]; add esp, 0x48; ret
0x00059d50 : mov edi, edi; sar rdx, 2; call [r9 + 0x38]
0x000311c5 : movq [rdi], mm0; lea rax, [rdi + 0xf]; ret
0x00032904 : movzx edx, [rsi - 0x10]; sub eax, edx; ret
0x00030b59 : movq [rdi], mm0; mov [rdi + 0x10], cx; ret
0x000902be : add [rax], al; mov eax, 2; add rsp, 8; ret
0x00070ad9 : mov [rip + 0x253c91], eax; add rsp, 8; ret
0x000892bf : pop r13; pop r14; sar rax, 3; pop r15; ret
0x00027d71 : mov edx, [rsi - 2]; mov [rdi - 2], dx; ret
0x00030b78 : movq [rdi], mm0; mov [rdi + 0xf], ecx; ret
0x0001c0d5 : add [rax + 1], cl; clc ; add rax, rcx; ret
0x00088268 : sbb al, 2; mov [rsp + 0x90], rbx; call r12
0x000902ae : add [rax], al; mov eax, 4; add rsp, 8; ret
0x0002d933 : adc [rax - 0x7b], cl; ror [rdi], 0x85; ret
0x000892c0 : pop rbp; pop r14; sar rax, 3; pop r15; ret
0x0006dbe5 : add [rax], al; mov [rdi + 0x300], rax; ret
0x00067400 : mov [rax], edx; xor eax, eax; pop rbx; ret
0x000177c1 : add [rbp + 7], dh; lea rax, [rip + 5]; ret
0x000017cf : add [rax + 0xf], cl; scasd eax, [rdi]; ret
0x0005c9dc : mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x00059d4f : mov rdi, r15; sar rdx, 2; call [r9 + 0x38]
0x00061598 : mov edx, [rax]; mov eax, edx; pop rbx; ret
0x0003110a : mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x0000d936 : mov [rbx], edx; xor eax, eax; pop rbx; ret
0x0000e7cb : xchg eax, esi; nop [rax]; mov rax, -1; ret
0x0005a08d : mov [rbp - 0x10e0], ecx; call [rax + 0x38]
0x000305d8 : mov [rdx + 4], ax; lea rax, [rdx + 5]; ret
0x000361cd : add [rax], al; add [rsi + 1], bh; call rbx
0x0007520f : add [rbp + 0xf], cl; lodsd eax, [rsi]; ret
0x00050c2a : pop rbp; pop r12; mov eax, 1; pop r13; ret
0x00030bb9 : movq [rdi], mm0; mov [rdi + 0xe], rcx; ret
0x00050b5b : pop r12; pop r13; mov eax, 1; pop r14; ret
0x0005a100 : add [rbx - 0x10df43], al; call [rbx + 0xf]
0x0008f742 : add [rax], al; add [rdi + 1], bh; call r14
0x00027a0b : mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x0006523f : mov eax, [rip + 0x25fb53]; add rsp, 8; ret
0x000310b8 : mov [rdi + 4], dx; lea rax, [rdi + 5]; ret
0x00017854 : mov cl, [rdi - 0x73]; adc al, 0xa; jmp r10
0x000305c7 : mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x00050b5c : pop rsp; pop r13; mov eax, 1; pop r14; ret
0x00059a32 : inc [rdx]; mov rdx, r14; call [rax + 0x38]
0x0005c9dd : mov [rbp - 0x1150], ecx; call [rax + 0x38]
0x00030b45 : movq [rdi], mm0; mov [rdi + 0x10], dh; ret
0x0005e4ad : add [rbx - 0x109773], cl; jmp [rsi - 0x77]
0x00027b07 : mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x0008f7bc : add [rsi + 0x1a], bh; mov edi, 1; call r14
0x0008f76a : add [rax], al; add [rdi + 1], bh; call rax
0x00091a5f : add [rbx + 0x75c08507], cl; or dh, bl; ret
0x00077513 : add [rax], al; add [rcx], dh; imul al; ret
0x00027b08 : mov [rdi - 9], ecx; mov [rdi - 1], dl; ret
0x0005a883 : mov [rbp - 0x1140], ecx; call [rax + 0x38]
0x00030599 : mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x0003386c : xor [rax], al; add [rax], al; pop rbx; ret
0x0000bdcc : add ecx, ebp; sar esi, -1; jmp [rsi + 0xf]
0x0006b1b6 : pop r13; pop r14; mov eax, 1; pop r15; ret
0x0000e452 : mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x00033850 : adc [rax], al; add [rax], al; pop rbx; ret
0x0005b5b3 : add [rbx - 0x113743], al; call [rbx + 0xf]
0x00070ad8 : mov [rip + 0x253c91], rax; add rsp, 8; ret
0x0001d100 : add [rbp + 7], dh; lea rax, [rip + 6]; ret
0x00027f59 : mov [rdi - 3], edx; mov [rdi - 2], cx; ret
0x00031086 : mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x0006b1b7 : pop rbp; pop r14; mov eax, 1; pop r15; ret
0x0005a882 : mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x0000d9bd : add [rax], al; add [rax], al; pop rbx; ret
0x000620bc : mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x0007e8a0 : add [rax + 0x48006c46], al; add esp, 8; ret
0x0008ddee : add [rax], cl; mov [rip + 0x236729], 8; ret
0x000714c0 : add [rax], eax; add [rax], al; pop rbx; ret
0x00025bf7 : add al, 3; add [rax], al; xor eax, eax; ret
0x000902ad : add [rax], r8b; mov eax, 4; add rsp, 8; ret
0x00040e62 : inc [rcx - 0x78]; add rcx, [r9 + 0x39]; ret
0x0000f202 : add [rax], al; mov [rip + 0x2b4199], 0; ret
0x00030bf9 : movq [rdi], mm0; mov [rdi + 0x10], rcx; ret
0x000310d7 : mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x00050b60 : add [rax], eax; add [rax], al; pop r14; ret
0x0000617d : push rax; or [rbx + 0x5d], bl; pop r12; ret
0x00025846 : mov ch, 6; add [rax], al; xor eax, eax; ret
0x00014cd6 : add [rax], al; mov [rip + 0x2ae74e], 0; ret
0x00027a0c : mov [rdi - 9], eax; mov [rdi - 4], edx; ret
0x0007ecb8 : add [rax], al; mov [rax], rdx; pop rbx; ret
0x000090b8 : add [rbx + 0x5d], bl; pop r12; pop r13; ret
0x000279c1 : mov edx, [rsi - 8]; mov [rdi - 8], rdx; ret
0x0000c6ff : mov edx, 2; mov rdi, r12; call [rax + 0x48]
0x00001301 : mov dl, 1; add [rax], al; call [rbx + 0x10]
0x000367d9 : add rax, -0x9cf0000; mov rdi, r14; call rbx
0x0008cafe : add [rax - 0x1992417], dl; jmp [rsi + 0x66]
0x0001570f : pop r12; pop r13; pop r14; pop r15; jmp rax
0x00066d86 : add al, ss:[rax]; add [rax - 0x77], cl; ret
0x000310b9 : mov [rdi + 4], edx; lea rax, [rdi + 5]; ret
0x00028536 : mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x0000f0e6 : inc ebx; nop [rax + rax]; xor eax, eax; ret
0x0005a8f3 : sub edx, esi; sar rdx, 2; call [rax + 0x38]
0x0008dcb6 : add [rax - 0x7d], ecx; rol [rbx], 0xeb; ret
0x00028130 : mov edx, [rsi - 4]; mov [rdi - 4], edx; ret
0x00027a53 : mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x000279c0 : mov rdx, [rsi - 8]; mov [rdi - 8], rdx; ret
0x00025f27 : inc [rax]; add [rax], al; sub eax, ecx; ret
0x0007bfe2 : pop r13; pop r14; pop r15; fmulp st(1); ret
0x0002aad8 : mov [rdi - 9], edx; mov [rdi - 4], ecx; ret
0x000305f7 : mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x00030629 : mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x00063da8 : mov rax, -1; pop rbx; pop rbp; pop r12; ret
0x0002aad7 : mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x0006b1bb : add [rax], eax; add [rax], al; pop r15; ret
0x00032d7e : mov bl, 0; add [rax], al; xor eax, eax; ret
0x0000f8ba : sbb [rbx + 0x5d], bl; pop r12; pop r13; ret
0x000015ad : add [rbx + 0x2074fff8], al; add rsp, 8; ret
0x00050c2e : add [rax], eax; add [rax], al; pop r13; ret
0x00091d59 : mov eax, [rax]; mov [rbx], r8; pop rbx; ret
0x0000c33e : mov edx, 2; mov rdi, rbx; call [rax + 0x48]
0x00030609 : mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x00006aeb : sub [rbx + 0x5d], bl; pop r12; pop r13; ret
0x000902bd : add [rax], r8b; mov eax, 2; add rsp, 8; ret
0x0003110b : mov [rdi + 8], edx; lea rax, [rdi + 9]; ret
0x00066218 : add al, ch; add al, [rsi + 0x39480001]; ret
0x0001c2bb : mov cl, 0; add [rax], al; xor rax, rax; ret
0x000305d9 : mov [rdx + 4], eax; lea rax, [rdx + 5]; ret
0x00030b31 : movq mm0, [rsi]; movdqu xmm[rdi], xmm0; ret
0x00028336 : mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0007e74e : mov fs:[rax], 5; mov rax, rdx; pop rbx; ret
0x00028736 : mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x00027a54 : mov [rdi - 9], ecx; mov [rdi - 4], edx; ret
0x0005a8f2 : sub rdx, rsi; sar rdx, 2; call [rax + 0x38]
0x00030b88 : movq [rdi], mm0; mov [rdi + 0x10], ecx; ret
0x0007bfe3 : pop rbp; pop r14; pop r15; fmulp st(1); ret
0x00015710 : pop rsp; pop r13; pop r14; pop r15; jmp rax
0x0000aae9 : add [rax + 0x39], cl; fmul [rax + 0xf]; ret
0x0004250f : add [rax - 0x75], cl; add eax, 0x2819f9; ret
0x00035883 : mov edi, [rax]; mov [rsp + 8], rax; call rbx
0x00073734 : mov [rdi + 1], ch; add [rcx - 0x77], cl; ret
0x00040868 : mov rdx, [r14]; mov rsi, rbx; call [r13 + 8]
0x00001bdf : pop rbp; pop r12; mov rax, rcx; pop r13; ret
0x00063a13 : mov rdi, [r12]; lea rcx, [rax + 1]; call rbx
0x00009e66 : add [rcx + rcx*4 - 1], cl; call [r15 + 0x20]
0x00008a59 : mov eax, ebx; pop rbx; pop rbp; pop r12; ret
0x0004de7d : mov [rbp - 0xb0], r8; mov rdi, rbx; call rax
0x00049386 : mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00035882 : mov rdi, [rax]; mov [rsp + 8], rax; call rbx
0x00015aae : add [rax], al; xor eax, eax; add rsp, 8; ret
0x00063876 : add bl, al; nop [rax + rax]; mov rax, 3; ret
0x0003cb68 : mov rdx, [r13]; mov rsi, r12; call [r15 + 8]
0x0008b0af : mov rax, [rax + 8]; add rax, [rbx]; call rax
0x00026092 : xchg eax, ebx; lea rdx, [r11 + rdx]; jmp rdx
0x0000ba59 : sub eax, esp; pop r12; pop r13; pop r14; ret
0x0003cb69 : mov edx, [rbp]; mov rsi, r12; call [r15 + 8]
0x00008a58 : mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0003ae8a : pop rsp; pop r13; xor eax, eax; pop r14; ret
0x00042ed4 : sub eax, 1; mov [rbx + 8], eax; pop rbx; ret
0x00061e97 : add [rcx + rcx*4 - 1], cl; call [rax + 0x20]
0x0008ccf3 : xor edx, edx; or cl, cl; cmove rax, rdx; ret
0x000308fc : xchg eax, ebx; lea rcx, [r11 + rcx]; jmp rcx
0x00072907 : mov rax, [r13]; add rax, [rdx + 8]; call rax
0x0008b0b0 : mov eax, [rax + 8]; add rax, [rbx]; call rax
0x00063a14 : mov edi, [rsp]; lea rcx, [rax + 1]; call rbx
0x00061d6c : pop rbp; sub rax, r14; pop r14; pop r15; ret
0x00055692 : add [rcx - 0x77], cl; fmul [rcx - 0x77]; ret
0x000762fe : add [rax], al; mov [rdx], 0; mov eax, 1; ret
0x000607d8 : mov rax, rbp; pop rbp; pop r12; pop r13; ret
0x0003c151 : mov edx, [rbp]; mov rsi, rbp; call [r15 + 8]
0x00067849 : pop rsp; pop r13; mov rax, r14; pop r14; ret
0x0000f1a4 : sub eax, [rax]; add [rip + 0x2b41f7], 1; ret
0x0003c599 : mov edx, [rsp]; mov rsi, rbx; call [r14 + 8]
0x0000ba58 : sub rax, r12; pop r12; pop r13; pop r14; ret
0x00016b1d : mov rax, r12; pop rbx; pop rbp; pop r12; ret
0x00029e9b : mov dr0, [rdi + rdi*8 - 1]; jmp [rsi + 0x45]
0x00065261 : add [rbp - 0x7d], dl; stc ; call [rbx + 0xf]
0x0000187a : mov [rip + 0x2bf490], eax; xor eax, eax; ret
0x0007e87e : pop rdx; and al, 0; add [rsi + 0x6c], 0; ret
0x0003ae89 : pop r12; pop r13; xor eax, eax; pop r14; ret
0x0002ae60 : movzx edx, [rsi - 2]; mov [rdi - 2], dx; ret
0x00015258 : mov rax, rdx; pop rbx; pop rbp; pop r12; ret
0x0007135e : pop rbx; mov rax, rbp; pop rbp; pop r12; ret
0x00091d2a : movsxd rax, [r9 + r8*4]; add r9, rax; jmp r9
0x0000e14f : pop rsp; sub rax, r13; pop r13; pop r14; ret
0x00016b1e : mov eax, esp; pop rbx; pop rbp; pop r12; ret
0x0006090e : lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00040869 : mov edx, [rsi]; mov rsi, rbx; call [r13 + 8]
0x000102f7 : mov rax, rdi; pop rbx; pop rbp; pop r12; ret
0x00060c09 : sub rax, r14; pop r14; pop r15; pop rbp; ret
0x000712e1 : mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x00063e18 : pop rbx; sub rax, rbp; pop rbp; pop r12; ret
0x0006466b : mov eax, esp; pop r12; pop r13; pop r14; ret
0x0000aec6 : mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret
0x0003f098 : mov rdx, [r13]; mov rsi, r12; call [r14 + 8]
0x00063589 : pop rsp; pop r13; mov eax, edx; pop r14; ret
0x000102f8 : mov eax, edi; pop rbx; pop rbp; pop r12; ret
0x00061700 : mov [rax], edx; mov eax, [rsi]; pop rbx; ret
0x0002929b : mov dr1, [rdi + rdi*8 - 1]; jmp [rsi + 0x45]
0x000085f5 : pop rbx; mov eax, ebp; pop rbp; pop r12; ret
0x0003c598 : mov rdx, [r12]; mov rsi, rbx; call [r14 + 8]
0x00001879 : mov [rip + 0x2bf490], rax; xor eax, eax; ret
0x0006466a : mov rax, r12; pop r12; pop r13; pop r14; ret
0x0003c150 : mov rdx, [r13]; mov rsi, rbp; call [r15 + 8]
0x000616ff : mov [rax], rdx; mov eax, [rsi]; pop rbx; ret
0x00072908 : mov eax, [rbp]; add rax, [rdx + 8]; call rax
0x000750ff : add [rbp + 0xf], cl; movsd [rdi], [rsi]; ret
0x0003daf9 : mov edx, [rsi]; mov rsi, r13; call [rbx + 8]
0x00063588 : pop r12; pop r13; mov eax, edx; pop r14; ret
0x0002aee0 : movzx edx, [rsi - 1]; mov [rdi - 1], dl; ret
0x000061e8 : pop rbx; pop rbp; xor eax, eax; pop r12; ret
0x00060c0a : sub eax, esi; pop r14; pop r15; pop rbp; ret
0x00061d6b : pop r13; sub rax, r14; pop r14; pop r15; ret
0x000078ad : xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x000712e2 : mov eax, ebp; pop rbx; pop rbp; pop r12; ret
0x000617a5 : mov [rax], ecx; mov eax, [rdx]; pop rbx; ret
0x0000e3e9 : xor edx, edx; mov rax, [rax + 0x48]; jmp rax
0x00063886 : add bl, al; nop [rax + rax]; mov rax, 4; ret
0x0000f11f : add [rax - 0x75], cl; add eax, 0x2b1c19; ret
0x0000e14e : pop r12; sub rax, r13; pop r13; pop r14; ret
0x00073432 : mov dh, [rdx + 1]; add [rcx - 0x77], cl; ret
0x0003daf8 : mov rdx, [r14]; mov rsi, r13; call [rbx + 8]
0x0003cb6b : add [rcx + rcx*4 - 0x1a], cl; call [r15 + 8]
0x0007ebc7 : sub ebp, [rax + rax + 0x48]; add esp, 8; ret
0x00039f0f : add [rax - 0x75], cl; add eax, 0x28add1; ret
0x000638a6 : add bl, al; nop [rax + rax]; mov rax, 6; ret
0x00028b56 : movsxd r9, [r11 + r9*4]; add r9, r11; jmp r9
0x00063896 : add bl, al; nop [rax + rax]; mov rax, 5; ret
0x000607d9 : mov eax, ebp; pop rbp; pop r12; pop r13; ret
0x00067848 : pop r12; pop r13; mov rax, r14; pop r14; ret
0x0000aed1 : mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret
0x000617a4 : mov [rax], rcx; mov eax, [rdx]; pop rbx; ret
0x0008ebd2 : movsxd r8, [r14 + r8*4]; add r8, r14; jmp r8
0x00015259 : mov eax, edx; pop rbx; pop rbp; pop r12; ret
0x0003f099 : mov edx, [rbp]; mov rsi, r12; call [r14 + 8]
0x00023378 : pop rbx; pop rbp; mov rax, r12; pop r12; ret
0x00008d27 : pop rbx; pop rbp; mov eax, edx; pop r12; ret
0x000638b6 : add bl, al; nop [rax + rax]; mov rax, 7; ret
0x00063866 : add bl, al; nop [rax + rax]; mov rax, 2; ret
0x0003f09b : add [rcx + rcx*4 - 0x1a], cl; call [r14 + 8]
0x0002a8c9 : mov [rdi - 0xd], edx; mov [rdi - 8], rcx; ret
0x000673ff : mov fs:[rax], edx; xor eax, eax; pop rbx; ret
0x0002857c : mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00035383 : pop rsp; xor esi, esi; mov rdi, rbx; call rbp
0x00022e4b : sbb [r11 + 0x5d], r11b; pop r12; pop r13; ret
0x00047637 : mov rsi, r14; mov rdi, rbx; call [rax + 0x38]
0x00063f63 : lea esi, [rsp + 0x30]; mov rdi, r12; call rbx
0x000041a3 : mov [rcx + 1], ebx; add [rax - 0x77], cl; ret
0x0002a9d7 : mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x000902c1 : add al, [rax]; add [rax], al; add rsp, 8; ret
0x00027bdb : mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00039ce0 : mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x00008547 : xor esi, esi; mov rdi, rbx; call [rax + 0x10]
0x0003a70d : mov rdi, r14; mov rax, [rbp - 0x60]; call rax
0x0002817c : mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00060795 : mov rsi, r13; mov rdi, r12; call [rax + 0x38]
0x0000b4ff : mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x0000c473 : mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x0008cf4e : add [rax], al; mov eax, [rip + 0x237ce2]; ret
0x0003055a : mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x0006090f : lea ecx, [rsp + 0x10]; mov rdi, r12; call rbp
0x0003a70e : mov edi, esi; mov rax, [rbp - 0x60]; call rax
0x000306ab : mov [rdx + 6], eax; lea rax, [rdx + 0xd]; ret
0x0000ba11 : mov esi, esi; mov rdi, rbx; call [rax + 0x70]
0x0006387c : add [rax], al; add [rax], al; mov rax, 3; ret
0x000306aa : mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x0002a958 : mov [rdi - 0xc], edx; mov [rdi - 4], ecx; ret
0x000337fd : add [rax], al; pop rbx; and eax, 0x3fc00; ret
0x0000d9e9 : add [rax], al; mov rax, [rax + 0x18]; jmp rax
0x0004de7e : mov [rbp - 0xb0], eax; mov rdi, rbx; call rax
0x000485f4 : sub esi, esi; mov rdx, r14; call [rax + 0x38]
0x000742af : add [rax], al; add [rax], al; add rsp, 8; ret
0x00039f0e : add [rax], al; mov rax, [rip + 0x28add1]; ret
0x000724e6 : add esp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x00008b1f : mov edx, ebp; mov rsi, r12; call [rax + 0x38]
0x000724e5 : add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret
0x00010d84 : mov [rdx], esp; add [rax + 0x6c1860], bh; ret
0x000738d1 : mov edx, r8d; sub edx, ecx; mov eax, edx; ret
0x00022d37 : add [rcx + rcx*4 + 0x4f], cl; cmp bl, dh; ret
0x000638ac : add [rax], al; add [rax], al; mov rax, 6; ret
0x000357e7 : adc [rbp - 0x7b], cl; test [rdi], 0x84; ret 0
0x00045dd4 : mov esi, [rsp + 0x10]; mov rdi, rbx; call rbp
0x00074dd7 : pop rbp; cqo ; pop r14; idiv r9; pop r15; ret
0x00076380 : sub eax, r8d; mov [rdx], eax; mov eax, 1; ret
0x00074dd6 : pop r13; cqo ; pop r14; idiv r9; pop r15; ret
0x000478ae : mov edx, eax; mov rdi, rbx; call [rcx + 0x38]
0x00047286 : sub ebp, esp; mov rdx, r13; call [rax + 0x38]
0x000485f3 : sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x00030649 : mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x00045c48 : sbb [rax - 0x77], cl; pop rax; or cl, ch; ret
0x00049387 : mov esi, ecx; mov rdi, rbx; call [rax + 0x38]
0x00035cd2 : mov edi, esi; mov rax, [rbp - 0x48]; call rax
0x00090312 : movsxd rax, [r8 + rdi*4]; add r8, rax; jmp r8
0x0002aa58 : mov [rdi - 0xa], edx; mov [rdi - 4], ecx; ret
0x00027dbc : mov [rdi - 0xb], ecx; mov [rdi - 4], edx; ret
0x0000c474 : mov esi, esp; mov rdi, rbx; call [rax + 0x78]
0x00047638 : mov esi, esi; mov rdi, rbx; call [rax + 0x38]
0x0005ff7b : mov rsi, rbp; mov rdi, rbx; call [rax + 0x38]
0x000036e2 : lea rdi, [r13 + 0x80]; xor esi, esi; call rax
0x0006383c : add [rax], al; add [rax], al; add rax, 3; ret
0x000306cb : mov [rdx + 7], eax; lea rax, [rdx + 0xe]; ret
0x00027dbb : mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x000159ee : mov rsi, [rsp + 0x28]; mov rdi, r12; call rax
0x0000d317 : xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x00061b22 : mov esi, esi; mov rdi, r12; call [rax + 0x18]
0x000423fc : add [rax], al; add [rax], al; mov eax, 1; ret
0x0002a7a8 : mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x000311aa : mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x0000cca5 : movzx eax, ch; pop rbx; pop rbp; pop r12; ret
0x00031149 : mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x0005ff7c : mov esi, ebp; mov rdi, rbx; call [rax + 0x38]
0x000657d1 : sub [rbx + 0x5d], r11b; pop r12; pop r13; ret
0x0000985f : mov edi, ebx; sub rdx, r12; call [rax + 0x70]
0x000159ef : mov esi, [rsp + 0x28]; mov rdi, r12; call rax
0x0007eb12 : movzx eax, al; pop rbx; pop rbp; pop r12; ret
0x0003118a : mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x0002817d : mov [rdi - 0xd], ecx; mov [rdi - 8], rdx; ret
0x0000ba10 : mov rsi, r14; mov rdi, rbx; call [rax + 0x70]
0x00008d4b : mov esi, edx; mov rdi, rbx; call [rax + 0x58]
0x00087e70 : add esi, eax; mov [rsp + 0x70], r14; call rbp
0x0008c8e0 : mov rsi, r12; mov rdi, rbx; call [rax + 0x48]
0x0001cace : mov [rdi], rcx; mov [rdi + rdx - 8], rcx; ret
0x000679fc : add [rcx + 0x39], al; ror [rdi], -0x7c; ret 1
0x0002837d : mov [rdi - 0xe], ecx; mov [rdi - 8], rdx; ret
0x0000f0d4 : inc ebx; nop cs:[rax + rax]; mov rax, -1; ret
0x0001d09d : add [rbp + 7], dh; lea rax, [rip + 0x79]; ret
0x00060e71 : mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret
0x000306ca : mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x0001cac7 : mov [rdi], ecx; mov [rdi + rdx - 4], ecx; ret
0x00008b1e : mov rdx, rbp; mov rsi, r12; call [rax + 0x38]
0x000311ab : mov [rdi + 7], edx; lea rax, [rdi + 0xe]; ret
0x0002a839 : mov [rdi - 0xe], edx; mov [rdi - 8], rcx; ret
0x0002837c : mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0004c8a2 : add ch, [rbx]; add [rax], al; add cl, ch; ret
0x00060796 : mov esi, ebp; mov rdi, r12; call [rax + 0x38]
0x0005a26c : mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0000f10b : add [rax], al; add [rax], al; add bl, dh; ret
0x00045dd3 : mov rsi, [rsp + 0x10]; mov rdi, rbx; call rbp
0x00039ce1 : mov edx, ebp; mov rsi, [rsp + 0x18]; call rbx
0x00031129 : mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x00027fab : mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0003068b : mov [rdx + 5], eax; lea rax, [rdx + 0xc]; ret
0x0002857d : mov [rdi - 0xf], ecx; mov [rdi - 8], rdx; ret
0x0002a957 : mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x000738d2 : mov edx, eax; sub edx, ecx; mov eax, edx; ret
0x00087e6f : add r14, rax; mov [rsp + 0x70], r14; call rbp
0x0000df95 : add [rax], al; mov rax, [rax + 0x40]; jmp rax
0x0002a8c8 : mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x00027fac : mov [rdi - 0xc], ecx; mov [rdi - 4], edx; ret
0x000902cd : add [rax], r8b; xor eax, eax; add rsp, 8; ret
0x000478ad : mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x00045477 : mov rsi, rbx; mov rdi, [rsp + 0x18]; call rbp
0x0003055b : mov [rdx + 8], eax; lea rax, [rdx + 0xf]; ret
0x0000985e : mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x00063f62 : lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x0002aa57 : mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x0002a7a9 : mov [rdi - 0xf], edx; mov [rdi - 8], rcx; ret
0x0005a26d : mov esi, esi; mov rdi, r15; call [rax + 0x38]
0x0003068a : mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x0000bdf6 : mov rsi, r12; mov rdi, rbp; call [rax + 0x78]
0x0006385c : add [rax], al; add [rax], al; mov rax, 1; ret
0x0002edbf : add [rdx + 0x48028801], cl; mov eax, edi; ret
0x0006389c : add [rax], al; add [rax], al; mov rax, 5; ret
0x00076381 : sub eax, eax; mov [rdx], eax; mov eax, 1; ret
0x0002a9d8 : mov [rdi - 0xb], edx; mov [rdi - 4], ecx; ret
0x000036e3 : lea edi, [rbp + 0x80]; xor esi, esi; call rax
0x0001c3a7 : add [rbp + 8], dh; lea rax, [rip + 0x1f]; ret
0x0000b500 : mov esi, ebp; mov rdi, rbx; call [rax + 0x40]
0x0006386c : add [rax], al; add [rax], al; mov rax, 2; ret
0x0008c8e1 : mov esi, esp; mov rdi, rbx; call [rax + 0x48]
0x0002a458 : add [rax], al; add [rax - 0x7f], cl; ret 0x80
0x0001ca25 : adc bl, dh; movq [rdi + rdx - 0x20], mm0; ret
0x00045478 : mov esi, ebx; mov rdi, [rsp + 0x18]; call rbp
0x0008fbac : add [rax - 0x77], cl; fcomp [rbx + 0x5d]; ret
0x0001cacf : mov [rdi], ecx; mov [rdi + rdx - 8], rcx; ret
0x0003105d : add [rax], al; add [rax + 0x78d4837], cl; ret
0x0000a560 : add [rax], al; mov rax, [rax + 0x20]; jmp rax
0x00062192 : mov esi, eax; mov rdi, rbx; call [rdx + 0x30]
0x0000012f : add [rax], al; pop rbx; pop rbp; pop r12; ret
0x0003116a : mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x00047285 : sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x0006388c : add [rax], al; add [rax], al; mov rax, 4; ret
0x000638bc : add [rax], al; add [rax], al; mov rax, 7; ret
0x00030669 : mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x0000f11e : add [rax], al; mov rax, [rip + 0x2b1c19]; ret
0x0008f987 : add [rdx + rbp*8 + 0x48], dh; add esp, 8; ret
0x00062191 : add [rcx - 0x2076b73a], cl; call [rdx + 0x30]
0x00008d4a : mov rsi, r10; mov rdi, rbx; call [rax + 0x58]
0x0003118b : mov [rdi + 6], edx; lea rax, [rdi + 0xd]; ret
0x0002a838 : mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x0003116b : mov [rdi + 5], edx; lea rax, [rdi + 0xc]; ret
0x00027bdc : mov [rdi - 0xa], ecx; mov [rdi - 4], edx; ret
0x0000bdf7 : mov esi, esp; mov rdi, rbp; call [rax + 0x78]
0x00014421 : mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret
0x000363b8 : mov edx, 1; mov esi, 1; mov rdi, r12; call rbx
0x00045245 : add [rbp + 0x480e79d2], al; add esp, 0xd0; ret
0x0000f1a5 : add [rbx + 0x2b41f705], al; add [rcx], al; ret
0x00087d92 : add [rax], al; lea rdi, [rsp + 0x80]; call rbp
0x000423eb : add ecx, ebp; paddw mm7, mm7; jmp [rsi + 0x66]
0x0009057e : add [rax], al; mov rax, [rsi]; add rsp, 8; ret
0x0000c13c : mov [rdx + 0x140], 0x494fc0; call [rax + 0x20]
0x0000dde2 : mov [rbx], eax; pop rbx; pop rbp; pop r12; ret
0x0000d8f2 : mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x00062248 : sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret
0x00036636 : mov edx, 1; mov esi, 2; mov rdi, r12; call rbx
0x0000e7f9 : add [rax], al; mov rdi, rbx; call [rax + 0x30]
0x00008db2 : add [rax], al; mov rdi, rbx; call [rax + 0x68]
0x0008c6ee : mov [rsp - 8], rdx; movsd xmm0, [rsp - 8]; ret
0x0000e735 : add bl, al; nop [rax + rax]; xor eax, eax; ret
0x0000d8c3 : mov [rdi + 0x18], eax; mov [rdi + 8], rax; ret
0x00059a33 : add cl, [rcx + rcx*4 - 0xe]; call [rax + 0x38]
0x0006c9ce : add [rax], al; mov rdi, [rsp + 0x30]; call rax
0x0002311b : add [rax], 0; add [rax], al; xor rax, rax; ret
0x0008f9f6 : add [rax], al; mov [rcx], rdx; add rsp, 8; ret
0x0000cca4 : movzx eax, bpl; pop rbx; pop rbp; pop r12; ret
0x00062914 : add [rax], al; bsr rax, rax; add rax, rdi; ret
0x0001c30e : add [rax], al; bsf eax, eax; add rax, rdi; ret
0x00024921 : mov dh, 7; movzx ecx, [rsi]; sub eax, ecx; ret
0x000746ff : add ah, [rax + 0x48006c2b]; add esp, 0x58; ret
0x00039ea7 : add [rax], al; mov rdi, [rbx + 0x18]; call rax
0x000087aa : add [rax], al; mov rdi, rbx; call [rax + 0x60]
0x0000b796 : add [r9 + rcx*4 - 0x16], cl; call [rax + 0x40]
0x0000c341 : add [rax], al; mov rdi, rbx; call [rax + 0x48]
0x00070bab : mov eax, [rip + 0x253bb7]; mov [rsi], rax; ret
0x000539f5 : add [rax - 0x77], cl; ror [rax - 0x7d], 1; ret
0x00061b21 : mov esi, r14d; mov rdi, r12; call [rax + 0x18]
0x000338a1 : inc [rbx]; div ecx; pop rbx; mov eax, eax; ret
0x00036275 : mov edx, 3; mov esi, 2; mov rdi, r14; call rbx
0x0000bf90 : add [rax], al; mov rdi, rbx; call [rax + 0x20]
0x000375d8 : add [rax], al; add [rbp - 0x3dbaf02e], al; ret
0x00070baa : mov rax, [rip + 0x253bb7]; mov [rsi], rax; ret
0x00065372 : add [rbp - 0x1f3eadfc], cl; add ch, [rcx]; ret
0x000361cc : add al, 0; add [rax], al; mov esi, 1; call rbx
0x000638fe : sub esp, -0x80; pop rbx; pop rbp; pop r12; ret
0x000361ed : mov edx, 4; mov esi, 2; mov rdi, r15; call rbx
0x000095ec : mov [rbx], edx; pop rbx; pop rbp; pop r12; ret
0x0000f0dc : add [rax], al; add [rax], al; mov rax, -1; ret
0x000361fc : mov edx, 3; mov esi, 1; mov rdi, r14; call rbx
0x0006e110 : mov rax, [rip + 0x253dc1]; add rsp, 8; jmp rax
0x0008c6ef : mov [rsp - 8], edx; movsd xmm0, [rsp - 8]; ret
0x000028f8 : add bh, bh; sar [rdi + 0x6c30c0], cl; call rbx
0x0008c6a9 : mov [rsp - 4], edx; movss xmm0, [rsp - 4]; ret
0x00033876 : add [rbx - 0x3d], bl; mov eax, 8; pop rbx; ret
0x00090186 : mov [rsp + 0x10], r9; mov rsi, [rbp]; call r14
0x0000c702 : add [rax], al; mov rdi, r12; call [rax + 0x48]
0x00087f71 : add [rax], al; lea rdi, [rsp + 0x90]; call r12
0x000638fd : sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret
0x0006e111 : mov eax, [rip + 0x253dc1]; add rsp, 8; jmp rax
0x00087b88 : add [rax], al; lea rdi, [rsp + 0x70]; call rbp
0x0002b392 : add cl, [rbx + 0x257890e]; mov [rdi], ecx; ret
0x0003dc5a : add [rax - 0x77], cl; add al, 0x24; call [rbx]
0x0005ab6a : mov esi, esi; mov rdi, r15; call [rax + r11*8]
0x000363a9 : mov edx, 2; mov esi, 2; mov rdi, r13; call rbx
0x0001c0d4 : add [rax], al; add rax, rdi; add rax, rcx; ret
0x0000765f : add [rbx + 0x13], dh; mov rbp, rax; call [rbp]
0x0005ab69 : mov rsi, r14; mov rdi, r15; call [rax + r11*8]
0x000361c8 : mov rdi, r15; mov edx, 4; mov esi, 1; call rbx
0x00027855 : mov [rdi - 0x10], ebx; mov [rdi - 8], rcx; ret
0x00036284 : mov edx, 2; mov esi, 1; mov rdi, r13; call rbx
0x0001c4a1 : mov dh, 7; movzx edx, [rsi]; sub eax, edx; ret
0x0000e2cf : add [rax], al; mov rbx, rdi; call [rax + 0x60]
0x0000d8f3 : mov [rdi + 0x48], edx; mov [rdi + 8], rax; ret
0x00027893 : mov [rdi - 0x10], ebx; mov [rdi - 8], rdx; ret
0x00009643 : add [rax], al; mov rdi, rbp; call [rbp + 0x20]
0x0008b1d0 : add al, ch; fisubr [rax - 9]; jmp [rsi + 0x2e]
0x0005e55a : add [rsi - 0x77], ah; or cl, ch; push rbp; ret
0x00070df2 : add [rax - 0x75], cl; or [rax - 0x7d], cl; ret
0x00027892 : mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x000361c9 : mov edi, edi; mov edx, 4; mov esi, 1; call rbx
0x0000f14d : add [rax], al; add [rax - 0x77], cl; clc ; ret
0x00030a7f : add [rbx + 0x477880e], cl; mov [rdi], ecx; ret
0x0000b32f : push rbx; sub rdx, rsi; mov rdi, rbx; call rax
0x00061e96 : add [rax], al; mov rdi, r15; call [rax + 0x20]
0x00027854 : mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00037745 : add [rax], al; syscall ; pop rdx; pop rsi; ret
0x00009e65 : add [rax], al; mov rdi, r15; call [r15 + 0x20]
0x0000d8c2 : mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x000098d4 : mov edx, edx; mov [rsp], rax; call [r13 + 0x18]
0x00063b57 : lea esi, [rsp + 0x40]; mov rdi, [r13]; call r12
0x0003523a : add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x0000bbc9 : mov rax, rbp; add rsp, 8; pop rbx; pop rbp; ret
0x00035239 : add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x0006f053 : mov rax, [r12 + 0x10]; add rax, [rbx]; call rax
0x00010a0b : add esp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x0002b460 : movq [rdi + 4], mm0; movdqu xmm[rdi], xmm1; ret
0x00074b2d : add [rax], al; sub eax, edx; sar eax, 0x10; ret
0x00014dc3 : xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x0006eb15 : add rax, [rbx]; mov [rbp - 0xe0], r11; call rax
0x0000fea8 : add [rax], al; mov [rsi], rax; mov rax, r8; ret
0x000728e9 : mov esi, eax; mov eax, r14d; call [r15 + rax*8]
0x0006b141 : adc [rbp + 0x31], al; ror [rcx - 0x77], cl; ret
0x00067414 : add al, [rax]; add [rax], al; xor eax, eax; ret
0x00010a0a : add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x0003056f : add [rdx + 0x48028801], cl; lea eax, [rdx]; ret
0x00025f67 : add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9
0x000254eb : adc [rdx], cl; add [rax], al; xor eax, eax; ret
0x0006eb16 : add eax, [rbx]; mov [rbp - 0xe0], r11; call rax
0x00071768 : mov eax, ebx; add rsp, 8; pop rbx; pop rbp; ret
0x0002b310 : movq [rdi + 7], mm0; movdqu xmm[rdi], xmm1; ret
0x00063b56 : lea rsi, [rsp + 0x40]; mov rdi, [r13]; call r12
0x000096d2 : mov edi, ebp; mov [rsp], rax; call [rbp + 0x18]
0x0002b402 : add [rbx + 0x157890e], ecx; mov [rdi], ecx; ret
0x000338a2 : add esi, edi; int1 ; pop rbx; mov eax, eax; ret
0x000749b4 : mov rcx, [rsp + 0x40]; add rsp, 0x50; jmp [rax]
0x000762cf : mov [rdi], esi; mov eax, 1; mov [rdx], ecx; ret
0x0000f14c : add [rax], al; add [rax], al; mov rax, rdi; ret
0x0002b4d0 : movq [rdi + 3], mm0; movdqu xmm[rdi], xmm1; ret
0x00074a27 : mov ecx, [rsp + 0x40]; add rsp, 0x48; jmp [rax]
0x00090187 : mov [rsp + 0x10], ecx; mov rsi, [rbp]; call r14
0x00007816 : add esp, 8; mov rax, rsi; pop rbx; pop rbp; ret
0x0002edc0 : mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret
0x0004c491 : add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x00009a7d : mov rdi, r13; mov [rsp], rax; call [r13 + 0x18]
0x0002edd0 : mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret
0x0000e73c : add [rax], al; add [rax], al; xor eax, eax; ret
0x00071767 : mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret
0x0002311c : add [rax], al; add [rax], al; xor rax, rax; ret
0x0002b3f0 : movq [rdi + 5], mm0; movdqu xmm[rdi], xmm1; ret
0x00009a7e : mov edi, ebp; mov [rsp], rax; call [r13 + 0x18]
0x0000c703 : add [rcx + rcx*4 - 0x19], cl; call [rax + 0x48]
0x00074b86 : mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx
0x00037b1c : push [rbp - 7]; nop ; xor eax, eax; leave ; ret
0x00019b19 : add esp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00009c45 : mov [rsp], rdx; mov rdx, r14; call [r13 + 0x18]
0x00015c15 : add esp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x000749b5 : mov ecx, [rsp + 0x40]; add rsp, 0x50; jmp [rax]
0x00025f68 : add esi, edx; add rdi, rdx; add r9, r11; jmp r9
0x000098d3 : mov rdx, r10; mov [rsp], rax; call [r13 + 0x18]
0x0000765e : add [r11 + 0x13], sil; mov rbp, rax; call [rbp]
0x0008b091 : mov edi, edx; mov edx, r15d; call [r12 + rdx*8]
0x0002b230 : movq [rdi + 9], mm0; movdqu xmm[rdi], xmm1; ret
0x000714bc : add [rbx - 0x3d], ebx; mov eax, 1; pop rbx; ret
0x000762ce : mov [rdi], rsi; mov eax, 1; mov [rdx], ecx; ret
0x00014422 : mov eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x00074701 : sub ebp, [rax + rax + 0x48]; add esp, 0x58; ret
0x0006f054 : mov eax, [rsp + 0x10]; add rax, [rbx]; call rax
0x000096d1 : mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x0006e9a3 : mov rax, [r14 + 0x10]; add rax, [r15]; call rax
0x00009c46 : mov [rsp], edx; mov rdx, r14; call [r13 + 0x18]
0x0002b380 : movq [rdi + 6], mm0; movdqu xmm[rdi], xmm1; ret
0x0006ef22 : mov eax, [rdi + 0x10]; add rax, [r14]; call rax
0x0002b540 : movq [rdi + 2], mm0; movdqu xmm[rdi], xmm1; ret
0x00039f73 : mov [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret
0x00035cd1 : mov r15d, r14d; mov rax, [rbp - 0x48]; call rax
0x0000b797 : add [rcx + rcx*4 - 0x16], cl; call [rax + 0x40]
0x00001304 : add bh, bh; push rbx; adc [rax - 0x7d], cl; ret
0x000175bd : add al, 7; cmp [rax], sil; cmovne rax, rdx; ret
0x0002b5b0 : movq [rdi + 1], mm0; movdqu xmm[rdi], xmm1; ret
0x000714c6 : mov rax, -0x40; pop rbx; mov eax, fs:[rax]; ret
0x00015c14 : add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x00074a26 : mov rcx, [rsp + 0x40]; add rsp, 0x48; jmp [rax]
0x0002b2a0 : movq [rdi + 8], mm0; movdqu xmm[rdi], xmm1; ret
0x00034924 : push [rdi + 0x33]; mov [rip + 0x28ebff], 1; ret
0x0001678c : add [rax], al; xor eax, eax; add rsp, 0x18; ret
0x0000de4d : push rbx; or [rdi], cl; mov dh, 0; pop rbx; ret
0x000655e5 : add [rcx], bh; ror [rdi], 1; xchg eax, esp; ret
0x00007815 : add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret
0x0004c492 : add esp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x00019b18 : add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00026480 : lea r9, [r9 - 7]; lea rdx, [rdx - 0x40]; jmp r9
0x0006ef21 : mov rax, [r15 + 0x10]; add rax, [r14]; call rax
0x0006e9a4 : mov eax, [rsi + 0x10]; add rax, [r15]; call rax
0x0008f9f5 : add [rax], r8b; mov [rcx], rdx; add rsp, 8; ret
0x00062249 : sub eax, ecx; sar r8, 2; lea eax, [r8 - 1]; ret
0x000140ad : mov [rsi + rbx], bh; mov rax, rsi; pop rbx; ret
0x00067fb4 : dec [rax - 0x75]; and al, 8; add rsp, 0x28; ret
0x0000bbca : mov eax, ebp; add rsp, 8; pop rbx; pop rbp; ret
0x0002b322 : add ecx, [rbx + 0x357890e]; mov [rdi], ecx; ret
0x00030a4e : add [rax], al; mov dx, [rsi]; mov [rdi], dx; ret
0x0007ea89 : xor esi, esi; mov edi, [rip + 0x24585f]; jmp rax
0x0005f4dc : adc [rbx + 0x5d], bl; mov rax, r12; pop r12; ret
0x0008fc34 : mov edx, [rbp]; mov esi, 1; mov edi, 1; call rax
0x0007370c : mov esp, ebx; mov rbx, [rsp]; add rsp, 0x30; ret
0x0008d568 : movsxd rcx, [rdi + rcx*4]; add rcx, rdi; jmp rcx
0x0003126c : mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x00079728 : pop r13; pop r14; mulsd xmm0, xmm0; pop r15; ret
0x00014cdc : sub al, [rax]; add [rax], al; add [rax], al; ret
0x0008e082 : movsxd rax, [r11 + rax*4]; add rax, r11; jmp rax
0x00074b85 : sub [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx
0x0002490d : movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00032913 : int1 ; movzx edx, [rsi - 0xf]; sub eax, edx; ret
0x000728e8 : mov r14d, eax; mov eax, r14d; call [r15 + rax*8]
0x0003124e : mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x00060133 : pop rbx; div rbp; pop rbp; pop r12; pop r13; ret
0x00030c41 : mov [rdi + 0x10], edx; mov [rdi + 0x18], cx; ret
0x000311c4 : movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x00014f51 : xor esi, edx; mov [rax + rbx], sil; pop rbx; ret
0x0008e183 : movsxd rax, [rcx + rax*4]; add rcx, rax; jmp rcx
0x0004c327 : movsxd rdx, ebp; mov rdi, rbx; call [rax + 0x38]
0x0006088f : add [rax - 0x75], cl; mov rax, [rax + 0x4c]; ret
0x00000aa9 : pop rbp; mov [rip + 0x2c131f], rax; pop r12; ret
0x0000f208 : sub eax, [r8]; add [rax], al; add [rax], al; ret
0x000353d0 : mov eax, ebp; pop rbx; pop rbp; pop r12; jmp rax
0x00033cf4 : adc [rcx], al; add rsp, 8; pop rbx; pop rbp; ret
0x000311d8 : mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x0008e982 : movsxd rcx, [rdx + rcx*4]; add rdx, rcx; jmp rdx
0x00090134 : lea edi, [rsp + rcx*8]; mov rsi, [r15]; call r14
0x0000d9b7 : add [rax], al; mov [rbx + 0x50], 0; pop rbx; ret
0x0008fc33 : mov rdx, [r13]; mov esi, 1; mov edi, 1; call rax
0x00062154 : add [rax], al; mov [rax + 0x48], 0; pop rbx; ret
0x00079729 : pop rbp; pop r14; mulsd xmm0, xmm0; pop r15; ret
0x000470d8 : movsxd rbp, edx; mov rdx, r13; call [rax + 0x38]
0x0000c4c6 : pop rbx; pop rbp; pop r12; neg eax; pop r13; ret
0x000002f7 : pop rsp; pop r13; pop r14; pop r15; pop rbp; ret
0x0000bbf5 : add [rax], al; add rsp, 8; pop rbx; pop rbp; ret
0x0008b1cf : add r8b, bpl; fisubr [rax - 9]; jmp [rsi + 0x2e]
0x0008d413 : movsxd rcx, [r15 + rcx*4]; add rcx, r15; jmp rcx
0x0000bc44 : mov eax, [rdx]; add [rdx + 0x48], bl; cwde ; ret
0x00032a64 : add al, [rax]; add [rbx - 0x7bf0ed07], al; ret 2
0x0003762d : sub [rax], al; add rsp, 8; pop rbx; pop rbp; ret
0x00030a3c : add [rax], al; add [rax], al; mov [rdi], dh; ret
0x000353cf : mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax
0x00090133 : lea r15, [r12 + rcx*8]; mov rsi, [r15]; call r14
0x00014f56 : sbb [rbx - 0x3d], bl; xor eax, eax; pop rbx; ret
0x0000ce89 : mov [rbx + 0x90], -1; xor eax, eax; pop rbx; ret
0x00015167 : add [rax], eax; add [rax - 0x7d], cl; call [rax]
0x0003128d : mov [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret
0x00076c6e : add [rax - 0x7c], al; test [rdi], 0x84; ret 0x15
0x0003120b : mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x00030b9b : mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x000312f4 : mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x0008e78c : movsxd rdx, [rbp + rdx*4]; add rdx, rbp; jmp rdx
0x0008a4ef : add al, ch; cmp ebx, [rcx - 2]; jmp [rsi + 0x2e]
0x000311ec : mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x00059840 : movsxd rsp, edx; mov rdx, r12; call [rax + 0x38]
0x00026589 : adc [rdx + 8], dh; movaps xmm[rdi], xmm4; jmp r9
0x00073917 : add [rax], eax; add [rax], al; mov eax, edx; ret
0x00050cf5 : add [rbp + 0x5c], dh; mov eax, edx; pop rbx; ret
0x0008f0df : movsxd rax, [r15 + rax*4]; add rax, r15; jmp rax
0x000061e7 : add [rbx + 0x5d], bl; xor eax, eax; pop r12; ret
0x000900e2 : leave ; cmp [rsi + 8], rdi; cmovbe eax, ecx; ret
0x00030b58 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x00030b44 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x00030b77 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x00030c40 : mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x00030c1c : mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x00030bd8 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x0003611c : add [rcx], dh; test [rax - 0x77], 0xef; call rbx
0x0002edd1 : mov eax, [rcx]; mov [rdx], ax; mov rax, rdi; ret
0x00008d26 : add [rbx + 0x5d], bl; mov eax, edx; pop r12; ret
0x0008d4a4 : add [rax], eax; add [rax - 0x7d], cl; call [rcx]
0x000337f8 : lea eax, [rcx*4]; pop rbx; and eax, 0x3fc00; ret
0x0003126d : mov [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret
0x000002f6 : pop r12; pop r13; pop r14; pop r15; pop rbp; ret
0x00076938 : pop r13; pop r14; mulss xmm0, xmm0; pop r15; ret
0x00079502 : stosb [rdi], al; test edi, eax; jmp [rsi + 0x2e]
0x00030c1d : mov [rdi + 0x10], ecx; mov [rdi + 0x18], dh; ret
0x000140ac : mov [rsi + rbx], dil; mov rax, rsi; pop rbx; ret
0x000470d7 : movsxd r13, edx; mov rdx, r13; call [rax + 0x38]
0x00076939 : pop rbp; pop r14; mulss xmm0, xmm0; pop r15; ret
0x000673c3 : add [rax], al; mov [rax + 0x28], 0; pop rbx; ret
0x0003128c : mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x00030bb8 : movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x00001920 : pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000312d0 : mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x0000180b : pop rbp; pop r12; pop r13; pop r14; pop r15; ret
0x0007370b : mov rsp, rbx; mov rbx, [rsp]; add rsp, 0x30; ret
0x00074bc1 : add ebx, eax; nop [rax + rax]; xor eax, eax; ret
0x00036645 : xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx
0x0005983f : movsxd r12, edx; mov rdx, r12; call [rax + 0x38]
0x0008b090 : mov r15d, edx; mov edx, r15d; call [r12 + rdx*8]
0x0003492b : sub [rax], al; add [rax], eax; add [rax], al; ret
0x00064329 : mov r9, r15; mov rsi, r14; mov rdi, r12; call rbp
0x0003138e : movq [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret
0x00026481 : lea ecx, [rcx - 7]; lea rdx, [rdx - 0x40]; jmp r9
0x0000ee20 : mov eax, [rdi + 0x10]; sub eax, [rsi + 0x10]; ret
0x00002e7c : add al, [rax]; add [rdi + 0x6c42a0], bh; call rax
0x00030bf8 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x0004490e : add al, ch; pushfq ; sar ebx, 1; jmp [rsi + 0x66]
0x000741dc : add eax, [rax]; add [rdx + rbp*2 - 0x7d], dh; ret
0x00036639 : add [rax], al; mov esi, 2; mov rdi, r12; call rbx
0x000680a6 : lea rdx, [rdx + rcx*4]; add eax, [rsi + rdx]; ret
0x0002d8f7 : adc [rax - 0x7b], cl; ror [rdi], 0x85; call [rbx]
0x0001ca24 : adc r11b, r14b; movq [rdi + rdx - 0x20], mm0; ret
0x00030c80 : mov [rdi + 0x10], edx; mov [rdi + 0x18], ecx; ret
0x000312ad : mov [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret
0x000312ac : mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x0002b1c0 : movq [rdi + 0xa], mm0; movdqu xmm[rdi], xmm1; ret
0x000353a2 : mov edi, ebx; mov edx, r12d; mov esi, 1; call rbp
0x0003388c : add eax, eax; div ecx; pop rbx; mov eax, eax; ret
0x00036278 : add [rax], al; mov esi, 2; mov rdi, r14; call rbx
0x0002b0e0 : movq [rdi + 0xc], mm0; movdqu xmm[rdi], xmm1; ret
0x0006ffd9 : pop rbp; mov edi, r12d; pop r12; pop r13; jmp rax
0x00042656 : add [rax - 1], bh; pop rbx; pop rbp; pop r12; ret
0x000311ed : mov [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret
0x0003dc53 : lea rax, [rsp + 0xa0]; mov [rsp], rax; call [rbx]
0x00074735 : add [rax], al; add [rax], al; add rax, -0x10; ret
0x00030c7f : mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x0000ad66 : mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x00030c5f : mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x000312f5 : mov [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret
0x00031333 : mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x0003134e : movq [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret
0x000361ff : add [rax], al; mov esi, 1; mov rdi, r14; call rbx
0x0006d74d : mov [rbp - 0xb0], r9; mov edi, 0x6c21e0; call rax
0x0005edd9 : add [rcx + 0x415d5bc8], cl; pop rsp; pop r13; ret
0x0002b000 : movq [rdi + 0xe], mm0; movdqu xmm[rdi], xmm1; ret
0x0000ee02 : add cl, [rax - 0x7b]; sal [rbp - 0x10], 0xf3; ret
0x00061218 : mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x00030c60 : mov [rdi + 0x10], edx; mov [rdi + 0x17], ecx; ret
0x00061219 : mov [rax + 0x10], edx; mov [rax + 0x40], rcx; ret
0x00061259 : mov [rax + 0x10], esi; mov [rax + 0x40], rcx; ret
0x0000b469 : mov [rbx + 0x10], eax; xor eax, eax; pop rbx; ret
0x0002b070 : movq [rdi + 0xd], mm0; movdqu xmm[rdi], xmm1; ret
0x0003be75 : mov [rdx + 0x50], ecx; mov [rdx + 0x54], eax; ret
0x0003136e : movq [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret
0x00030cba : movq [rdi], mm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x0000f209 : sub eax, [rax]; add [rax], al; add [rax], al; ret
0x0002ed51 : mov eax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00070a44 : xor edx, edx; pop rbx; mov eax, edx; pop rbp; ret
0x0004509f : mov [rbx + 0x40], eax; xor eax, eax; pop rbx; ret
0x0007af4c : pop rsp; add al, [rax]; add [rax - 0x39], cl; ret
0x0007eb72 : mov rsi, rbx; mov edi, [rip + 0x245775]; call rax
0x00063833 : add ebx, eax; nop cs:[rax + rax]; add rax, 3; ret
0x00074191 : add eax, [rax]; add [rcx + rdi*2 - 0x7d], dh; ret
0x00030b87 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x00067ebf : movzx ecx, [rsp - 0x15]; mov [r8 + 0x23], cl; ret
0x00030cda : movq [rdi], mm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x0002af90 : movq [rdi + 0xf], mm0; movdqu xmm[rdi], xmm1; ret
0x0002b150 : movq [rdi + 0xb], mm0; movdqu xmm[rdi], xmm1; ret
0x000363ac : add [rax], al; mov esi, 2; mov rdi, r13; call rbx
0x0003dc54 : lea eax, [rsp + 0xa0]; mov [rsp], rax; call [rbx]
0x0002ed50 : mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x000315fc : add [rax], al; add [rax], al; lea rax, [rdi]; ret
0x0000e34c : add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x00061f52 : add [rbx + rcx + 0x5b], dh; pop rbp; pop r12; ret
0x000680a7 : lea edx, [rdx + rcx*4]; add eax, [rsi + rdx]; ret
0x0007eb73 : mov esi, ebx; mov edi, [rip + 0x245775]; call rax
0x000348f6 : neg edx; cmp [rsp - 0x68], 2; cmove eax, edx; ret
0x00030c9a : movq [rdi], mm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0003122b : mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x000717c7 : mov [rbp - 0xb8], r9; mov edi, 0x6c21e0; call rax
0x00060890 : mov rax, [rdi + 0x48]; mov eax, [rax + 0x4c]; ret
0x00030570 : mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret
0x00060891 : mov eax, [rdi + 0x48]; mov eax, [rax + 0x4c]; ret
0x00001a51 : add [rax - 0x7d], cl; clc ; dec [rax - 0x77]; ret
0x000750d3 : mov [rdi], r8; shl r9, cl; mov [rdi - 8], r9; ret
0x00000c7e : pop rbp; mov rsi, rax; mov edi, 0x6c2c30; jmp rdx
0x0008fc35 : push rbp; add [rsi + 1], bh; mov edi, 1; call rax
0x00068a54 : sbb [rbx - 0x76b30005], bl; dec [rax - 0x77]; ret
0x0000ad67 : mov [rbx + 0x10], eax; mov rax, rbx; pop rbx; ret
0x000353a1 : mov rdi, rbx; mov edx, r12d; mov esi, 1; call rbp
0x0003105e : add [rax], al; mov [rdi], dh; lea rax, [rdi]; ret
0x0004d2ff : inc [rcx - 0x77]; sahf ; or [rax - 0x7d], cl; ret
0x000375d7 : add fs:[rax], al; add [rbp - 0x3dbaf02e], al; ret
0x00031313 : mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x000363bb : add [rax], al; mov esi, 1; mov rdi, r12; call rbx
0x0006d86f : mov [rbp - 0xd0], r9; mov edi, 0x6c21e0; call rax
0x00076263 : mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x000361f0 : add [rax], al; mov esi, 2; mov rdi, r15; call rbx
0x0000b468 : mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x00061258 : mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x00030b30 : movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x00042eb4 : add eax, [rax]; mov [rbx + 0x10], 0; pop rbx; ret
0x000751dd : mov [rdi], r8; shr r9, cl; mov [rdi + 8], r9; ret
0x00036287 : add [rax], al; mov esi, 1; mov rdi, r13; call rbx
0x0002edf0 : mov eax, [rcx]; mov [rdx], eax; mov rax, rdi; ret
0x0006740a : mov rax, -0x40; mov fs:[rax], 2; xor eax, eax; ret
0x000459d3 : mov rdx, r12; mov rsi, r14; mov rdi, rbx; call rbp
0x00036203 : add [rax], al; add [rcx + rcx*4 - 9], cl; call rbx
0x00003093 : mov [rbp - 0x88], rcx; mov edi, 0x6c3140; call rax
0x00067c0d : add [rax], al; add [rax + 0x6b], bh; syscall ; ret
0x0006d870 : mov [rbp - 0xd0], ecx; mov edi, 0x6c21e0; call rax
0x00045791 : mov esi, esi; mov rdi, r13; mov rdx, r12; call rbp
0x0004206e : add [rax - 0x7d], cl; rol [rcx + rcx*2], 0x39; ret
0x0002b46e : add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret
0x0008a934 : mov edx, ebp; mov rsi, r12; mov edi, ebp; call rax
0x0000de4b : mov [rbx + 8], rdx; movzx eax, [rax]; pop rbx; ret
0x00039d80 : xor edx, edx; add eax, 2; mov [rsp], eax; call rbx
0x00045462 : mov ebx, esi; add rbx, rax; mov rdi, rbx; call rbp
0x00067c2d : add [rax], al; add [rax + 0x6c], bh; syscall ; ret
0x0006432a : mov ecx, edi; mov rsi, r14; mov rdi, r12; call rbp
0x0000de4c : mov [rbx + 8], edx; movzx eax, [rax]; pop rbx; ret
0x00003094 : mov [rbp - 0x88], ecx; mov edi, 0x6c3140; call rax
0x0008cbc6 : add [rax], al; mov [rbx + 0x20], rax; pop rbx; ret
0x000454a0 : mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x0008a933 : mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax
0x0000e451 : add edi, [rax + 1]; pop rbx; pop rbp; pop r12; ret
0x0006d74e : mov [rbp - 0xb0], ecx; mov edi, 0x6c21e0; call rax
0x000375d9 : add [rax], al; test edx, edx; cmovne eax, edx; ret
0x000313ae : movq [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret
0x00044f2b : mov rax, [rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x00061efe : add [rsi - 1], bh; mov rdi, r15; call [rax + 0x18]
0x000717c8 : mov [rbp - 0xb8], ecx; mov edi, 0x6c21e0; call rax
0x000361f4 : add [rax], al; add [rcx + rcx*4 - 1], cl; call rbx
0x000459d4 : mov edx, esp; mov rsi, r14; mov rdi, rbx; call rbp
0x0007477b : mov [rsp + 0x18], esi; mov edi, 0x6c21e0; call rax
0x000751de : mov [rdi], eax; shr r9, cl; mov [rdi + 8], r9; ret
0x0000e84d : push rax; xor [rbx - 0x198a0008], al; pop rbx; ret
0x0002b2ae : add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret
0x00045461 : mov rbx, rsi; add rbx, rax; mov rdi, rbx; call rbp
0x0006d7be : mov [rbp - 0xa0], edx; mov edi, 0x6c21e0; call rax
0x00067c1d : add [rax], al; add [rax + 0x68], bh; syscall ; ret
0x0000dc85 : mov [rbx + 8], eax; movzx eax, [rdx]; pop rbx; ret
0x0000dc84 : mov [rbx + 8], rax; movzx eax, [rdx]; pop rbx; ret
0x0000d1ee : add [rsi - 1], bh; mov rdi, rbx; call [rax + 0x18]
0x0008fbab : add [rax], al; mov rax, rbx; pop rbx; pop rbp; ret
0x00056328 : xchg eax, ebp; or al, 0; add [rax - 0x7d], cl; ret
0x000454a1 : mov edx, esp; mov rsi, rbx; mov rdi, r14; call rbp
0x0000c6fe : add [rdx + 2], bh; mov rdi, r12; call [rax + 0x48]
0x000714b0 : mov [rbx], 0; or [rip + 0x2509f3], 1; pop rbx; ret
0x0008f7be : sbb al, [rax]; add [rax], al; mov edi, 1; call r14
0x00045790 : mov rsi, r14; mov rdi, r13; mov rdx, r12; call rbp
0x0007477a : mov [rsp + 0x18], rsi; mov edi, 0x6c21e0; call rax
0x0003f3ba : push rbp; add [rcx], dh; ror [rax + 0x39], cl; ret
0x0000617b : mov [rax + 8], rdx; pop rbx; pop rbp; pop r12; ret
0x0008fbb8 : add [rax], al; xor eax, eax; pop rbx; pop rbp; ret
0x00044f2c : mov eax, [rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x0000e896 : add [rax], al; sub r8, rcx; lea eax, [r8 - 1]; ret
0x000728ea : mov [rcx + rcx*4 - 0x10], 0x41; call [rdi + rax*8]
0x00067838 : adc [r8 + r9*4 + 0x63], al; adc cl, [rax + 1]; ret
0x0000bcf5 : add [rsi - 1], bh; mov rdi, rbp; call [rax + 0x18]
0x000750d4 : mov [rdi], eax; shl r9, cl; mov [rdi - 8], r9; ret
0x0000617c : mov [rax + 8], edx; pop rbx; pop rbp; pop r12; ret
0x00002ca9 : mov [rbp - 0x88], ecx; mov edi, 0x6c42a0; call rax
0x000009a9 : add [rax], eax; add [rbx + 0x5d], bl; pop r12; ret
0x00030cfa : movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0008cb42 : add [rax], al; mov [rbx + 0x18], rax; pop rbx; ret
0x000454bb : mov rdx, r12; mov rsi, r15; mov rdi, rbx; call rbp
0x0000c33d : add [rdx + 2], bh; mov rdi, rbx; call [rax + 0x48]
0x00002ca8 : mov [rbp - 0x88], rcx; mov edi, 0x6c42a0; call rax
0x000762d2 : add [rax], eax; add [rax], al; mov [rdx], ecx; ret
0x000454bc : mov edx, esp; mov rsi, r15; mov rdi, rbx; call rbp
0x0003f10a : mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r12
0x0003fabb : mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r15
0x0003c8e9 : mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x0000d930 : xor [r8 - 0x77], cl; and [r9 + 0x5bc03113], cl; ret
0x00070190 : adc [rax + 0x48004704], ah; mov [rax + 8], edx; ret
0x00037231 : sbb [rax], ah; add [rax], al; pop rbx; pop rbp; ret
0x000359a5 : mov edi, [rsp + 8]; mov rax, [rsp + 0x10]; call rax
0x00063df0 : lea rsi, [rsp + 0x40]; lea rcx, [rax + 4]; call rbx
0x0005aea9 : add [rax], al; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00076123 : mov [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret
0x0005bb69 : add [rax], al; mov rdx, [rax*8 + 0x4a88c0]; jmp rdx
0x0003de43 : mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x0003c8ea : mov edi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x0003fabc : mov edi, [rsp + 0x48]; mov [rsp + 8], eax; call r15
0x0003f10b : mov edi, [rsp + 0x48]; mov [rsp + 8], eax; call r12
0x00037ac4 : mov eax, 5; pop rbx; pop r12; pop r13; pop rbp; ret
0x0007ec40 : mov rdx, [rbx + 0x18]; mov [rdx], rax; pop rbx; ret
0x0007ec41 : mov edx, [rbx + 0x18]; mov [rdx], rax; pop rbx; ret
0x0006dbe1 : mov [rdi + 0x2ec], edx; mov [rdi + 0x300], rax; ret
0x00040419 : mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call r14
0x000305af : add [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret
0x00044f7e : add [rax], al; mov rax, -0x20; add rax, fs:[0]; ret
0x0000a100 : add [rcx + rcx*4 - 0xe], cl; mov rdi, rbx; call rax
0x0005bb26 : mov [rdx], cs; mov rdx, [rax*8 + 0x4a89c0]; jmp rdx
0x00063843 : add eax, ebx; nop cs:[rax + rax]; xor rax, rax; ret
0x0005baca : mov [rdx], cs; mov rdx, [rax*8 + 0x4a8ac0]; jmp rdx
0x0000e803 : push [rbx + rax - 0x7d]; and ebp, edi; pop rbx; ret
0x0000a0ff : add [rax], al; mov rdx, r14; mov rdi, rbx; call rax
0x0007e733 : push [rdx + rcx + 0x48]; mov eax, edx; pop rbx; ret
0x0000e895 : add [rax], r8b; sub r8, rcx; lea eax, [r8 - 1]; ret
0x00044f5e : add [rax], al; mov rax, -0x28; add rax, fs:[0]; ret
0x000714b4 : add [rax], al; or [rip + 0x2509f3], 1; pop rbx; ret
0x0000df13 : mov edi, esp; lea r13, [rbp + 1]; call [rax + 0x18]
0x0003c1b2 : mov edi, [rsp + 0x38]; mov [rsp + 8], eax; call rbx
0x0003c2aa : mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r14
0x0003cbc9 : mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r15
0x00030a6d : add [rax], r8b; mov edx, [rsi]; mov [rdi], edx; ret
0x00014ccf : add bl, al; nop [rax]; mov [rip + 0x2ae74e], 0; ret
0x000031cd : add [rax], 0; add cl, ch; idiv bh; jmp [rsi + 0x2e]
0x00059d4e : dec [rcx + rcx*4 - 1]; sar rdx, 2; call [r9 + 0x38]
0x0003db6e : mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x0000e348 : mov [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret
0x0007ec61 : mov eax, [rbx + 0x18]; mov [rax], rdi; pop rbx; ret
0x0006b1b5 : pop rsp; pop r13; pop r14; mov eax, 1; pop r15; ret
0x0005bd3d : mov [rdx], cs; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0003de44 : mov edi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x0003db6f : mov edi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x00050c29 : pop rbx; pop rbp; pop r12; mov eax, 1; pop r13; ret
0x00025fc2 : movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0004041a : mov edi, [rsp + 0x50]; mov [rsp + 8], eax; call r14
0x0008f766 : push rbp; add [rsi + 0xa], bh; mov edi, 1; call rax
0x00044f3e : add [rax], al; mov rax, -0x18; add rax, fs:[0]; ret
0x0006b1b4 : pop r12; pop r13; pop r14; mov eax, 1; pop r15; ret
0x00069b4c : xchg eax, ebx; add al, 0; add [rax - 0x7d], cl; ret
0x00076124 : mov [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret
0x0003611b : add [rax], al; xor esi, esi; mov rdi, rbp; call rbx
0x0004490d : add r8b, bpl; pushfq ; sar ebx, 1; jmp [rsi + 0x66]
0x0000d9bb : push r8; add [rax], al; add [rax], al; pop rbx; ret
0x0003c1b1 : mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call rbx
0x000361a9 : add [rax], al; xor esi, esi; mov rdi, r15; call rbx
0x00036165 : add [rax], al; xor esi, esi; mov rdi, r13; call rbx
0x00060a26 : mov eax, 2; pop rbx; pop rbp; pop r12; pop r13; ret
0x0003e4e5 : mov [rsp + 8], esi; mov rsi, [rsp + 0x58]; call rax
0x0003cbca : mov edi, [rsp + 0x38]; mov [rsp + 8], eax; call r15
0x0003c2ab : mov edi, [rsp + 0x38]; mov [rsp + 8], eax; call r14
0x000359a4 : mov rdi, [rsp + 8]; mov rax, [rsp + 0x10]; call rax
0x000310d4 : add ecx, [rcx + 0x357890f]; lea rax, [rdi + 6]; ret
0x0002b5be : add [rax], al; movzx edx, [rsi]; mov [rdi], dl; ret
0x00030aad : add [rax], r8b; mov rdx, [rsi]; mov [rdi], rdx; ret
0x0008f6df : mov eax, 7; pop rbx; pop rbp; pop r12; pop r13; ret
0x0005a753 : add [rax], al; add [rbx - 0x116343], al; call [rax]
0x000892bd : pop r12; pop r13; pop r14; sar rax, 3; pop r15; ret
0x0009001f : add [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; call r15
0x0007ec60 : mov rax, [rbx + 0x18]; mov [rax], rdi; pop rbx; ret
0x0008fc38 : add [rax], eax; add [rax], al; mov edi, 1; call rax
0x00059ca9 : add [rax], al; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x0000aed0 : movzx eax, [rdx]; add rsp, 8; pop rbx; pop rbp; ret
0x00063df1 : lea esi, [rsp + 0x40]; lea rcx, [rax + 4]; call rbx
0x00036189 : add [rax], al; xor esi, esi; mov rdi, r14; call rbx
0x0000b68b : add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0000e844 : add [rax], al; add [rsi - 1], bh; call [rax + 0x30]
0x00036140 : add [rax], al; xor esi, esi; mov rdi, r12; call rbx
0x0000aec5 : movzx eax, [rax]; add rsp, 8; pop rbx; pop rbp; ret
0x0003ee4f : add al, ch; pop rbx; sub al, 0xfc; jmp [rsi + 0x66]
0x00009bc5 : add [rax], al; add [rsi - 1], bh; call [rax + 0x18]
0x0000df12 : mov rdi, r12; lea r13, [rbp + 1]; call [rax + 0x18]
0x0009001e : add [rax], al; mov rsi, r14; mov rdi, rbx; call r15
0x0000b68c : add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0002b54e : add [rax], al; movzx edx, [rsi]; mov [rdi], dx; ret
0x00060a3c : mov eax, 1; pop rbx; pop rbp; pop r12; pop r13; ret
0x0007ec55 : mov edx, [rdi + 0x30]; mov [rax], rdx; pop rbx; ret
0x0005bf72 : add [rax], al; mov rdx, [rax*8 + 0x4a86c0]; jmp rdx
0x0003c5ff : mov edi, [rsp + 0x48]; mov [rsp + 8], eax; call rbx
0x000892be : pop rsp; pop r13; pop r14; sar rax, 3; pop r15; ret
0x0007ec54 : mov rdx, [rdi + 0x30]; mov [rax], rdx; pop rbx; ret
0x00006ff9 : lea r9, [r15 + rax]; mov [rsp + 0x10], r9; call r13
0x0003c5fe : mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call rbx
0x0008f73e : push rbp; add [rsi + 0xa], bh; mov edi, 1; call r14
0x00030605 : add cl, [rbx + 0x42890541]; add eax, 0x8428d48; ret
0x00059f67 : add [rax], al; add [rbx - 0x110f43], al; call [rax]
0x00050b5a : pop rbp; pop r12; pop r13; mov eax, 1; pop r14; ret
0x0006b153 : add [rax + 0xf4c3afa], eax; ror [rcx - 0x7d], 1; ret
0x0006408b : int1 ; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x0001570e : pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax
0x0009001d : add [rax], r8b; mov rsi, r14; mov rdi, rbx; call r15
0x00013828 : xor [rcx + rcx*4 + 0x5c], al; and al, 0x28; call rax
0x00044fee : add [rdx], al; add [rax], al; mov fs:[rax], rdx; ret
0x000361f3 : add al, [rax]; add [rax], al; mov rdi, r15; call rbx
0x000334b0 : mov eax, [r9 + 4]; add rsp, 8; pop rbx; pop rbp; ret
0x00015a8c : lea ecx, [rdx - 8]; cmovne rax, rcx; add rsp, 8; ret
0x000247ef : add al, 8; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x0007e531 : add [rcx], cl; add [rax], al; add [rax - 1], bh; ret
0x00073bed : add [rcx - 0x73], al; pop rsi; dec [rax + 0x63]; ret
0x00059c5a : mov edx, [rax*8 + 0x4a8bc0]; mov r14d, 0x10; jmp rdx
0x00007090 : mov rdx, [rsp]; mov rsi, r14; mov rdi, r12; call r13
0x0000d931 : xor [rax - 0x77], cl; and [r9 + 0x5bc03113], cl; ret
0x00060e70 : add [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret
0x0002b4e4 : mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x00059c59 : mov rdx, [rax*8 + 0x4a8bc0]; mov r14d, 0x10; jmp rdx
0x0006234f : mov eax, [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret
0x00070087 : mov rdi, [rsp + 0x38]; mov r9, [rsp + 0x30]; call r9
0x0000a6d1 : add [rax - 1], bh; add rsp, 8; pop rbx; pop rbp; ret
0x0008a970 : mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x0007362b : mov rsp, rbx; mov rbx, [rsp]; add rsp, 0x30; jmp r11
0x0006b152 : add [rax + 0xf4c3afa], rax; ror [rcx - 0x7d], 1; ret
0x000363af : add al, [rax]; add [rax], al; mov rdi, r13; call rbx
0x0003afb5 : add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x0001750c : add [rax], 0; add cl, ch; idiv rdi; jmp [rsi + 0x2e]
0x00076301 : add al, [rax]; add [rax], al; add [rax + 1], bh; ret
0x00091b6b : xor [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x00070088 : mov edi, [rsp + 0x38]; mov r9, [rsp + 0x30]; call r9
0x0007bfe0 : pop r12; pop r13; pop r14; pop r15; fmulp st(1); ret
0x000088ff : mov al, dh; add [rax], al; add [rax - 0x77], cl; ret
0x00030a60 : mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; ret
0x0008cd44 : mov edx, [rip + 0x2377a6]; add [rdx + rax*2], 1; ret
0x000031ce : add [rax], al; add cl, ch; idiv bh; jmp [rsi + 0x2e]
0x00015a8b : lea rcx, [rdx - 8]; cmovne rax, rcx; add rsp, 8; ret
0x0008f7bb : push rbp; add [rsi + 0x1a], bh; mov edi, 1; call r14
0x0006e04c : call [rip + 0x253e86]; xor eax, eax; add rsp, 8; ret
0x0000bdcb : push rax; add ecx, ebp; sar esi, -1; jmp [rsi + 0xf]
0x0007492b : add [rax], 0; add [rax], al; mov rax, [rax + 8]; ret
0x00006ffa : lea ecx, [rdi + rax]; mov [rsp + 0x10], r9; call r13
0x0007018f : adc [rax + 0x48004704], spl; mov [rax + 8], edx; ret
0x000423fb : add [rax], al; add [rax], al; add [rax + 1], bh; ret
0x0001426b : adc [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x0003627b : add al, [rax]; add [rax], al; mov rdi, r14; call rbx
0x0007ecb3 : mov rdx, [rdi + 0x448]; mov [rax], rdx; pop rbx; ret
0x0007362c : mov esp, ebx; mov rbx, [rsp]; add rsp, 0x30; jmp r11
0x0000d9bc : push rax; add [rax], al; add [rax], al; pop rbx; ret
0x00037ac8 : add [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret
0x0007ecb4 : mov edx, [rdi + 0x448]; mov [rax], rdx; pop rbx; ret
0x0002ad4d : add [rax], al; add [rbx + 0x5789fc56], cl; cld ; ret
0x000346e9 : add [rsi], dl; add [rax], al; add [rax - 1], bh; ret
0x0003663c : add al, [rax]; add [rax], al; mov rdi, r12; call rbx
0x00007091 : mov edx, [rsp]; mov rsi, r14; mov rdi, r12; call r13
0x0008cd43 : mov rdx, [rip + 0x2377a6]; add [rdx + rax*2], 1; ret
0x00067839 : adc [rax + rcx*4 + 0x63], al; adc cl, [rax + 1]; ret
0x0005fd8b : add [rax], eax; add [rax], al; mov rdi, rbx; call r8
0x0008a971 : mov edx, ebp; mov rsi, r12; mov edi, ebp; call [rbx]
0x0000f0cb : add [rax], al; add [rax], al; add [rax - 1], bh; ret
0x00033dfc : add [rax], eax; add [rax], al; pop rbx; pop rbp; ret
0x0003316b : add [rax], al; add [rax], al; add [rcx + 1], cl; ret
0x0007bfe1 : pop rsp; pop r13; pop r14; pop r15; fmulp st(1); ret
0x000620dc : add [rax], eax; add [rsi - 1], bh; call [rax + 0x18]
0x0000f1fa : mov [rip + 0x2b41a0], 0; mov [rip + 0x2b4199], 0; ret
0x00050a1b : mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0008dde9 : mov [rip + 0x23672f], 8; mov [rip + 0x236729], 8; ret
0x0000a35e : mov eax, [rbx + 0x40]; mov [rsp], rax; call [r15 + 8]
0x0004679d : xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret
0x00074ee5 : mov eax, esp; pop r12; pop r13; pop r14; pop r15; ret
0x00035c16 : add [rax], al; mov rsi, [rbx]; mov rdi, r12; call rbp
0x0002b3ef : movdqu xmm[rdi + 5], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b5af : movdqu xmm[rdi + 1], xmm0; movdqu xmm[rdi], xmm1; ret
0x00064669 : pop rbp; mov rax, r12; pop r12; pop r13; pop r14; ret
0x00037741 : add [rax + 0xca], bh; syscall ; pop rdx; pop rsi; ret
0x00067847 : pop rbp; pop r12; pop r13; mov rax, r14; pop r14; ret
0x000911a7 : mov rdi, rbx; mov rsi, [r15 + r14*8 + 0x10]; call rbp
0x00061f81 : mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x0005983e : add [rbx - 0x1e], cl; mov rdx, r12; call [rax + 0x38]
0x00060184 : mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret
0x000607d7 : pop rbx; mov rax, rbp; pop rbp; pop r12; pop r13; ret
0x0003164c : add [rax], al; add [rax], al; lea rax, [rdi + 5]; ret
0x00001b68 : mov rax, rcx; pop rbx; pop rbp; pop r12; pop r13; ret
0x00001401 : mov edi, [rsp + 0xc]; mov rax, [rsp + 0x18]; call rax
0x00044f2a : mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x0003f3d4 : mov cs, ebx; add al, [rax]; add [rax + 0x29], cl; ret
0x0003167c : add [rax], al; add [rax], al; lea rax, [rdi + 9]; ret
0x00030a61 : mov ecx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; ret
0x0000d9e4 : mov rax, [rdi + 0xd8]; mov rax, [rax + 0x18]; jmp rax
0x000233cc : add [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret
0x00061d69 : pop r12; pop r13; sub rax, r14; pop r14; pop r15; ret
0x00036b9d : add eax, [rax]; add [rax], al; mov rdi, r12; call rbx
0x0003160c : add [rax], al; add [rax], al; lea rax, [rdi + 1]; ret
0x00014281 : add [rax + rax], cl; add [rax], al; xor eax, eax; ret
0x000363be : add [rax], eax; add [rax], al; mov rdi, r12; call rbx
0x0003163c : add [rax], al; add [rax], al; lea rax, [rdi + 4]; ret
0x0002b29f : movdqu xmm[rdi + 8], xmm0; movdqu xmm[rdi], xmm1; ret
0x00014cce : add r11b, al; nop [rax]; mov [rip + 0x2ae74e], 0; ret
0x0000a4c7 : add [rbx - 0x3b7cb7fe], cl; sub [rbx + 0x5d], bl; ret
0x0002b4e5 : mov ecx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x00008984 : mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0000f884 : mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret
0x00088266 : lea rbx, [rdx + rax]; mov [rsp + 0x90], rbx; call r12
0x00037a9f : xor eax, eax; pop rbx; pop r12; pop r13; pop rbp; ret
0x00001cff : sub eax, [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret
0x0003161c : add [rax], al; add [rax], al; lea rax, [rdi + 2]; ret
0x0004fe65 : sub dh, al; add [rip - 0x71817], ch; jmp [rsi - 0x70]
0x00017851 : movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0003ee4e : add r8b, bpl; pop rbx; sub al, 0xfc; jmp [rsi + 0x66]
0x00024920 : movzx eax, [rdi]; movzx ecx, [rsi]; sub eax, ecx; ret
0x00063d62 : lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx
0x00015a9e : add [rax], al; lea rax, [rdx - 0x10]; add rsp, 8; ret
0x0000a5d7 : mov eax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x000210f6 : movabs al, es:[0x91148b81048b0007]; sub eax, edx; ret
0x0000dbd3 : mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x0004facd : sub dh, al; add [rip - 0xa8d17], ch; jmp [rsi + 0x2e]
0x0000a35d : mov rax, [rbx + 0x40]; mov [rsp], rax; call [r15 + 8]
0x0008fd19 : mov edi, [rbp - 8]; mov rbp, [rbp]; mov rsp, rcx; ret
0x0003628b : add [rax], al; add [rcx + rcx*4 - 0x11], cl; call rbx
0x000363bf : add [rax], al; add [rcx + rcx*4 - 0x19], cl; call rbx
0x0003aa49 : add [rsi + 0x43bab0], bh; mov edi, 0x6c4220; call rax
0x0000df90 : mov rax, [rdi + 0xd8]; mov rax, [rax + 0x40]; jmp rax
0x0002b53f : movdqu xmm[rdi + 2], xmm0; movdqu xmm[rdi], xmm1; ret
0x0003ae88 : pop rbp; pop r12; pop r13; xor eax, eax; pop r14; ret
0x0002b45f : movdqu xmm[rdi + 4], xmm0; movdqu xmm[rdi], xmm1; ret
0x0000dbd4 : mov edi, ebx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x0000c140 : add [rax], al; ror [rdi + 0x49], 0; call [rax + 0x20]
0x00036648 : add [rax], eax; add [rax], al; mov rdi, rbp; call rbx
0x0007e8cb : add [rsi + 0x47ebd0], bh; mov edi, 0x6c4640; call rax
0x00067b1b : mov eax, ebp; pop rbx; pop r12; pop r13; pop rbp; ret
0x0003166c : add [rax], al; add [rax], al; lea rax, [rdi + 8]; ret
0x00036bf4 : add eax, [rax]; add [rax], al; mov rdi, r13; call rbx
0x0000a5d6 : mov rax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x00010d2d : add [rax], al; add [rax - 0x7f], cl; jmp [rax + 0x18]
0x00063beb : sub eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret
0x0000d34c : mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret
0x0000da54 : mov edi, ebx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x00090538 : xor [rbp + 0x25], dh; mov rax, [rdx]; add rsp, 8; ret
0x0004cd15 : sub dh, al; add [rip - 0x1ae17], ch; jmp [rsi - 0x70]
0x0002b37f : movdqu xmm[rdi + 6], xmm0; movdqu xmm[rdi], xmm1; ret
0x0000f1e1 : add [rdi], cl; test [rdx + rax], ebp; add bl, dh; ret
0x0000f885 : mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret
0x000013ae : mov esi, [rsp + 0x10]; mov edi, [rsp + 0xc]; call r13
0x0003165c : add [rax], al; add [rax], al; lea rax, [rdi + 6]; ret
0x000711be : mov [rbp + 0x10], rax; pop rbx; pop rbp; pop r12; ret
0x000744f3 : add [rbp + 0xa], dh; xor eax, eax; add rsp, 0x58; ret
0x0000de36 : add [rbx + 0x48], dl; mov ebx, edi; call [rax + 0x20]
0x000334b1 : mov eax, [rcx + 4]; add rsp, 8; pop rbx; pop rbp; ret
0x000470d6 : add [rbx - 0x16], cl; mov rdx, r13; call [rax + 0x38]
0x0001750d : add [rax], al; add cl, ch; idiv rdi; jmp [rsi + 0x2e]
0x0003628a : add [rax], eax; add [rax], al; mov rdi, r13; call rbx
0x0008e162 : add [rax], al; add [rcx - 0x80], al; call [rax + 0xf]
0x0000da53 : mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x00088267 : lea ebx, [rdx + rax]; mov [rsp + 0x90], rbx; call r12
0x0007e85c : xor edx, edx; pop rbx; div rbp; pop rbp; pop r12; ret
0x00036c74 : add eax, [rax]; add [rax], al; mov rdi, r14; call rbx
0x00063587 : pop rbp; pop r12; pop r13; mov eax, edx; pop r14; ret
0x00031070 : mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 1]; ret
0x0001cac5 : inc bl; mov [rdi], ecx; mov [rdi + rdx - 4], ecx; ret
0x0005f580 : add [rax], eax; add [rax], al; mov rdi, rbx; call rax
0x00001b69 : mov eax, ecx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0003162c : add [rax], al; add [rax], al; lea rax, [rdi + 3]; ret
0x00060c08 : pop rbp; sub rax, r14; pop r14; pop r15; pop rbp; ret
0x0002b4cf : movdqu xmm[rdi + 3], xmm0; movdqu xmm[rdi], xmm1; ret
0x00018c00 : movzx ecx, [rsi]; movzx eax, [rdi]; sub eax, ecx; ret
0x00068460 : lea esp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x000676f2 : mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret
0x00061d6a : pop rsp; pop r13; sub rax, r14; pop r14; pop r15; ret
0x00030580 : mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x00036d74 : add eax, [rax]; add [rax], al; mov rdi, r15; call rbx
0x0000df91 : mov eax, [rdi + 0xd8]; mov rax, [rax + 0x40]; jmp rax
0x000337fe : add [rbx + 0x25], bl; add ah, bh; add eax, [rax]; ret
0x0003ae18 : xchg eax, esp; add eax, [rax]; mov rdi, rbx; call r14
0x00060c07 : pop r13; sub rax, r14; pop r14; pop r15; pop rbp; ret
0x0008fd18 : mov r15, [rbp - 8]; mov rbp, [rbp]; mov rsp, rcx; ret
0x0006845f : lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x0002b30f : movdqu xmm[rdi + 7], xmm0; movdqu xmm[rdi], xmm1; ret
0x0000ad1c : add [rbx - 0x3d], bl; nop ; mov rax, -1; pop rbx; ret
0x00074ee4 : mov rax, r12; pop r12; pop r13; pop r14; pop r15; ret
0x0002b22f : movdqu xmm[rdi + 9], xmm0; movdqu xmm[rdi], xmm1; ret
0x000911a8 : mov edi, ebx; mov rsi, [r15 + r14*8 + 0x10]; call rbp
0x00063bea : sub rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret
0x000013ad : mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; call r13
0x000710cc : adc ebx, [rbx + 0x5d]; pop r12; pop r13; pop r14; ret
0x00008983 : mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x00036202 : add [rax], eax; add [rax], al; mov rdi, r14; call rbx
0x0007492c : add [rax], al; add [rax], al; mov rax, [rax + 8]; ret
0x00061a29 : mov es, edx; add [rax], al; add [rax + 0x39], cl; ret
0x0000d9e5 : mov eax, [rdi + 0xd8]; mov rax, [rax + 0x18]; jmp rax
0x00001bde : pop rbx; pop rbp; pop r12; mov rax, rcx; pop r13; ret
0x0001c4a0 : movzx eax, [rdi]; movzx edx, [rsi]; sub eax, edx; ret
0x000711bf : mov [rbp + 0x10], eax; pop rbx; pop rbp; pop r12; ret
0x0000e7f4 : mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x30]
0x000629a2 : add [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret
0x00030b57 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], cx; ret
0x0003cb6a : push rbp; add [rcx + rcx*4 - 0x1a], cl; call [r15 + 8]
0x00033508 : add [rbx + 0x49], bl; lea eax, [rcx + 1]; pop rbp; ret
0x0006387f : add [rax - 0x39], cl; rol [rbx], 0; add [rax], al; ret
0x0007e750 : add [rip + 0x48000000], al; mov eax, edx; pop rbx; ret
0x00061e91 : mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x00087b82 : lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x000422bb : mov esi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x00042398 : mov esi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x000422ba : mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x00042397 : mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x0006214f : mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x00039b74 : mov rdi, [rax + 0x18]; mov [rbp - 0x68], rax; call rcx
0x0000963f : mov ebp, [rdi + 0x98]; mov rdi, rbp; call [rbp + 0x20]
0x00008a57 : add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0002ed52 : add [rax - 0x77], ecx; add cl, [rax - 0x77]; clc ; ret
0x0000e7f5 : mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x30]
0x00063d63 : lea ecx, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx
0x00074dd5 : pop rsp; pop r13; cqo ; pop r14; idiv r9; pop r15; ret
0x0006386f : add [rax - 0x39], cl; rol [rdx], 0; add [rax], al; ret
0x0006f239 : mov [rbp - 0x110], r8; mov [rbp - 0xe0], r11; call rsi
0x000638af : add [rax - 0x39], cl; rol [rsi], 0; add [rax], al; ret
0x00010136 : sbb [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x00031071 : mov edx, [rsi]; mov [rdi], dx; lea rax, [rdi + 1]; ret
0x00049bfa : lea ecx, [rsi + rdx]; add rdx, rbx; call [r11 + rax*8]
0x0008fc79 : mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; leave ; ret
0x00087d8c : lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x80]; call rbp
0x0001ce8b : xor [rbx + rcx*4 + 0x76], cl; cmp [rax + 0xf], cl; ret
0x00087ffd : mov [rsp + 0x70], r13; lea rdi, [rsp + 0x70]; call rbp
0x0000d34b : mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret
0x00073659 : mov rsi, [rdi + 0x20]; mov rdi, [rdi + 0x28]; call r11
0x0006cc07 : mov edi, [rsp + 0x28]; mov r12, r14; call [rbx + 0x40]
0x00030ac0 : mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; ret
0x0000d9b2 : mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x00091e38 : mov r8, [rax]; add rax, 8; mov [rbx], r8; pop rbx; ret
0x00039b75 : mov edi, [rax + 0x18]; mov [rbp - 0x68], rax; call rcx
0x0003f09a : push rbp; add [rcx + rcx*4 - 0x1a], cl; call [r14 + 8]
0x000090b7 : add [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret
0x00013a0c : mov [rsp + 0x20], eax; mov [rsp + 0x10], rcx; call rdx
0x00074dd4 : pop r12; pop r13; cqo ; pop r14; idiv r9; pop r15; ret
0x0000bf8c : mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x00009e61 : mov edi, [rbx + 0x98]; mov rdi, r15; call [r15 + 0x20]
0x0006385f : add [rax - 0x39], cl; rol [rcx], 0; add [rax], al; ret
0x00049bf9 : lea rcx, [r14 + rdx]; add rdx, rbx; call [r11 + rax*8]
0x0000a55c : mov eax, [rax + 0x140]; mov rax, [rax + 0x20]; jmp rax
0x0000e7c9 : add bl, ch; xchg eax, esi; nop [rax]; mov rax, -1; ret
0x0005c1fd : lea ecx, [rsi + rdx]; add rdx, r12; call [r11 + rax*8]
0x0008fc7a : mov esi, [rbp - 0x10]; mov r15, [rbp - 8]; leave ; ret
0x0004a73d : mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x000087a6 : mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x000745cc : add [rbp + 0x11], dh; xor eax, eax; add rsp, 0x78; ret
0x000638bf : add [rax - 0x39], cl; rol [rdi], 0; add [rax], al; ret
0x00047f2b : mov rdx, [r13 + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x00033cf2 : add [rax + 0x10], 1; add rsp, 8; pop rbx; pop rbp; ret
0x0006cc06 : mov rdi, [rsp + 0x28]; mov r12, r14; call [rbx + 0x40]
0x0001426a : adc [r11 + 0x5d], r11b; pop r12; pop r13; pop r14; ret
0x00030581 : mov eax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x00087d8d : lea esi, [rsp + 0xa0]; lea rdi, [rsp + 0x80]; call rbp
0x00067b1a : mov eax, r13d; pop rbx; pop r12; pop r13; pop rbp; ret
0x00047a3b : inc [rbx - 0x2e7cfe08]; inc [rax - 0x4dd43]; jmp [rax]
0x00044f03 : mov [rcx], rax; mov rax, -0x20; mov fs:[rax], rdx; ret
0x00038f1f : sub [rax], al; mov [rip + 0x28bd78], r8d; pop rbx; ret
0x00061e92 : mov eax, [rdi + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x00008dae : mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x68]
0x0000a55b : mov rax, [rax + 0x140]; mov rax, [rax + 0x20]; jmp rax
0x0007365a : mov esi, [rdi + 0x20]; mov rdi, [rdi + 0x28]; call r11
0x0002edd2 : add [rsi - 0x77], esp; add cl, [rax - 0x77]; clc ; ret
0x0000e2cb : mov eax, [rdi + 0xd8]; mov rbx, rdi; call [rax + 0x60]
0x0005a089 : mov rdx, r9; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x0000bf8b : mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x00049291 : mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x0006e0fe : add eax, [rax]; add [rax + rcx*2], al; add esp, 8; ret
0x0004ec8b : xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret
0x0006515c : add [rax], al; nop ; add rsp, 8; pop rbx; pop rbp; ret
0x000087a5 : mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x0005c1fc : lea rcx, [r14 + rdx]; add rdx, r12; call [r11 + rax*8]
0x000673be : mov [rax + 0x20], 0; mov [rax + 0x28], 0; pop rbx; ret
0x0009055d : add [rax], al; add [rax - 0x80], al; call [rax + 0x75]
0x00087b83 : lea esi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x000900e1 : sbb ecx, ecx; cmp [rsi + 8], rdi; cmovbe eax, ecx; ret
0x0006269f : add [rax - 0x7b], cl; div [rbp + 4]; xor rax, rax; ret
0x00037ac7 : add [rax], al; pop rbx; pop r12; pop r13; pop rbp; ret
0x00087f6b : lea rsi, [rsp + 0xe0]; lea rdi, [rsp + 0x90]; call r12
0x00030ac1 : mov ecx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; ret
0x000620da : add [rax + 1], 0; add [rsi - 1], bh; call [rax + 0x18]
0x00087f6c : lea esi, [rsp + 0xe0]; lea rdi, [rsp + 0x90]; call r12
0x00044f04 : mov [rcx], eax; mov rax, -0x20; mov fs:[rax], rdx; ret
0x00030a80 : mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; ret
0x0000963e : mov rbp, [rdi + 0x98]; mov rdi, rbp; call [rbp + 0x20]
0x00047f2c : mov edx, [rbp + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x00009e60 : mov r15, [rbx + 0x98]; mov rdi, r15; call [r15 + 0x20]
0x00008dad : mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x68]
0x00087ffe : mov [rsp + 0x70], ebp; lea rdi, [rsp + 0x70]; call rbp
0x0000e2ca : mov rax, [rdi + 0xd8]; mov rbx, rdi; call [rax + 0x60]
0x0006d508 : add [rax], eax; add [rbp - 0x7b], cl; jmp [rsi - 0x70]
0x00013a0b : mov [rsp + 0x20], rax; mov [rsp + 0x10], rcx; call rdx
0x0003136d : movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x0008fa96 : add bl, al; nop [rax + rax]; mov rax, [rdi + 0xa8]; ret
0x0005a08a : mov edx, ecx; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x0002af8f : movdqu xmm[rdi + 0xf], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b403 : mov ecx, [rsi]; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x00047b8c : mov edx, ecx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x0002b06f : movdqu xmm[rdi + 0xd], xmm0; movdqu xmm[rdi], xmm1; ret
0x0003134d : movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x0003138d : movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x0007493e : add [rax], al; mov rax, [rax + 8]; sub rax, fs:[0]; ret
0x00049292 : mov [rbp - 0x578], ecx; mov rdi, rbx; call [rax + 0x38]
0x00050c16 : mov [rdi], ebp; pop rbx; pop rbp; pop r12; pop r13; ret
0x0006f23a : mov [rbp - 0x110], eax; mov [rbp - 0xe0], r11; call rsi
0x00030cb9 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x0002b323 : mov ecx, [rsi]; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x00030bf7 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rcx; ret
0x00030cd9 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x0000d8f0 : sbb [r8 - 0x77], r9b; push rdi; mov [rdi + 8], rax; ret
0x0002b085 : mov ecx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0002ee14 : mov ax, [rcx + 4]; mov [rdx + 4], ax; mov rax, rdi; ret
0x00038c58 : add [rax], al; add bl, al; nop [rax]; xor eax, eax; ret
0x0002b1d4 : mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x0002b0df : movdqu xmm[rdi + 0xc], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b14f : movdqu xmm[rdi + 0xb], xmm0; movdqu xmm[rdi], xmm1; ret
0x000310e0 : mov rdx, [rsi]; mov [rdi], rdx; lea rax, [rdi + 7]; ret
0x00031623 : add al, bl; nop cs:[rax + rax]; lea rax, [rdi + 3]; ret
0x0002b084 : mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0003168c : add [rax], al; add [rax], al; lea rax, [rdi + 0xa]; ret
0x0002b1d5 : mov ecx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x000361c7 : dec [rcx + rcx*4 - 1]; mov edx, 4; mov esi, 1; call rbx
0x0001642b : add [rax], al; add [rax], al; add [rbp - 0x77], cl; ret
0x00013824 : mov [rsp + 0x30], rdx; mov [rsp + 0x28], r11d; call rax
0x00013825 : mov [rsp + 0x30], edx; mov [rsp + 0x28], r11d; call rax
0x00059eef : inc [rbx - 0x2e7cfe08]; inc [rbx - 0x110b43]; jmp [rax]
0x0002b0f5 : mov ecx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x0000a546 : sbb [rax], eax; add [rbx + 0x275fff8], al; pop rbx; ret
0x0002b014 : mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x000305b0 : mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x0002b015 : mov ecx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x0002b164 : mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x0002afa5 : mov ecx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x0002afa4 : mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x0007118b : add [rax], al; add [rax], al; add [rax + 0x29], cl; ret
0x0000d8f1 : sbb [rax - 0x77], cl; push rdi; mov [rdi + 8], rax; ret
0x000316ac : add [rax], al; add [rax], al; lea rax, [rdi + 0xc]; ret
0x0003c848 : add [rax], al; add [rcx], dh; ror [rax + 0x39], cl; ret
0x00030501 : mov eax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x0008fa36 : add bl, al; nop [rax + rax]; mov rax, [rdi + 0xa0]; ret
0x00015257 : add [rax - 0x77], cl; rcr [rbx + 0x5d], 1; pop r12; ret
0x0007edce : mov edx, [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret
0x000648cb : add [rax], al; add [rax], al; add [rax - 0x77], cl; ret
0x0005092e : xchg ebp, esi; add [rax], al; add [rax - 0x7d], cl; ret
0x0002b393 : mov ecx, [rsi]; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x0000f19f : mov [rip + 0x2b4202], rdx; add [rip + 0x2b41f7], 1; ret
0x00030500 : mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x0002b245 : mov ecx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x000714b5 : add [rbx + 0x2509f30d], al; add [rcx], al; pop rbx; ret
0x0008e5da : mov [rax], fs; add [rax], al; add [rax - 0x77], cl; ret
0x0000fbb8 : add [rax], al; add [rbx + 0x5d5b080b], al; pop r12; ret
0x0006515d : add [rsi - 0x70], ah; add rsp, 8; pop rbx; pop rbp; ret
0x0008bcfe : dec [rbx + rcx*4 + 0x3d]; fimul [rsi - 0x76b7ffdd]; ret
0x0003169c : add [rax], al; add [rax], al; lea rax, [rdi + 0xb]; ret
0x00050c15 : mov [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret
0x00030b86 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], ecx; ret
0x00033507 : add [rax], al; pop rbx; lea rax, [r9 + 1]; pop rbp; ret
0x0000c6fa : mov ecx, 3; mov edx, 2; mov rdi, r12; call [rax + 0x48]
0x00030c99 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x000316cc : add [rax], al; add [rax], al; lea rax, [rdi + 0xe]; ret
0x0002b1bf : movdqu xmm[rdi + 0xa], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b0f4 : mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x0002b165 : mov ecx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x00063967 : add [rax], eax; movzx esi, bl; mov rdi, [r12]; call rbp
0x0008f899 : sbb ch, al; shr [rcx + rdi*8], 1; dec [rax - 0x7d]; ret
0x000316bc : add [rax], al; add [rax], al; lea rax, [rdi + 0xd]; ret
0x00031090 : mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 3]; ret
0x0007edcd : mov rdx, [rsp + 0x18]; mov rax, rdx; add rsp, 0x38; ret
0x0000c339 : mov ecx, 3; mov edx, 2; mov rdi, rbx; call [rax + 0x48]
0x000477ac : mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x0007637f : inc [rcx + rbp - 0x40]; mov [rdx], eax; mov eax, 1; ret
0x000477ad : mov esi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x0008c928 : adc [rax - 0x77], cl; rcr [rbx + 0x5d], 1; pop r12; ret
0x0004a73e : mov [rbp - 0x530], ecx; mov rdi, rbx; call [rax + 0x38]
0x0008fa46 : add bl, al; nop [rax + rax]; mov rax, [rdi + 0xb8]; ret
0x0000f1a0 : mov [rip + 0x2b4202], edx; add [rip + 0x2b41f7], 1; ret
0x0008cae8 : mov rdx, [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret
0x0008b1db : add [rax], al; add [rax], al; add [rcx - 0x77], al; ret
0x0002afff : movdqu xmm[rdi + 0xe], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002ede6 : mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x0002ee04 : mov al, [rcx + 4]; mov [rdx + 4], al; mov rax, rdi; ret
0x0002b244 : mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x000437db : add [rax], al; add [rax], al; add [rax - 0x7d], cl; ret
0x000434dc : add [rax], al; add [rax - 0x7f], cl; call [rcx + rbx*4]
0x0008cae9 : mov edx, [rsp + 0x10]; mov rax, rdx; add rsp, 0x28; ret
0x00091e39 : mov eax, [rax]; add rax, 8; mov [rbx], r8; pop rbx; ret
0x000310e1 : mov edx, [rsi]; mov [rdi], rdx; lea rax, [rdi + 7]; ret
0x00047b8b : mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x0008fa3c : add [rax], al; add [rax], al; mov rax, [rdi + 0xa0]; ret
0x0008f604 : mov [rbx + 0x98], ecx; add rsp, 8; pop rbx; pop rbp; ret
0x000116db : mov [rbx + 0x14], eax; add rsp, 8; pop rbx; pop rbp; ret
0x00036638 : add [rax], al; add [rsi + 2], bh; mov rdi, r12; call rbx
0x00066d85 : lea esi, [rsi]; add al, [rax]; add [rax - 0x77], cl; ret
0x000361fa : call rbx; mov edx, 3; mov esi, 1; mov rdi, r14; call rbx
0x00006f75 : mov rdx, [rsp]; mov rsi, [r14]; mov rdi, [r12]; call r13
0x0002ee15 : mov eax, [rcx + 4]; mov [rdx + 4], ax; mov rax, rdi; ret
0x00073732 : adc al, ch; mov [rdi + 1], ch; add [rcx - 0x77], cl; ret
0x0008f99c : add [rax], al; add [rax], al; mov rax, [rdi + 0x90]; ret
0x0002b391 : push rsi; add cl, [rbx + 0x257890e]; mov [rdi], ecx; ret
0x0008d366 : mov rdx, -1; shl rdx, cl; or r8, rdx; mov [rsi], r8; ret
0x000308f9 : movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0000ed50 : mov [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret
0x0005fd87 : lea ecx, [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call r8
0x00036282 : call rbx; mov edx, 2; mov esi, 1; mov rdi, r13; call rbx
0x0000bbf0 : add rax, [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; ret
0x0002608f : movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003378c : add [rax], al; add [rax], al; xor eax, eax; pop rbx; ret
0x00036634 : call rbx; mov edx, 1; mov esi, 2; mov rdi, r12; call rbx
0x0008fa9c : add [rax], al; add [rax], al; mov rax, [rdi + 0xa8]; ret
0x0005c9da : mov edx, ecx; mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x00036286 : add [rax], al; add [rsi + 1], bh; mov rdi, r13; call rbx
0x00036273 : call rbx; mov edx, 3; mov esi, 2; mov rdi, r14; call rbx
0x0005fd86 : lea rcx, [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call r8
0x00030b56 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], cx; ret
0x0008f603 : mov [rbx + 0x98], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x0001c3bb : add [rax + rcx + 0x48], dh; lea eax, [rip + 0x852b]; ret
0x00030cf9 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0005a87f : mov rdx, rcx; mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x0000d8c0 : push rdi; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0000c2c2 : mov [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x0005a880 : mov edx, ecx; mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x000361fe : add [rax], al; add [rsi + 1], bh; mov rdi, r14; call rbx
0x00075147 : mov [rdi - 8], r8; shl r9, cl; mov [rdi - 0x10], r9; ret
0x0007e89e : pop rdx; and al, 0; add [rsi + 0x6c], 0; add rsp, 8; ret
0x0003e951 : mov esi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; call [r13]
0x0000ed51 : mov [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x0007ebc5 : add al, al; sub ebp, [rax + rax + 0x48]; add esp, 8; ret
0x0008fa8c : add [rax], al; add [rax], al; mov rax, [rdi + 0xb0]; ret
0x0003a9c3 : add eax, [rax]; add [rax], al; add [rax - 0x7d], cl; ret
0x0003596f : add [rax - 0x73], cl; push rbx; or [rax - 0x7d], cl; ret
0x00036277 : add [rax], al; add [rsi + 2], bh; mov rdi, r14; call rbx
0x00073430 : adc al, ch; mov dh, [rdx + 1]; add [rcx - 0x77], cl; ret
0x0000de35 : add [rax], al; push rbx; mov rbx, rdi; call [rax + 0x20]
0x0000bbf1 : add eax, [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; ret
0x0004a636 : add al, [rax]; add [rax - 0x4f743], al; call [rbx + 0xf]
0x00006f76 : mov edx, [rsp]; mov rsi, [r14]; mov rdi, [r12]; call r13
0x00074608 : add [rax], al; mov rax, [rsp + 0x48]; add rsp, 0x78; ret
0x0008d567 : leave ; movsxd rcx, [rdi + rcx*4]; add rcx, rdi; jmp rcx
0x0005a26b : dec [rcx + rcx*4 - 0xa]; mov rdi, r15; call [rax + 0x38]
0x0008fa2c : add [rax], al; add [rax], al; mov [rdi + 0x98], rsi; ret
0x000363ba : add [rax], al; add [rsi + 1], bh; mov rdi, r12; call rbx
0x0000c3bb : mov [rdi], eax; mov rax, [rdi + 0xd8]; call [rax + 0x48]
0x0008fa4c : add [rax], al; add [rax], al; mov rax, [rdi + 0xb8]; ret
0x00020ea1 : xchg eax, ecx; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0000edb6 : add [rax - 0x77], cl; fistp [rsi - 1]; call [rax + 0x18]
0x00061f8e : add [rax], al; mov rax, [rax + 0x140]; call [rax + 0x68]
0x000363a7 : call rbx; mov edx, 2; mov esi, 2; mov rdi, r13; call rbx
0x00047636 : dec [rcx + rcx*4 - 0xa]; mov rdi, rbx; call [rax + 0x38]
0x0000f13c : add [rax], al; add [rax], al; mov rax, [rdi + 0x68]; ret
0x000333ef : add [rbp + rcx*4 + 0x40], cl; add [rbp + 0x39], ecx; ret
0x000363ab : add [rax], al; add [rsi + 2], bh; mov rdi, r13; call rbx
0x0003e950 : mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; call [r13]
0x000313ad : movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x00075257 : mov [rdi + 8], r8; shr r9, cl; mov [rdi + 0x10], r9; ret
0x000361ef : add [rax], al; add [rsi + 2], bh; mov rdi, r15; call rbx
0x0005c9d9 : mov rdx, rcx; mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x000363b6 : call rbx; mov edx, 1; mov esi, 1; mov rdi, r12; call rbx
0x0007044a : add [rax], al; add cl, ch; cmp dh, 0xff; jmp [rsi + 0xf]
0x0002ee97 : mov eax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x0002ee76 : mov rax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x0002a9b7 : movq [rdi - 0x1b], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002adb7 : movq [rdi - 0x13], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002eda7 : mov eax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x000199f1 : add [rdi + rax + 0x48], dh; lea eax, [rip + 0x13d25]; ret
0x0002ee24 : mov eax, [rcx + 3]; mov [rdx + 3], eax; mov rax, rdi; ret
0x0001cf71 : add [rdi + rax + 0x48], dh; lea eax, [rip + 0x11f55]; ret
0x00075258 : mov [rdi + 8], eax; shr r9, cl; mov [rdi + 0x10], r9; ret
0x0001755e : add [rdi + rax + 0x48], dh; lea eax, [rip + 0x19e58]; ret
0x0000180a : pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; ret
0x00059a2e : mov esi, ebp; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x0002ee66 : mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x0002b401 : push rsi; add [rbx + 0x157890e], ecx; mov [rdi], ecx; ret
0x0006c974 : xchg [rdi], bl; add [rax], eax; add [rax - 0x77], cl; ret
0x0001c987 : add [rdx + 0x4262a0], bh; cmove rax, rdx; add rsp, 8; ret
0x00044f02 : mov fs:[rcx], rax; mov rax, -0x20; mov fs:[rax], rdx; ret
0x0002abb7 : movq [rdi - 0x17], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0005ab68 : dec [rcx + rcx*4 - 0xa]; mov rdi, r15; call [rax + r11*8]
0x00008546 : add [rcx], dh; test [rax - 0x77], 0xdf; call [rax + 0x10]
0x00030ad3 : mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x00059a2d : mov r14, r13; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x00049385 : dec [rcx + rcx*4 - 0x32]; mov rdi, rbx; call [rax + 0x38]
0x0002ee36 : mov eax, [rcx + 5]; mov [rdx + 5], eax; mov rax, rdi; ret
0x0002ee96 : mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x0005f57c : lea ecx, [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call rax
0x0005f57b : lea rcx, [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call rax
0x0002acb7 : movq [rdi - 0x15], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00079727 : pop rsp; pop r13; pop r14; mulsd xmm0, xmm0; pop r15; ret
0x0001c0d3 : add al, [rax]; add [rax + 1], cl; clc ; add rax, rcx; ret
0x000002f5 : pop rbx; pop r12; pop r13; pop r14; pop r15; pop rbp; ret
0x000017cd : add [rax], al; add [rax + 0xf], cl; scasd eax, [rdi]; ret
0x0002aab7 : movq [rdi - 0x19], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002ee56 : mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x0000c3d0 : add gs:[rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x00076936 : pop r12; pop r13; pop r14; mulss xmm0, xmm0; pop r15; ret
0x0007ea88 : pop rbx; xor esi, esi; mov edi, [rip + 0x24585f]; jmp rax
0x00014e1a : mov rsi, [rsp + 0x18]; pop rdx; pop rbx; pop rbp; jmp rax
0x0002aec7 : movq [rdi - 0x11], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aa37 : movq [rdi - 0x1a], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0008ccf2 : add [rcx], dh; ror [rax], cl; leave ; cmove rax, rdx; ret
0x00076937 : pop rsp; pop r13; pop r14; mulss xmm0, xmm0; pop r15; ret
0x0002ab37 : movq [rdi - 0x18], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0001c019 : add [rdx + 0x41bda0], bh; cmove rax, rdx; add rsp, 8; ret
0x0002ae47 : movq [rdi - 0x12], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002a937 : movq [rdi - 0x1c], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002eda6 : mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x0002ee77 : mov eax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x0002a817 : movq [rdi - 0x1e], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00026588 : pop rdi; adc [rdx + 8], dh; movaps xmm[rdi], xmm4; jmp r9
0x0002ac37 : movq [rdi - 0x16], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00030bf6 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rcx; ret
0x0002a8a7 : movq [rdi - 0x1d], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0007472d : add [rax], al; nop ; mov rax, fs:[0]; add rax, -0x10; ret
0x00058bb3 : xchg [rbx], esi; add al, [rax]; add [rax - 0x7d], cl; ret
0x0001d0fe : add al, [rax]; add [rbp + 7], dh; lea rax, [rip + 6]; ret
0x0002ee46 : mov eax, [rcx + 6]; mov [rdx + 6], eax; mov rax, rdi; ret
0x00031613 : add ebx, eax; nop cs:[rax + rax]; lea rax, [rdi + 2]; ret
0x000738d0 : inc [rcx + rcx*4 - 0x3e]; sub edx, ecx; mov eax, edx; ret
0x0002b321 : push rsi; add ecx, [rbx + 0x357890e]; mov [rdi], ecx; ret
0x0004de7a : mov rdx, r8; mov [rbp - 0xb0], r8; mov rdi, rbx; call rax
0x00030a92 : mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; ret
0x00071357 : mov rbp, -1; pop rbx; mov rax, rbp; pop rbp; pop r12; ret
0x00014e1b : mov esi, [rsp + 0x18]; pop rdx; pop rbx; pop rbp; jmp rax
0x0006523c : add [rax], al; mov rax, [rip + 0x25fb53]; add rsp, 8; ret
0x00031633 : add eax, ebx; nop cs:[rax + rax]; lea rax, [rdi + 4]; ret
0x00079726 : pop r12; pop r13; pop r14; mulsd xmm0, xmm0; pop r15; ret
0x00014cd3 : add [rax], 0; add [rax], al; mov [rip + 0x2ae74e], 0; ret
0x0002eeb6 : mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x0002eeb7 : mov eax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x00075148 : mov [rdi - 8], eax; shl r9, cl; mov [rdi - 0x10], r9; ret
0x0002a787 : movq [rdi - 0x1f], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00052280 : xchg [rcx], ebx; xor al, [rax]; add [rax - 0x7d], cl; ret
0x00091a5d : add [rax], al; add [rbx + 0x75c08507], cl; or dh, bl; ret
0x00031083 : mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x0008d4a3 : pop rax; add [rax], eax; add [rax - 0x7d], cl; call [rcx]
0x00030b85 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], ecx; ret
0x000375d5 : add [rax + 0x64], bh; test edx, edx; cmovne eax, edx; ret
0x000177bf : add al, [rax]; add [rbp + 7], dh; lea rax, [rip + 5]; ret
0x0002ad37 : movq [rdi - 0x14], mm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0004b856 : dec [rcx - 0x5377b]; inc [rbx - 0x7bf0fe40]; pop rdi; ret
0x00060a3b : sub [rax + 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret
0x0001c018 : add [r10 + 0x41bda0], dil; cmove rax, rdx; add rsp, 8; ret
0x0003c14d : mov rcx, rbx; mov rdx, [r13]; mov rsi, rbp; call [r15 + 8]
0x00061595 : mov [rdx], rcx; mov edx, [rax]; mov eax, edx; pop rbx; ret
0x0003c595 : mov rcx, rbp; mov rdx, [r12]; mov rsi, rbx; call [r14 + 8]
0x00015aab : add [rax], 0; add [rax], al; xor eax, eax; add rsp, 8; ret
0x0000bf8d : sbb eax, 0; add [rax], al; mov rdi, rbx; call [rax + 0x20]
0x00030ad4 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x000732b2 : mov ecx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x48; jmp r11
0x0003c14e : mov ecx, ebx; mov rdx, [r13]; mov rsi, rbp; call [r15 + 8]
0x0000ba56 : mov eax, ebp; sub rax, r12; pop r12; pop r13; pop r14; ret
0x000310b6 : mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 5]; ret
0x00002e7b : lea eax, [rdx]; add [rax], al; mov edi, 0x6c42a0; call rax
0x00090fa4 : mov rsi, [r14 + 8]; mov rdx, [r15]; mov rdi, rbx; call rbp
0x0000e3e6 : add [rcx + 0x48d231d1], cl; mov eax, [rax + 0x48]; jmp rax
0x0000e14c : mov eax, esp; pop r12; sub rax, r13; pop r13; pop r14; ret
0x000090b6 : add [rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; ret
0x0003cb66 : mov ecx, ebp; mov rdx, [r13]; mov rsi, r12; call [r15 + 8]
0x0003c596 : mov ecx, ebp; mov rdx, [r12]; mov rsi, rbx; call [r14 + 8]
0x00060151 : mov rdx, r12; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x000310a2 : mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x0003a70c : add [rcx + rcx*4 - 9], cl; mov rax, [rbp - 0x60]; call rax
0x000609f3 : mov [rsp], 1; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x000078a7 : mov [rax], 4; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x0003389f : add ah, bh; inc [rbx]; div ecx; pop rbx; mov eax, eax; ret
0x0008f6c5 : add [rax + 2], bh; pop rbx; pop rbp; pop r12; pop r13; ret
0x00031622 : add r8b, r11b; nop cs:[rax + rax]; lea rax, [rdi + 3]; ret
0x0000b793 : add al, al; add [r9 + rcx*4 - 0x16], cl; call [rax + 0x40]
0x0002ee65 : add cl, [rbx + 0x42890841]; or [rax - 0x77], cl; clc ; ret
0x00091a10 : xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0000ba55 : mov rax, r13; sub rax, r12; pop r12; pop r13; pop r14; ret
0x000279be : add [rax], al; mov rdx, [rsi - 8]; mov [rdi - 8], rdx; ret
0x0008cafc : add [rax], al; add [rax - 0x1992417], dl; jmp [rsi + 0x66]
0x00031632 : add r8d, r11d; nop cs:[rax + rax]; lea rax, [rdi + 4]; ret
0x0006ffd8 : pop rbx; pop rbp; mov edi, r12d; pop r12; pop r13; jmp rax
0x00066216 : add [rax], al; add al, ch; add al, [rsi + 0x39480001]; ret
0x0000e450 : mov [rbx], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0000fbb9 : add [rax], al; or [rbx], 8; pop rbx; pop rbp; pop r12; ret
0x00036643 : call rbx; xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx
0x0000e7f6 : sbb eax, 0; add [rax], al; mov rdi, rbx; call [rax + 0x30]
0x0007342f : adc r8b, bpl; mov dh, [rdx + 1]; add [rcx - 0x77], cl; ret
0x00040865 : mov rcx, rbp; mov rdx, [r14]; mov rsi, rbx; call [r13 + 8]
0x00014cd4 : add [rax], al; add [rax], al; mov [rip + 0x2ae74e], 0; ret
0x0000e3e7 : mov ecx, edx; xor edx, edx; mov rax, [rax + 0x48]; jmp rax
0x0001c3c1 : sub eax, [rbp + 0x48c30000]; lea eax, [rip + 0x15313]; ret
0x00061596 : mov [rdx], ecx; mov edx, [rax]; mov eax, edx; pop rbx; ret
0x0000f200 : add [rax], al; add [rax], al; mov [rip + 0x2b4199], 0; ret
0x0000e14b : mov rax, r12; pop r12; sub rax, r13; pop r13; pop r14; ret
0x00090fa5 : mov esi, [rsi + 8]; mov rdx, [r15]; mov rdi, rbx; call rbp
0x0001c986 : add [rdx + 0x4262a0], dil; cmove rax, rdx; add rsp, 8; ret
0x0003f095 : mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r14 + 8]
0x000310f3 : mov [rdi + 8], dh; mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x000175bc : lea eax, [rdi + rax]; cmp [rax], sil; cmovne rax, rdx; ret
0x0004de7b : mov edx, eax; mov [rbp - 0xb0], r8; mov rdi, rbx; call rax
0x0000c6fd : add [rax], al; mov edx, 2; mov rdi, r12; call [rax + 0x48]
0x000175bb : lea rax, [rdi + rax]; cmp [rax], sil; cmovne rax, rdx; ret
0x0005b5b1 : xor eax, [rax]; add [rbx - 0x113743], al; call [rbx + 0xf]
0x00031084 : mov [rdi], ecx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x00031108 : mov [rdi], ecx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x0003f096 : mov ecx, ebp; mov rdx, [r13]; mov rsi, r12; call [r14 + 8]
0x0003daf6 : mov ecx, ebp; mov rdx, [r14]; mov rsi, r13; call [rbx + 8]
0x00030a93 : mov edx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; ret
0x00031107 : mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x000732b1 : mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x48; jmp r11
0x00060152 : mov edx, esp; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0007472e : add [rax + 0x48b4864], dl; and eax, 0; add rax, -0x10; ret
0x0003cb65 : mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r15 + 8]
0x00076261 : push rdi; or [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret
0x0003daf5 : mov rcx, rbp; mov rdx, [r14]; mov rsi, r13; call [rbx + 8]
0x00008daf : sbb eax, 0; add [rax], al; mov rdi, rbx; call [rax + 0x68]
0x0000c33c : add [rax], al; mov edx, 2; mov rdi, rbx; call [rax + 0x48]
0x00060907 : mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00060a25 : sub [rax + 2], bh; pop rbx; pop rbp; pop r12; pop r13; ret
0x00040866 : mov ecx, ebp; mov rdx, [r14]; mov rsi, rbx; call [r13 + 8]
0x00073731 : adc r8b, bpl; mov [rdi + 1], ch; add [rcx - 0x77], cl; ret
0x00031612 : add r11d, r8d; nop cs:[rax + rax]; lea rax, [rdi + 2]; ret
0x0002ad4e : add [rax], al; mov edx, [rsi - 4]; mov [rdi - 4], edx; ret
0x0008fa23 : add bl, al; nop cs:[rax + rax]; mov [rdi + 0x98], rsi; ret
0x0008f6de : add [rax + 7], bh; pop rbx; pop rbp; pop r12; pop r13; ret
0x000087a7 : sbb eax, 0; add [rax], al; mov rdi, rbx; call [rax + 0x60]
0x0000aae7 : add [rax], al; add [rax + 0x39], cl; fmul [rax + 0xf]; ret
0x0008ebcf : movzx eax, al; movsxd r8, [r14 + r8*4]; add r8, r14; jmp r8
0x00030b23 : mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; ret
0x0005bf6a : mov [rbp - 0x10e8], 1; mov rdx, [rax*8 + 0x4a86c0]; jmp rdx
0x0008c8de : mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call [rax + 0x48]
0x000762fc : add [rax], al; add [rax], al; mov [rdx], 0; mov eax, 1; ret
0x00063f60 : mov edx, esi; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x000078ab : add [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x00036fdb : add [rax], 0; add [rax], al; pop rbx; pop rbp; pop r12; ret
0x0005aee3 : mov [rbp - 0x1108], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00008d25 : add [rax], al; pop rbx; pop rbp; mov eax, edx; pop r12; ret
0x00030b14 : mov edx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; ret
0x0000c470 : mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x00063da5 : sub esp, -0x80; mov rax, -1; pop rbx; pop rbp; pop r12; ret
0x0005ff78 : mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x38]
0x00027b85 : push rsi; cld ; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x000061e6 : add [rax], al; pop rbx; pop rbp; xor eax, eax; pop r12; ret
0x00060bf0 : lea edx, [rbp - 0x40]; mov rdi, r13; xor r8d, r8d; call r12
0x00063894 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 5; ret
0x0006408a : mov ecx, esi; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x00087904 : add [rcx + 0x5d5b0c4d], ecx; pop r12; pop r13; pop r14; ret
0x00015256 : add [rax], al; mov rax, rdx; pop rbx; pop rbp; pop r12; ret
0x00014c7c : add al, ch; scasb al, [rdi]; mov bl, 0xff; jmp [rsi + 0x66]
0x0000b4fc : mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x0004685c : add [rcx], al; add [rax], al; xor eax, eax; add rsp, 8; ret
0x00064089 : mov rcx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x0000985c : mov esi, esp; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x0000d315 : xor edx, edx; xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x00063884 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 4; ret
0x000712df : add [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x0003e4e4 : sub [rcx + 0x48082474], cl; mov esi, [rsp + 0x58]; call rax
0x0000bdf4 : mov edx, esi; mov rsi, r12; mov rdi, rbp; call [rax + 0x78]
0x000711bd : add [rax - 0x77], ecx; adc [r11 + 0x5d], r11b; pop r12; ret
0x0005bfb6 : mov [rbp - 0x10fc], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00047283 : mov edi, ebx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x00020ee9 : xor esp, [rdx + 0xc8b0007]; mov cl, [rbx - 0x37d67dfc]; ret
0x000478ab : mov esi, ebp; mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x00045dd0 : mov rdx, r12; mov rsi, [rsp + 0x10]; mov rdi, rbx; call rbp
0x00061e95 : add [rax], al; add [rcx + rcx*4 - 1], cl; call [rax + 0x20]
0x00063f5f : mov rdx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x00039cde : mov ecx, esp; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x0000985b : mov rsi, r12; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x00045475 : mov edx, esp; mov rsi, rbx; mov rdi, [rsp + 0x18]; call rbp
0x000478aa : mov rsi, r13; mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x00030ae3 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; ret
0x00030b03 : mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; ret
0x0006090c : add [rax], al; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00008a56 : add [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0008ccf1 : add [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret
0x0009030f : mov rbp, rsi; movsxd rax, [r8 + rdi*4]; add r8, rax; jmp r8
0x000485f0 : mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x00009e64 : add [rax], al; add [rcx + rcx*4 - 1], cl; call [r15 + 0x20]
0x0000b32d : mov rdx, [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax
0x00047282 : mov rdi, rbx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x00090310 : mov ebp, esi; movsxd rax, [r8 + rdi*4]; add r8, rax; jmp r8
0x00030b04 : mov edx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; ret
0x0005ff79 : mov edx, esp; mov rsi, rbp; mov rdi, rbx; call [rax + 0x38]
0x0005bb61 : mov [rbp - 0x1120], 1; mov rdx, [rax*8 + 0x4a88c0]; jmp rdx
0x0005aea1 : mov [rbp - 0x1100], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0005bbad : mov [rbp - 0x1120], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x000015ab : xor eax, [rbx]; add [rbx + 0x2074fff8], al; add rsp, 8; ret
0x00063874 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 3; ret
0x000762e8 : adc [rax], al; or rax, rsi; mov [rdi], rax; mov eax, 1; ret
0x0008c8dd : add [rcx - 0x1976b317], cl; mov rdi, rbx; call [rax + 0x48]
0x00031433 : adc [rsi + 0x66], ah; nop cs:[rax + rax]; xor rax, rax; ret
0x0008f545 : add [rax], eax; add [rbx + 0x5d], bl; pop r12; pop r13; ret
0x0005bd86 : mov [rbp - 0x1130], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00070a28 : mov edx, 1; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x00045474 : mov rdx, r12; mov rsi, rbx; mov rdi, [rsp + 0x18]; call rbp
0x00028b54 : add [rax], al; movsxd r9, [r11 + r9*4]; add r9, r11; jmp r9
0x0002aede : add [rax], al; movzx edx, [rsi - 1]; mov [rdi - 1], dl; ret
0x00001400 : adc [rbx + 0x480c247c], cl; mov eax, [rsp + 0x18]; call rax
0x00045dd1 : mov edx, esp; mov rsi, [rsp + 0x10]; mov rdi, rbx; call rbp
0x00001877 : add [rax], al; mov [rip + 0x2bf490], rax; xor eax, eax; ret
0x00042e57 : add [rsi + rax - 0x17], dh; adc [rip - 0xc6f0003], esp; ret
0x00039f16 : add bl, al; nop [rax + rax]; mov rax, [rip + 0x28add1]; ret
0x00015aac : add [rax], al; add [rax], al; xor eax, eax; add rsp, 8; ret
0x00030b13 : mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; ret
0x000085f3 : add [rax], al; pop rbx; mov eax, ebp; pop rbp; pop r12; ret
0x000310d5 : mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x00059c60 : add [rcx - 0x42], al; adc [rax], al; add [rax], al; jmp rdx
0x000638b4 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 7; ret
0x0005c049 : mov [rbp - 0x1110], 1; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00048178 : mov eax, [rip + 0x27cc0a]; mov rdi, rbx; call [rax + r11*8]
0x00039d7e : not eax; xor edx, edx; add eax, 2; mov [rsp], eax; call rbx
0x0000bdf3 : mov rdx, r14; mov rsi, r12; mov rdi, rbp; call [rax + 0x78]
0x0000b4fd : mov edx, esp; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x000485f1 : mov edi, ebx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x00059ca1 : mov [rbp - 0x1110], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00030b24 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; ret
0x0000c471 : mov edx, ebp; mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x000264df : sub [rdi - 0x20], esp; movaps xmm[rdi - 0x10], xmm5; jmp r9
0x0005bffd : mov [rbp - 0x1114], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0002ae5e : add [rax], al; movzx edx, [rsi - 2]; mov [rdi - 2], dx; ret
0x00039f0d : add [rax], al; add [rax - 0x75], cl; add eax, 0x28add1; ret
0x0002ede5 : add cl, [rdx + 0x42880241]; add cl, [rax - 0x77]; clc ; ret
0x00060bef : lea rdx, [rbp - 0x40]; mov rdi, r13; xor r8d, r8d; call r12
0x00063864 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 2; ret
0x0000f11d : add [rax], al; add [rax - 0x75], cl; add eax, 0x2b1c19; ret
0x00048177 : mov rax, [rip + 0x27cc0a]; mov rdi, rbx; call [rax + r11*8]
0x00030aa2 : mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; ret
0x0005bdc8 : mov [rbp - 0x1134], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00091d27 : movzx eax, al; movsxd rax, [r9 + r8*4]; add r9, rax; jmp r9
0x000638a4 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, 6; ret
0x00063da4 : sub rsp, -0x80; mov rax, -1; pop rbx; pop rbp; pop r12; ret
0x00039cdd : mov rcx, r12; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x00030af3 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; ret
0x0000b32e : mov edx, [rbx + 0x40]; sub rdx, rsi; mov rdi, rbx; call rax
0x00008b1c : add [rax], al; mov rdx, rbp; mov rsi, r12; call [rax + 0x38]
0x000615cc : mov eax, [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x000095ea : mov eax, ebp; mov [rbx], edx; pop rbx; pop rbp; pop r12; ret
0x00039693 : lea edi, [rbp - 0x40]; mov rsi, [rdx + rbx + 0x20]; call rax
0x0008fbaa : add al, [rax]; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; ret
0x0006095c : mov eax, 1; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00060946 : mov eax, 2; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0000c4c2 : add rsp, 8; pop rbx; pop rbp; pop r12; neg eax; pop r13; ret
0x000361ee : add al, 0; add [rax], al; mov esi, 2; mov rdi, r15; call rbx
0x0000c3cf : mov [rbp], esp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0001c3a5 : add al, [rax]; add [rbp + 8], dh; lea rax, [rip + 0x1f]; ret
0x00063e15 : sub esp, -0x80; pop rbx; sub rax, rbp; pop rbp; pop r12; ret
0x00038d5c : sub ecx, eax; shl ecx, 3; pop rbx; shl eax, cl; pop rbp; ret
0x0000ba0f : add [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; call [rax + 0x70]
0x00008d48 : add [rax], al; mov rsi, r10; mov rdi, rbx; call [rax + 0x58]
0x0001c0d1 : xchg [rdx + 0x48000002], ch; add eax, edi; add rax, rcx; ret
0x00016b1c : xor [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret
0x00037628 : mov [rip + 0x28a7f1], rax; add rsp, 8; pop rbx; pop rbp; ret
0x00091d26 : movzx r8d, r8b; movsxd rax, [r9 + r8*4]; add r9, rax; jmp r9
0x00060e6f : add [rax], al; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret
0x00038d5b : sub ecx, r8d; shl ecx, 3; pop rbx; shl eax, cl; pop rbp; ret
0x00062190 : add [rax], al; mov esi, eax; mov rdi, rbx; call [rdx + 0x30]
0x000116ae : add [rcx + 0x7741c43], cl; add rsp, 8; pop rbx; pop rbp; ret
0x0002edbd : add [rax], al; add [rdx + 0x48028801], cl; mov eax, edi; ret
0x0003525a : mov rbx, -1; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x00079500 : add al, ch; stosb [rdi], al; test edi, eax; jmp [rsi + 0x2e]
0x00037629 : mov [rip + 0x28a7f1], eax; add rsp, 8; pop rbx; pop rbp; ret
0x0008cf4c : add [rax], al; add [rax], al; mov eax, [rip + 0x237ce2]; ret
0x0006b1b3 : pop rbp; pop r12; pop r13; pop r14; mov eax, 1; pop r15; ret
0x00027f54 : mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x0003de42 : pop rax; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x0003db6d : pop rax; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x00040418 : pop rax; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call r14
0x000679fa : add al, [rax]; add [rcx + 0x39], al; ror [rdi], -0x7c; ret 1
0x0000dc83 : add [rax - 0x77], ecx; or [r15], cl; mov dh, 2; pop rbx; ret
0x00060793 : add [rax], al; mov rsi, r13; mov rdi, r12; call [rax + 0x38]
0x000061e5 : add [rax], r8b; pop rbx; pop rbp; xor eax, eax; pop r12; ret
0x00070e37 : dec [rax - 0x75]; or [rax + 4], 0; add [rax - 0x7d], cl; ret
0x0000c4c3 : add esp, 8; pop rbx; pop rbp; pop r12; neg eax; pop r13; ret
0x0008ebce : movzx r8d, r8b; movsxd r8, [r14 + r8*4]; add r8, r14; jmp r8
0x0005f112 : adc [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret
0x0000012d : add [rsi], al; add [rax], al; pop rbx; pop rbp; pop r12; ret
0x0001f5c9 : add [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret
0x0000f11c : add [rax], al; add [rax], al; mov rax, [rip + 0x2b1c19]; ret
0x00061b20 : add [rcx + rcx*4 - 0xa], al; mov rdi, r12; call [rax + 0x18]
0x0003105b : add [rax], al; add [rax], al; add [rax + 0x78d4837], cl; ret
0x0001c30b : add [rax], 0; add [rax], al; bsf eax, eax; add rax, rdi; ret
0x0002ee23 : add cl, [rbx + 0x42890341]; add ecx, [rax - 0x77]; clc ; ret
0x000095e9 : mov rax, rbp; mov [rbx], edx; pop rbx; pop rbp; pop r12; ret
0x0006218f : add [rax], al; add [rcx - 0x2076b73a], cl; call [rdx + 0x30]
0x0000ba0e : add [rax], al; mov rsi, r14; mov rdi, rbx; call [rax + 0x70]
0x00038c4f : adc [rax + 0x3b], cl; sub [rbx - 0x26], sil; mov eax, 1; ret
0x0002a457 : xchg eax, esi; add [rax], al; add [rax - 0x7f], cl; ret 0x80
0x00008545 : add [rax], al; xor esi, esi; mov rdi, rbx; call [rax + 0x10]
0x000892bc : pop rbp; pop r12; pop r13; pop r14; sar rax, 3; pop r15; ret
0x000615cb : mov rax, [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x00039f0c : add [rax], al; add [rax], al; mov rax, [rip + 0x28add1]; ret
0x0003e0fb : add al, ch; scasd eax, [rdi]; cmp esp, edi; jmp [rsi + 0x66]
0x000337fb : add [rax], al; add [rax], al; pop rbx; and eax, 0x3fc00; ret
0x00063e14 : sub rsp, -0x80; pop rbx; sub rax, rbp; pop rbp; pop r12; ret
0x0000e34b : add [rax], al; add [rax], al; pop rbx; pop rbp; pop r12; ret
0x00049293 : lea ecx, [rax + 0x48fffffa]; mov edi, ebx; call [rax + 0x38]
0x0001c4c3 : movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret
0x00050b59 : pop rbx; pop rbp; pop r12; pop r13; mov eax, 1; pop r14; ret
0x0004490c : pushfq ; add r8b, bpl; pushfq ; sar ebx, 1; jmp [rsi + 0x66]
0x0008f985 : add [rax], al; add [rdx + rbp*8 + 0x48], dh; add esp, 8; ret
0x00039692 : lea rdi, [rbp - 0x40]; mov rsi, [rdx + rbx + 0x20]; call rax
0x0002a4ea : add [rdi], cl; cmp [rbx - 1], -1; dec [rax - 0x7f]; ret 0x80
0x0001d09b : add al, [rax]; add [rbp + 7], dh; lea rax, [rip + 0x79]; ret
0x00070a40 : add rsp, 8; xor edx, edx; pop rbx; mov eax, edx; pop rbp; ret
0x00028316 : push rsi; clc ; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00031167 : mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x00015a8a : add [rax - 0x73], ecx; clc ; cmovne rax, rcx; add rsp, 8; ret
0x00045243 : add [rax], al; add [rbp + 0x480e79d2], al; add esp, 0xd0; ret
0x0000c139 : add [rax], al; mov [rdx + 0x140], 0x494fc0; call [rax + 0x20]
0x000673f8 : mov rax, -0x40; mov fs:[rax], edx; xor eax, eax; pop rbx; ret
0x0000c3ce : mov [rbp], r12d; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00031188 : mov [rdi], ecx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x00063bcb : mov rax, -1; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0000e453 : add [rax], eax; add [rax], al; pop rbx; pop rbp; pop r12; ret
0x0003c8e8 : push rax; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x0003c5fd : push rax; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call rbx
0x000328e7 : movzx eax, [rdi - 9]; movzx edx, [rsi - 9]; sub eax, edx; ret
0x00030596 : mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x00025573 : movzx eax, [rdi - 1]; movzx edx, [rsi - 1]; sub eax, edx; ret
0x00062246 : add [rax], al; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret
0x0003a70b : add eax, [rax]; mov rdi, r14; mov rax, [rbp - 0x60]; call rax
0x00063c14 : mov rax, -2; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00061b1f : add [rax], al; mov esi, r14d; mov rdi, r12; call [rax + 0x18]
0x00028125 : push rsi; cld ; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0000cca2 : add [rax], al; movzx eax, bpl; pop rbx; pop rbp; pop r12; ret
0x000257c0 : movzx eax, [rdi - 1]; movzx ecx, [rsi - 1]; sub eax, ecx; ret
0x0008f662 : mov rcx, r12; or esi, 2; mov rdx, [r12]; mov edi, 1; call rax
0x0003faba : push rax; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r15
0x0003f109 : push rax; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r12
0x000744dc : mov rdx, [rsp + 0x48]; add rax, [rdx + 8]; add rsp, 0x58; ret
0x000305c4 : mov al, [rcx + 4]; mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x000310d3 : push rsi; add ecx, [rcx + 0x357890f]; lea rax, [rdi + 6]; ret
0x00008d49 : add [rcx + rcx*4 - 0x2a], cl; mov rdi, rbx; call [rax + 0x58]
0x00027f55 : mov ecx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x000311a7 : mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x00009c42 : mov rcx, rax; mov [rsp], rdx; mov rdx, r14; call [r13 + 0x18]
0x000311a8 : mov [rdi], ecx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x00030a7d : add [rax], al; add [rbx + 0x477880e], cl; mov [rdi], ecx; ret
0x00027d65 : push rsi; cld ; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000279bf : add [rax - 0x75], cl; push rsi; clc ; mov [rdi - 8], rdx; ret
0x0000f14b : add [rax], al; add [rax], al; add [rax - 0x77], cl; clc ; ret
0x00031127 : mov [rdi], ecx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x00031187 : mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x0001c31e : add [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret
0x00001bdd : leave ; pop rbx; pop rbp; pop r12; mov rax, rcx; pop r13; ret
0x0009057c : add [rax], al; add [rax], al; mov rax, [rsi]; add rsp, 8; ret
0x0000b7bc : add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x00027f45 : push rsi; cld ; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0000c700 : add al, [rax]; add [rax], al; mov rdi, r12; call [rax + 0x48]
0x000762f4 : add bl, al; nop cs:[rax + rax]; mov [rdx], 0; mov eax, 1; ret
0x000230de : add [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret
0x00033874 : add [rax], al; add [rbx - 0x3d], bl; mov eax, 8; pop rbx; ret
0x0000c33f : add al, [rax]; add [rax], al; mov rdi, rbx; call [rax + 0x48]
0x000762cc : sub ecx, eax; mov [rdi], rsi; mov eax, 1; mov [rdx], ecx; ret
0x00084f2c : mov [rbp], 0; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x000744dd : mov edx, [rsp + 0x48]; add rax, [rdx + 8]; add rsp, 0x58; ret
0x000155a7 : adc [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x00028516 : push rsi; clc ; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00035c17 : add [rax - 0x75], cl; xor ecx, [rcx + rcx*4 - 0x19]; call rbp
0x000794ff : add al, bpl; stosb [rdi], al; test edi, eax; jmp [rsi + 0x2e]
0x0000e733 : add [rax], al; add bl, al; nop [rax + rax]; xor eax, eax; ret
0x0006e10e : add [rax], al; mov rax, [rip + 0x253dc1]; add rsp, 8; jmp rax
0x00031126 : mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x00014c7b : add r8b, bpl; scasb al, [rdi]; mov bl, 0xff; jmp [rsi + 0x66]
0x0001c32e : add [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x00031168 : mov [rdi], ecx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x0002491f : add [rdi], cl; mov dh, 7; movzx ecx, [rsi]; sub eax, ecx; ret
0x00031147 : mov [rdi], ecx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x0003dc58 : add [rax], al; add [rax - 0x77], cl; add al, 0x24; call [rbx]
0x0001570d : pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax
0x00001809 : sbb [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x00070a41 : add esp, 8; xor edx, edx; pop rbx; mov eax, edx; pop rbp; ret
0x00028716 : push rsi; clc ; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0001c30c : add [rax], al; add [rax], al; bsf eax, eax; add rax, rdi; ret
0x00031146 : mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x0007bfdf : pop rbp; pop r12; pop r13; pop r14; pop r15; fmulp st(1); ret
0x0008f663 : mov ecx, esp; or esi, 2; mov rdx, [r12]; mov edi, 1; call rax
0x00007b4c : sub [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0008f9e7 : add [rsi + 0x48], dh; mov [rdi + rsi*8], edx; add rsp, 8; ret
0x0001c49f : add [rdi], cl; mov dh, 7; movzx edx, [rsi]; sub eax, edx; ret
0x0005a8f0 : push rbp; and [rax + 0x29], cl; sar rdx, 2; call [rax + 0x38]
0x000305d4 : mov ax, [rcx + 4]; mov [rdx + 4], ax; lea rax, [rdx + 5]; ret
0x00060794 : add [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call [rax + 0x38]
0x0004ec89 : push [r9]; sal bh, cl; int1 ; add r8d, eax; mov eax, r8d; ret
0x00009c43 : mov ecx, eax; mov [rsp], rdx; mov rdx, r14; call [r13 + 0x18]
0x00064657 : mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00008450 : lea esp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x00060c06 : pop rsp; pop r13; sub rax, r14; pop r14; pop r15; pop rbp; ret
0x00070ba7 : mov [rdi], rax; mov rax, [rip + 0x253bb7]; mov [rsi], rax; ret
0x00025f66 : xchg eax, ebx; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9
0x0008f605 : mov ebx, [rax + 0x48000000]; add esp, 8; pop rbx; pop rbp; ret
0x00022e49 : mov [rdi + 0x18], rax; pop rbx; pop rbp; pop r12; pop r13; ret
0x00036872 : mov dl, 5; add [rax], al; xor esi, esi; mov rdi, r15; call rbx
0x00039f70 : add [rax], al; mov [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret
0x000353cd : mov edi, ebx; mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax
0x000918e6 : mov [rip + 0x232e24], esi; mov [rsi + 0x28], rax; pop rbx; ret
0x00070ad4 : lea rax, [rdx + 1]; mov [rip + 0x253c91], rax; add rsp, 8; ret
0x00062245 : add [rax], r8b; sub r8, rcx; sar r8, 2; lea eax, [r8 - 1]; ret
0x000141e8 : mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000539f3 : adc eax, [rax]; add [rax - 0x77], cl; ror [rax - 0x7d], 1; ret
0x00064656 : mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00091831 : mov [rip + 0x232ed8], rsi; mov [rsi + 0x28], rax; pop rbx; ret
0x00084f31 : add [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x000607c5 : movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call [rax + 0x38]
0x000918e5 : mov [rip + 0x232e24], rsi; mov [rsi + 0x28], rax; pop rbx; ret
0x0000df64 : sub eax, ebx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0008fc30 : mov rcx, r13; mov rdx, [r13]; mov esi, 1; mov edi, 1; call rax
0x00061d68 : pop rbp; pop r12; pop r13; sub rax, r14; pop r14; pop r15; ret
0x0007d46d : add [rcx - 0x43], al; add [rax], al; add [rax - 0x77], cl; ret
0x000146d5 : mov eax, esi; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00091d57 : add ecx, [rbp - 0x75]; add [rcx + rcx*4 + 3], cl; pop rbx; ret
0x00026efd : div [rdx + 7]; lea r9, [r9 - 7]; lea rdx, [rdx - 0x40]; jmp r9
0x0000c701 : add [rax], al; add [rcx + rcx*4 - 0x19], cl; call [rax + 0x48]
0x000140aa : xor edi, eax; mov [rsi + rbx], dil; mov rax, rsi; pop rbx; ret
0x000141e9 : mov eax, ebx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0000fea6 : sbb [rcx], al; add [rax], al; mov [rsi], rax; mov rax, r8; ret
0x00063be9 : pop rbx; sub rax, rbp; pop rbp; pop r12; pop r13; pop r14; ret
0x00047b8a : int1 ; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x0000844f : lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x000146d4 : mov rax, r14; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0000bbc7 : add [rax], al; mov rax, rbp; add rsp, 8; pop rbx; pop rbp; ret
0x00064668 : pop rbx; pop rbp; mov rax, r12; pop r12; pop r13; pop r14; ret
0x00070ba8 : mov [rdi], eax; mov rax, [rip + 0x253bb7]; mov [rsi], rax; ret
0x0002edce : add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret
0x00019b16 : add [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x0006ef1f : add [rax], al; mov rax, [r15 + 0x10]; add rax, [r14]; call rax
0x00056a35 : push rdi; or [rdi + rcx - 0x4a], al; xor [rax - 0x7d], cl; ret
0x00070ad5 : lea eax, [rdx + 1]; mov [rip + 0x253c91], rax; add rsp, 8; ret
0x0003e0fa : add r8b, bpl; scasd eax, [rdi]; cmp esp, edi; jmp [rsi + 0x66]
0x000140d1 : add [rax + rax], cl; add [rax], al; xor eax, eax; pop rbx; ret
0x0004ec8a : push [rcx]; sal bh, cl; int1 ; add r8d, eax; mov eax, r8d; ret
0x000305d5 : mov eax, [rcx + 4]; mov [rdx + 4], ax; lea rax, [rdx + 5]; ret
0x00091832 : mov [rip + 0x232ed8], esi; mov [rsi + 0x28], rax; pop rbx; ret
0x0003ae87 : pop rbx; pop rbp; pop r12; pop r13; xor eax, eax; pop r14; ret
0x0003056d : add [rax], al; add [rdx + 0x48028801], cl; lea eax, [rdx]; ret
0x00036af0 : mov ah, 2; add [rax], al; xor esi, esi; mov rdi, r15; call rbx
0x00037597 : add [rcx - 0x3b7cb718], cl; adc [rbx + 0x5d], bl; pop r12; ret
0x0008fc31 : mov ecx, ebp; mov rdx, [r13]; mov esi, 1; mov edi, 1; call rax
0x000657cf : mov [rsi + 0x28], rax; pop rbx; pop rbp; pop r12; pop r13; ret
0x000165d0 : add [rax], al; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret
0x00030cf8 : adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0000df63 : sub rax, rbx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000539f2 : adc eax, [eax]; add [rax - 0x77], cl; ror [rax - 0x7d], 1; ret
0x0002edbe : add [rax], al; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret
0x000366d4 : mov al, 6; add [rax], al; xor esi, esi; mov rdi, r15; call rbx
0x00036952 : mov dl, 4; add [rax], al; xor esi, esi; mov rdi, r15; call rbx
0x00074ee3 : pop rbp; mov rax, r12; pop r12; pop r13; pop r14; pop r15; ret
0x000353cc : mov rdi, rbx; mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax
0x0000ad18 : adc [rax + 0x5b000000], -0x3d; nop ; mov rax, -1; pop rbx; ret
0x00060c05 : pop r12; pop r13; sub rax, r14; pop r14; pop r15; pop rbp; ret
0x0000a5d5 : pop rax; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x00060131 : xor edx, edx; pop rbx; div rbp; pop rbp; pop r12; pop r13; ret
0x00063586 : pop rbx; pop rbp; pop r12; pop r13; mov eax, edx; pop r14; ret
0x00015c12 : add [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x00010f14 : xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00067846 : pop rbx; pop rbp; pop r12; pop r13; mov rax, r14; pop r14; ret
0x0006e9a1 : add [rax], al; mov rax, [r14 + 0x10]; add rax, [r15]; call rax
0x00022e4a : mov [rdi + 0x18], eax; pop rbx; pop rbp; pop r12; pop r13; ret
0x00067f2d : mov [rip + 0x25c328], -1; mov fs:[rax], edx; xor eax, eax; ret
0x00007813 : add [rax], al; add rsp, 8; mov rax, rsi; pop rbx; pop rbp; ret
0x000279a6 : push rsi; clc ; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00014d89 : add [rax], al; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x000657d0 : mov [rsi + 0x28], eax; pop rbx; pop rbp; pop r12; pop r13; ret
0x00028733 : mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x000305f4 : mov eax, [rcx + 3]; mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x0000ee50 : sub edx, [rax + 0x10]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x0008d565 : movzx ecx, cl; movsxd rcx, [rdi + rcx*4]; add rcx, rdi; jmp rcx
0x0008e180 : movzx eax, al; movsxd rax, [rcx + rax*4]; add rcx, rax; jmp rcx
0x000921a8 : mov eax, r14d; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000655e3 : add [rax], eax; add [rcx], bh; ror [rdi], 1; xchg eax, esp; ret
0x0000ae95 : mov [rbx + 0x28], rsi; mov [rbx + 0x20], rsi; call [rax + 0x70]
0x0004facc : push rbx; sub dh, al; add [rip - 0xa8d17], ch; jmp [rsi + 0x2e]
0x0002a8a6 : movdqu xmm[rdi - 0x1d], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0000c3ed : add [rax], al; add [rbx + 0x5d], bl; xor eax, eax; pop r12; ret
0x00062152 : add [rax], al; add [rax], al; mov [rax + 0x48], 0; pop rbx; ret
0x0000bbf2 : xchg [rax + 0x48000000], edx; add esp, 8; pop rbx; pop rbp; ret
0x0002abb6 : movdqu xmm[rdi - 0x17], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0004fe64 : push rbx; sub dh, al; add [rip - 0x71817], ch; jmp [rsi - 0x70]
0x0007010a : mov [rip + 0x25416f], r13; mov rdi, rbp; mov [rax], 0; call r12
0x000673c1 : add [rax], al; add [rax], al; mov [rax + 0x28], 0; pop rbx; ret
0x00073beb : add al, 0; add [rcx - 0x73], al; pop rsi; dec [rax + 0x63]; ret
0x00001302 : add [rax], eax; add bh, bh; push rbx; adc [rax - 0x7d], cl; ret
0x0002ab36 : movdqu xmm[rdi - 0x18], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0008e789 : movzx edx, dl; movsxd rdx, [rbp + rdx*4]; add rdx, rbp; jmp rdx
0x000470d5 : add [rax], al; movsxd r13, edx; mov rdx, r13; call [rax + 0x38]
0x0008e07f : movzx eax, al; movsxd rax, [r11 + rax*4]; add rax, r11; jmp rax
0x0004c324 : add [rax], al; movsxd rdx, ebp; mov rdi, rbx; call [rax + 0x38]
0x00010a08 : mov [rax], edx; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x0002acb6 : movdqu xmm[rdi - 0x15], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002a9b6 : movdqu xmm[rdi - 0x1b], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0000a55a : pop rbx; mov rax, [rax + 0x140]; mov rax, [rax + 0x20]; jmp rax
0x000728e6 : add [rax], al; mov r14d, eax; mov eax, r14d; call [r15 + rax*8]
0x00072587 : add [rax + 0xf], al; test [rax], eax; or al, 0; add bl, dh; ret
0x0002ac36 : movdqu xmm[rdi - 0x16], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00027b84 : mov edx, [rsi - 4]; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0008e980 : add al, [rax]; movsxd rcx, [rdx + rcx*4]; add rdx, rcx; jmp rdx
0x0001ca22 : movq [rdi + 0x10], mm0; movdqu xmm[rdi + rdx - 0x20], xmm8; ret
0x00010abf : sub eax, [rax]; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x0002647d : push [rdx + 7]; lea r9, [r9 - 7]; lea rdx, [rdx - 0x40]; jmp r9
0x0002aec6 : movdqu xmm[rdi - 0x11], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0005983d : add [rax], al; movsxd r12, edx; mov rdx, r12; call [rax + 0x38]
0x0002ad36 : movdqu xmm[rdi - 0x14], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00019b15 : add [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x0008a4ed : add [rax], al; add al, ch; cmp ebx, [rcx - 2]; jmp [rsi + 0x2e]
0x00028533 : mov ecx, [rsi - 4]; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x00084f13 : mov [rbp], eax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret
0x0008b08f : add [rcx - 0x77], al; xlatb ; mov edx, r15d; call [r12 + rdx*8]
0x0000e349 : sbb [r8], al; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x0002a786 : movdqu xmm[rdi - 0x1f], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002adb6 : movdqu xmm[rdi - 0x13], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0008cb20 : inc [rbp - 0x3f6af040]; add rsp, 8; movzx eax, al; neg eax; ret
0x00030606 : mov eax, [rcx + 5]; mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x00037cf0 : mov [rax + rcx*4], gs; add [rax], al; add [rax - 0x7d], cl; ret
0x00028333 : mov ecx, [rsi - 4]; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0008b08e : add [rax], al; mov r15d, edx; mov edx, r15d; call [r12 + rdx*8]
0x0002a936 : movdqu xmm[rdi - 0x1c], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0000ee45 : sub edx, [rax + 0x18]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x0000ae96 : mov [rbx + 0x28], esi; mov [rbx + 0x20], rsi; call [rax + 0x70]
0x000620b7 : sub [rax - 0x77], cl; push rax; sbb [rcx + 0x5bc0310b], cl; ret
0x0007010b : mov [rip + 0x25416f], ebp; mov rdi, rbp; mov [rax], 0; call r12
0x0008e3fa : add [rbp + 1], ecx; ror [rdi], -0x4a; add [r8 - 0x7d], ecx; ret
0x00084f12 : mov [rbp], rax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret
0x0002ae46 : movdqu xmm[rdi - 0x12], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aad4 : mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x0004531c : mov rdx, [rsp + 0x38]; mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x00037ac1 : add esp, 8; mov eax, 5; pop rbx; pop r12; pop r13; pop rbp; ret
0x0000d9b5 : add [rax], al; add [rax], al; mov [rbx + 0x50], 0; pop rbx; ret
0x00014420 : sbb [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; ret
0x00039f75 : add [rax], al; add [rax], al; add rsp, 8; pop rbx; pop rbp; ret
0x00060949 : add [rax], al; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00064322 : mov [rsp], 0; mov r9, r15; mov rsi, r14; mov rdi, r12; call rbp
0x00042ffa : sbb [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; pop r13; ret
0x00030a4c : add [rax], al; add [rax], al; mov dx, [rsi]; mov [rdi], dx; ret
0x00037ac0 : add rsp, 8; mov eax, 5; pop rbx; pop r12; pop r13; pop rbp; ret
0x0004cd14 : push rbx; sub dh, al; add [rip - 0x1ae17], ch; jmp [rsi - 0x70]
0x0004531d : mov edx, [rsp + 0x38]; mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x00070c57 : push rbx; or [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0002aab6 : movdqu xmm[rdi - 0x19], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aa36 : movdqu xmm[rdi - 0x1a], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00010a07 : mov [rax], rdx; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x00030626 : mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x0006088d : add [rax], al; add [rax - 0x75], cl; mov rax, [rax + 0x4c]; ret
0x0002a816 : movdqu xmm[rdi - 0x1e], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x000348f4 : mov edx, eax; neg edx; cmp [rsp - 0x68], 2; cmove eax, edx; ret
0x0008d411 : add [rax], al; movsxd rcx, [r15 + rcx*4]; add rcx, r15; jmp rcx
0x0003afb3 : mov [rbp], ebp; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000741da : add [rbx], al; add eax, [rax]; add [rdx + rbp*2 - 0x7d], dh; ret
0x00042654 : add [rax], al; add [rax - 1], bh; pop rbx; pop rbp; pop r12; ret
0x0000ee0b : lea edx, [rax + 0x60]; nop ; mov rcx, [rdi]; mov [rdx], rcx; ret
0x00008d24 : add [rax], eax; add [rbx + 0x5d], bl; mov eax, edx; pop r12; ret
0x0008b08d : add [rax], r8b; mov r15d, edx; mov edx, r15d; call [r12 + rdx*8]
0x00036285 : add al, [rax]; add [rax], al; mov esi, 1; mov rdi, r13; call rbx
0x00065154 : mov [rip + 0x25fc3a], 3; nop ; add rsp, 8; pop rbx; pop rbp; ret
0x00064328 : add [rbp - 0x77], cl; stc ; mov rsi, r14; mov rdi, r12; call rbp
0x000013ab : sub al, 0; mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; call r13
0x0003587d : mov rax, [rsp + 8]; mov rdi, [rax]; mov [rsp + 8], rax; call rbx
0x0000ee1e : add [rax], al; mov eax, [rdi + 0x10]; sub eax, [rsi + 0x10]; ret
0x0005e557 : dec [rax - 0x75]; add [rsi - 0x77], ah; or cl, ch; push rbp; ret
0x000616fb : lea rdx, [rsi + 4]; mov [rax], rdx; mov eax, [rsi]; pop rbx; ret
0x00062155 : add [rax - 0x39], cl; add [rax], al; add [rax], al; pop rbx; ret
0x000459d0 : add r14, r13; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call rbp
0x0003105c : add [rax], al; add [rax], al; mov [rdi], dh; lea rax, [rdi]; ret
0x0006e048 : sub rsp, 8; call [rip + 0x253e86]; xor eax, eax; add rsp, 8; ret
0x0003056e : add [rax], al; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret
0x0000e2c9 : push rbx; mov rax, [rdi + 0xd8]; mov rbx, rdi; call [rax + 0x60]
0x0003afb2 : mov [rbp], r13; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00050cf3 : xor esp, [rdi]; add [rbp + 0x5c], dh; mov eax, edx; pop rbx; ret
0x0003587e : mov eax, [rsp + 8]; mov rdi, [rax]; mov [rsp + 8], rax; call rbx
0x0002ee01 : add [rcx + 0x4418a02], ecx; mov [rdx + 4], al; mov rax, rdi; ret
0x000363aa : add al, [rax]; add [rax], al; mov esi, 2; mov rdi, r13; call rbx
0x0002b46b : add [rax], 0; add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret
0x0000c3cd : mov fs:[rbp], r12d; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0006088e : add [rax], al; mov rax, [rdi + 0x48]; mov eax, [rax + 0x4c]; ret
0x000459d1 : add esi, ebp; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call rbp
0x00070c56 : mov [rbx + 8], edx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00064327 : add [rax], al; mov r9, r15; mov rsi, r14; mov rdi, r12; call rbp
0x000728e5 : add [rax], r8b; mov r14d, eax; mov eax, r14d; call [r15 + rax*8]
0x000617a0 : lea rcx, [rdx + 4]; mov [rax], rcx; mov eax, [rdx]; pop rbx; ret
0x0002b2ab : add [rax], 0; add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret
0x0008fa83 : mul [rsi + 0x66]; nop cs:[rax + rax]; mov rax, [rdi + 0xb0]; ret
0x0007418f : add [rbx], al; add eax, [rax]; add [rcx + rdi*2 - 0x7d], dh; ret
0x0008f0dd : mov eax, [rbx]; movsxd rax, [r15 + rax*4]; add rax, r15; jmp rax
0x0002ed4e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00030a68 : add al, bl; nop [rax + rax]; mov edx, [rsi]; mov [rdi], edx; ret
0x000454b9 : add edi, ebp; mov rdx, r12; mov rsi, r15; mov rdi, rbx; call rbp
0x00070c55 : mov [rbx + 8], rdx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00032cc0 : dec [rdi]; test [rsi + 1], ebp; add [rax], al; xor eax, eax; ret
0x0004509c : movzx eax, al; mov [rbx + 0x40], eax; xor eax, eax; pop rbx; ret
0x0000de31 : mov eax, [rdi + 0xd8]; push rbx; mov rbx, rdi; call [rax + 0x20]
0x0000ee0a : lea rdx, [rax + 0x60]; nop ; mov rcx, [rdi]; mov [rdx], rcx; ret
0x0000de30 : mov rax, [rdi + 0xd8]; push rbx; mov rbx, rdi; call [rax + 0x20]
0x00050b44 : mov [rdi], esi; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x000762ff : add bh, al; add al, [rax]; add [rax], al; add [rax + 1], bh; ret
0x0000e34a : sbb [rax], al; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x000617a1 : lea ecx, [rdx + 4]; mov [rax], rcx; mov eax, [rdx]; pop rbx; ret
0x0006e049 : sub esp, 8; call [rip + 0x253e86]; xor eax, eax; add rsp, 8; ret
0x000454b8 : add r15, r13; mov rdx, r12; mov rsi, r15; mov rdi, rbx; call rbp
0x000616fc : lea edx, [rsi + 4]; mov [rax], rdx; mov eax, [rsi]; pop rbx; ret
0x00050b43 : mov [rdi], r14; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00060e72 : add [rax], eax; add [rax], al; add rsp, 8; pop rbx; pop rbp; ret
0x0001588c : mov rax, r8; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0002a9d4 : mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x00036637 : add [rax], eax; add [rax], al; mov esi, 2; mov rdi, r12; call rbx
0x00088265 : add [rax - 0x73], ecx; sbb al, 2; mov [rsp + 0x90], rbx; call r12
0x0000bcf3 : add [rax], al; add [rsi - 1], bh; mov rdi, rbp; call [rax + 0x18]
0x000306a6 : mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x0002a7a5 : mov ecx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x0007eb0f : mov [rbx + 4], edx; movzx eax, al; pop rbx; pop rbp; pop r12; ret
0x00028714 : mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00006ff7 : mov edi, esp; lea r9, [r15 + rax]; mov [rsp + 0x10], r9; call r13
0x00031208 : movq [rdi], mm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x0006c5db : add esp, 8; mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret
0x00076121 : sbb edx, ebx; mov [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret
0x00030666 : mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x0004679a : add esp, 8; xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret
0x0002467f : movzx eax, [rdi + rdx]; movzx edx, [rsi + rdx]; sub eax, edx; ret
0x0000897f : add rsp, 8; mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x00027d64 : mov edx, [rsi - 4]; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00030c3d : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x00061256 : mov [rax], edx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x00061216 : mov [rax], edx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x00030556 : mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x00001b65 : add esp, 8; mov rax, rcx; pop rbx; pop rbp; pop r12; pop r13; ret
0x00030557 : mov eax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x00050a17 : add rsp, 8; mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret
0x00030b98 : movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x00067c1b : add [rax], al; add [rax], al; add [rax + 0x68], bh; syscall ; ret
0x0005bb22 : movzx eax, [rax + 0x4a8cc0]; mov rdx, [rax*8 + 0x4a89c0]; jmp rdx
0x00018d2b : movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; ret
0x00067c2b : add [rax], al; add [rax], al; add [rax + 0x6c], bh; syscall ; ret
0x00027a07 : mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x00028124 : mov edx, [rsi - 4]; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x000306a7 : mov eax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x000311d5 : movq [rdi], mm0; mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x00037a9c : add esp, 8; xor eax, eax; pop rbx; pop r12; pop r13; pop rbp; ret
0x00047495 : movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7dc0]; jmp rdx
0x0004b83a : movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7ac0]; jmp rdx
0x0002a954 : mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x0002a8c5 : mov ecx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x0002b54b : add [rax], 0; add [rax], al; movzx edx, [rsi]; mov [rdi], dx; ret
0x0006c630 : xor eax, eax; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000676ee : add rsp, 8; mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret
0x000306c6 : mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x00032960 : movzx eax, [rdi - 0xa]; movzx edx, [rsi - 0xa]; sub eax, edx; ret
0x00050a18 : add esp, 8; mov eax, edx; pop rbx; pop rbp; pop r12; pop r13; ret
0x000353a0 : dec [rax - 0x77]; fild [rcx + rcx*4 - 0x1e]; mov esi, 1; call rbp
0x0004ba48 : movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a78c0]; jmp rdx
0x00028514 : mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x000620b9 : mov [rax + 0x18], edx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x0000c33b : add [rax], al; add [rdx + 2], bh; mov rdi, rbx; call [rax + 0x48]
0x00032920 : movzx eax, [rdi - 0xe]; movzx edx, [rsi - 0xe]; sub eax, edx; ret
0x0006c5da : add rsp, 8; mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret
0x0008bb16 : add rsp, 8; mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret
0x00028315 : mov edx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00046799 : add rsp, 8; xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret
0x00030646 : mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x0002a834 : mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x00044f35 : add bl, al; nop [rax + rax]; mov rax, -0x18; add rax, fs:[0]; ret
0x00030687 : mov eax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x0004b924 : movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a79c0]; jmp rdx
0x00028314 : mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00061215 : mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x000629a0 : sub al, 1; add [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret
0x000676ef : add esp, 8; mov rax, rdx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0002ee21 : add [rcx + 0x3418b02], ecx; mov [rdx + 3], eax; mov rax, rdi; ret
0x0000d933 : mov [rbx + 0x20], eax; mov [rbx], edx; xor eax, eax; pop rbx; ret
0x0004578e : add [rax], al; mov rsi, r14; mov rdi, r13; mov rdx, r12; call rbp
0x00027a08 : mov [rdi - 0x11], ebx; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x000363b9 : add [rax], eax; add [rax], al; mov esi, 1; mov rdi, r12; call rbx
0x0005bd39 : movzx eax, [rax + 0x4a8cc0]; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00031289 : movq [rdi], mm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x000711ba : add rax, 1; mov [rbp + 0x10], rax; pop rbx; pop rbp; pop r12; ret
0x00061255 : mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x00036276 : add eax, [rax]; add [rax], al; mov esi, 2; mov rdi, r14; call rbx
0x00020e9f : mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x000392f5 : add [rax + 0x6c5000], bh; mov [rip + 0x28b99f], edi; pop rbx; ret
0x00001b64 : add rsp, 8; mov rax, rcx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0002a7a4 : mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x00031269 : movq [rdi], mm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x00030c19 : movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0008bb17 : add esp, 8; mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret
0x00037a9b : add rsp, 8; xor eax, eax; pop rbx; pop r12; pop r13; pop rbp; ret
0x0002b2ac : add [rax], al; add [rax], al; mov rdx, [rsi]; mov [rdi], rdx; ret
0x0005bac6 : movzx eax, [rax + 0x4a8cc0]; mov rdx, [rax*8 + 0x4a8ac0]; jmp rdx
0x0000d1ec : add [rax], al; add [rsi - 1], bh; mov rdi, rbx; call [rax + 0x18]
0x000481f3 : movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a77c0]; jmp rdx
0x0002aa54 : mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x000247ed : movzx eax, [rax + rcx]; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x0002a8c4 : mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x00030686 : mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x0002b46c : add [rax], al; add [rax], al; mov edx, [rsi]; mov [rdi], edx; ret
0x0001f323 : mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0008b36e : adc [r13 - 0x577bf040], al; add [rax], al; add [rax + 1], cl; ret
0x0004b605 : movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7cc0]; jmp rdx
0x00002ca6 : add [rax], al; mov [rbp - 0x88], rcx; mov edi, 0x6c42a0; call rax
0x00028515 : mov edx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00027b04 : mov [rdi - 0x11], ebx; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00076120 : sbb r10, r11; mov [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret
0x000009a5 : add cl, [rdi]; test [rip + 0x5b000001], dl; pop rbp; pop r12; ret
0x0008b36f : adc [rbp - 0x577bf040], al; add [rax], al; add [rax + 1], cl; ret
0x00008980 : add esp, 8; mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0007e89d : pop rbx; pop rdx; and al, 0; add [rsi + 0x6c], 0; add rsp, 8; ret
0x00059824 : mov eax, ebp; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0008c540 : adc r10, r11; mov [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret
0x00067c0b : add [rax], al; add [rax], al; add [rax + 0x6b], bh; syscall ; ret
0x0002a835 : mov ecx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x00028715 : mov edx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0004549e : add [rax], al; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x00062048 : mov [rbx + 0x74], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000620b8 : mov [rax + 0x18], rdx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x00032930 : movzx eax, [rdi - 0xd]; movzx edx, [rsi - 0xd]; sub eax, edx; ret
0x0001f5ca : mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0004578f : add [rcx + rcx*4 - 0xa], cl; mov rdi, r13; mov rdx, r12; call rbp
0x0004b7ec : movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7bc0]; jmp rdx
0x0002b5bb : add [rax], 0; add [rax], al; movzx edx, [rsi]; mov [rdi], dl; ret
0x0006dbb4 : lea rax, [rax + rcx*4]; sub rax, rdx; mov [rdi + 0x308], rax; ret
0x0001588d : mov eax, eax; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000311e9 : movq [rdi], mm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x00032910 : movzx eax, [rdi - 0xf]; movzx edx, [rsi - 0xf]; sub eax, edx; ret
0x00006ff6 : mov rdi, r12; lea r9, [r15 + rax]; mov [rsp + 0x10], r9; call r13
0x000311c1 : movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x000087a3 : add al, 1; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x00060180 : add rsp, 8; mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret
0x00027f44 : mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00032950 : movzx eax, [rdi - 0xb]; movzx edx, [rsi - 0xb]; sub eax, edx; ret
0x00032940 : movzx eax, [rdi - 0xc]; movzx edx, [rsi - 0xc]; sub eax, edx; ret
0x000711bb : add eax, 1; mov [rbp + 0x10], rax; pop rbx; pop rbp; pop r12; ret
0x00027b03 : mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00018be4 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x0006dbb5 : lea eax, [rax + rcx*4]; sub rax, rdx; mov [rdi + 0x308], rax; ret
0x00060181 : add esp, 8; mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret
0x0000c6fc : add [rax], al; add [rdx + 2], bh; mov rdi, r12; call [rax + 0x48]
0x000315f2 : movnti [rsi + 0x66], esp; nop cs:[rax + rax]; lea rax, [rdi]; ret
0x000361fd : add eax, [rax]; add [rax], al; mov esi, 1; mov rdi, r14; call rbx
0x0008c541 : adc edx, ebx; mov [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret
0x00030b41 : movq mm0, [rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x0000d932 : mov [rbx + 0x20], rax; mov [rbx], edx; xor eax, eax; pop rbx; ret
0x000306c7 : mov eax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x00027a4f : mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0000d347 : add rsp, 8; mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret
0x000470ba : movzx eax, ch; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0000d348 : add esp, 8; mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret
0x00006178 : mov edx, [rsp]; mov [rax + 8], rdx; pop rbx; pop rbp; pop r12; ret
0x0000e345 : add [rax], al; mov [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret
0x0008aabe : mov ebx, eax; mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x00044f3c : add [rax], al; add [rax], al; mov rax, -0x18; add rax, fs:[0]; ret
0x00076935 : pop rbp; pop r12; pop r13; pop r14; mulss xmm0, xmm0; pop r15; ret
0x00038f1b : mov [rip + 0x28bdbb], edi; mov [rip + 0x28bd78], r8d; pop rbx; ret
0x00064667 : add [rbx + 0x5d], bl; mov rax, r12; pop r12; pop r13; pop r14; ret
0x0000b689 : add [rax], al; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000279a5 : mov edx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00027a50 : mov [rdi - 0x11], ebx; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0000e5e8 : add [rax - 0x39], cl; or [rax], al; add [rax], al; add bl, dh; ret
0x0004206c : add [rax], eax; add [rax - 0x7d], cl; rol [rcx + rcx*2], 0x39; ret
0x00037b0d : movsxd rcx, eax; cmp [rdx + rcx*8 - 8], 1; sbb eax, 0; leave ; ret
0x0004549d : add [rax], r8b; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x00033505 : dec [rdi]; add [rax], al; pop rbx; lea rax, [r9 + 1]; pop rbp; ret
0x000279a4 : mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0008aabd : mov rbx, rax; mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x00006177 : mov rdx, [r12]; mov [rax + 8], rdx; pop rbx; pop rbp; pop r12; ret
0x000312a9 : movq [rdi], mm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x0008f6dd : add [rax], al; mov eax, 7; pop rbx; pop rbp; pop r12; pop r13; ret
0x0008f6c4 : add [rax], al; mov eax, 2; pop rbx; pop rbp; pop r12; pop r13; ret
0x00061efc : add [rax], eax; add [rsi - 1], bh; mov rdi, r15; call [rax + 0x18]
0x000102f4 : add [rbp - 0x17], dh; mov rax, rdi; pop rbx; pop rbp; pop r12; ret
0x0000e842 : xchg eax, ebx; add [rax], al; add [rsi - 1], bh; call [rax + 0x30]
0x00044f5c : add [rax], al; add [rax], al; mov rax, -0x28; add rax, fs:[0]; ret
0x000264de : movaps xmm[rdi - 0x20], xmm4; movaps xmm[rdi - 0x10], xmm5; jmp r9
0x00059f66 : xchg eax, edi; add [rax], al; add [rbx - 0x110f43], al; call [rax]
0x00059ca7 : add [rax], al; add [rax], al; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00030a9f : add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; ret
0x0007ecad : mov [rax], 0; mov rdx, [rdi + 0x448]; mov [rax], rdx; pop rbx; ret
0x00044f7c : add [rax], al; add [rax], al; mov rax, -0x20; add rax, fs:[0]; ret
0x0002b5bc : add [rax], al; add [rax], al; movzx edx, [rsi]; mov [rdi], dl; ret
0x0002b31f : add [rbx + 0xe8b0356], cl; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x0005a752 : xchg eax, edi; add [rax], al; add [rbx - 0x116343], al; call [rax]
0x000617b4 : add [rax], eax; add [rsi - 1], bh; mov rdi, rbx; call [rax + 0x18]
0x00031228 : movq [rdi], mm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x000362ac : sbb [rdx], cl; add [rax], al; xor esi, esi; mov rdi, r14; call rbx
0x0008a931 : add eax, [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax
0x00079725 : pop rbp; pop r12; pop r13; pop r14; mulsd xmm0, xmm0; pop r15; ret
0x0005a8ef : mov edx, [rbp + 0x20]; sub rdx, rsi; sar rdx, 2; call [rax + 0x38]
0x0006525d : mov [rdi + rax], ebp; add [rbp - 0x7d], dl; stc ; call [rbx + 0xf]
0x0000a0fe : add [rax], al; add [rcx + rcx*4 - 0xe], cl; mov rdi, rbx; call rax
0x0008a930 : add rax, [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax
0x00010a06 : mov fs:[rax], rdx; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x00009bc3 : xchg eax, ebx; add [rax], al; add [rsi - 1], bh; call [rax + 0x18]
0x0004549f : add [rcx + rcx*4 - 0x1e], cl; mov rsi, rbx; mov rdi, r14; call rbp
0x0007570c : mov [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret
0x000305ad : add [rax], al; add [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret
0x00030c7c : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x00030aa9 : add eax, ebx; nop [rax + rax]; mov rdx, [rsi]; mov [rdi], rdx; ret
0x0002b38f : add [rbx + 0xe8b0256], cl; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x0003109f : add [rbx + 0x477880e], cl; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x000714b2 : add [rax], al; add [rax], al; or [rip + 0x2509f3], 1; pop rbx; ret
0x0006086b : mov eax, [rdx + 0x48]; cmp eax, [rdx + 0x4c]; cmovne eax, ecx; ret
0x0007ec3e : add [rax], al; mov rdx, [rbx + 0x18]; mov [rdx], rax; pop rbx; ret
0x0003ae86 : add [rbx + 0x5d], bl; pop r12; pop r13; xor eax, eax; pop r14; ret
0x0000a99a : mov [rbx + 0x90], -1; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x000315f1 : movnti [r14 + 0x66], r12d; nop cs:[rax + rax]; lea rax, [rdi]; ret
0x00039cdc : int1 ; mov rcx, r12; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x0005a8ee : mov rdx, [r13 + 0x20]; sub rdx, rsi; sar rdx, 2; call [rax + 0x38]
0x0002b3ff : add [rbx + 0xe8b0156], cl; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x000764c0 : adc ecx, [rax - 0x73]; lodsd eax, [rsi]; add [rax - 0x7d], cl; ret
0x0002b54c : add [rax], al; add [rax], al; movzx edx, [rsi]; mov [rdi], dx; ret
0x00030c5c : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x0008a932 : add ecx, [rcx + rcx*4 - 0x16]; mov rsi, r12; mov edi, ebp; call rax
0x0007e859 : mov rax, rdx; xor edx, edx; pop rbx; div rbp; pop rbp; pop r12; ret
0x0001441d : mov [r8 + rbx], sil; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret
0x000607d5 : add ebp, eax; pop rbx; mov rax, rbp; pop rbp; pop r12; pop r13; ret
0x000657ce : add [rax - 0x77], cl; sub [rbx + 0x5d], r11b; pop r12; pop r13; ret
0x0005c04f : add [rax], eax; add [rax], al; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00059c56 : mov [rdx], cs; mov rdx, [rax*8 + 0x4a8bc0]; mov r14d, 0x10; jmp rdx
0x0006095b : xor [rax + 1], bh; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00063a0e : lea rsi, [rsp + 0x40]; mov rdi, [r12]; lea rcx, [rax + 1]; call rbx
0x0000a6cf : add [rax], al; add [rax - 1], bh; add rsp, 8; pop rbx; pop rbp; ret
0x0007e85a : mov eax, edx; xor edx, edx; pop rbx; div rbp; pop rbp; pop r12; ret
0x0007570d : mov [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret
0x0004a73a : mov rsi, r9; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x0000ba54 : pop rbp; mov rax, r13; sub rax, r12; pop r12; pop r13; pop r14; ret
0x00035c13 : add [rax], 0; add [rax], al; mov rsi, [rbx]; mov rdi, r12; call rbp
0x00060948 : add [rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x00030a5e : add [rax], al; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; ret
0x0004928e : mov rsi, r9; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x0001441e : mov [rax + rbx], dh; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret
0x0004b2a3 : add [rdi], ecx; test [rdi - 0x16000004], ebp; scasd eax, [rdi]; ret
0x0006078f : add [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call [rax + 0x38]
0x000363e1 : add ecx, [rax]; add [rax], al; xor esi, esi; mov rdi, r13; call rbx
0x000470b9 : movzx eax, bpl; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0000c3b7 : add [rbx + 0x78940c8], al; mov rax, [rdi + 0xd8]; call [rax + 0x48]
0x0008a96e : add [rax], al; mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x00060945 : xor [rax + 2], bh; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0007ecb1 : add [rax], al; mov rdx, [rdi + 0x448]; mov [rax], rdx; pop rbx; ret
0x0006845d : xor eax, eax; lea rsp, [rbp - 0x10]; pop rbx; pop r12; pop rbp; ret
0x00063a0f : lea esi, [rsp + 0x40]; mov rdi, [r12]; lea rcx, [rax + 1]; call rbx
0x00010133 : mov [rbx + 0x18], rbp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0000e14a : pop rbp; mov rax, r12; pop r12; sub rax, r13; pop r13; pop r14; ret
0x00038aef : sub [rcx + 0x415d5bd8], cl; pop rsp; pop r13; pop r14; pop r15; ret
0x0005bb67 : add [rax], eax; add [rax], al; mov rdx, [rax*8 + 0x4a88c0]; jmp rdx
0x00039d7d : leave ; not eax; xor edx, edx; add eax, 2; mov [rsp], eax; call rbx
0x00037ac6 : add [rax], al; add [rbx + 0x41], bl; pop rsp; pop r13; pop rbp; ret
0x00050c13 : xor al, al; mov [rdi], r13; pop rbx; pop rbp; pop r12; pop r13; ret
0x000430a4 : xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0005bf70 : add [rax], eax; add [rax], al; mov rdx, [rax*8 + 0x4a86c0]; jmp rdx
0x00059d49 : mov [rbp - 0x1098], ecx; mov rdi, r15; sar rdx, 2; call [r9 + 0x38]
0x0000b792 : add [rax], al; ror [rdi + 0x49], 0; mov rdx, r13; call [rax + 0x40]
0x00063d5b : mov [rsp], 1; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx
0x0005aea7 : add [rax], eax; add [rax], al; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00001bdc : xor ecx, ecx; pop rbx; pop rbp; pop r12; mov rax, rcx; pop r13; ret
0x00032900 : movzx eax, [rdi - 0x10]; movzx edx, [rsi - 0x10]; sub eax, edx; ret
0x0000aee6 : adc [rcx - 0x3b7cb7fd], cl; or [rax - 1], bh; pop rbx; pop rbp; ret
0x00006500 : add [rcx + 0x415d5bd8], cl; pop rsp; pop r13; pop r14; pop r15; ret
0x000607d4 : add rbp, rax; pop rbx; mov rax, rbp; pop rbp; pop r12; pop r13; ret
0x00036a57 : lea eax, [rdx]; add [rax], al; xor esi, esi; mov rdi, r14; call rbx
0x000359a1 : mov rsi, [rbx]; mov rdi, [rsp + 8]; mov rax, [rsp + 0x10]; call rax
0x000359a2 : mov esi, [rbx]; mov rdi, [rsp + 8]; mov rax, [rsp + 0x10]; call rax
0x00010134 : mov [rbx + 0x18], ebp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0000df11 : add [rcx + rcx*4 - 0x19], cl; lea r13, [rbp + 1]; call [rax + 0x18]
0x0002ad4b : add [rax], al; add [rax], al; add [rbx + 0x5789fc56], cl; cld ; ret
0x00071764 : add [rbp + 0xd], dh; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret
0x00014ccb : add [rax], dh; add r11b, al; nop [rax]; mov [rip + 0x2ae74e], 0; ret
0x0004a73b : mov esi, ecx; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x0009012e : mov rdi, [rsp + 8]; lea r15, [r12 + rcx*8]; mov rsi, [r15]; call r14
0x00015141 : add [rax - 0x77], cl; fcomp [rbx - 0x3d]; xor eax, eax; pop rbx; ret
0x0003057e : add [rax], al; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x0009012f : mov edi, [rsp + 8]; lea r15, [r12 + rcx*8]; mov rsi, [r15]; call r14
0x00028579 : mov [rdi - 0x17], ebx; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0003106e : add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 1]; ret
0x0003ee4d : xchg eax, esp; add r8b, bpl; pop rbx; sub al, 0xfc; jmp [rsi + 0x66]
0x0004937f : mov [rbp - 0x578], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0008dde7 : add [rax], cl; mov [rip + 0x23672f], 8; mov [rip + 0x236729], 8; ret
0x0000f123 : sbb [rbx + rbp], ebx; add bl, al; nop [rax + rax]; xor eax, eax; ret
0x00028178 : mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00061efa : add [rax + 1], 0; add [rsi - 1], bh; mov rdi, r15; call [rax + 0x18]
0x0003773f : add [rax], al; add [rax + 0xca], bh; syscall ; pop rdx; pop rsi; ret
0x00015a9c : add [rax], al; add [rax], al; lea rax, [rdx - 0x10]; add rsp, 8; ret
0x00027bd7 : mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00008540 : mov rax, [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call [rax + 0x10]
0x00008a51 : mov [rax + 0x140], rdx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00035c14 : add [rax], al; add [rax], al; mov rsi, [rbx]; mov rdi, r12; call rbp
0x00028379 : mov [rdi - 0x16], ebx; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0000da51 : add [rax], al; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x000617b2 : add [rax + 1], 0; add [rsi - 1], bh; mov rdi, rbx; call [rax + 0x18]
0x000337fc : add [rax], al; add [rbx + 0x25], bl; add ah, bh; add eax, [rax]; ret
0x0004ec87 : add [rbp - 0x2dce00b9], cl; div ecx; add r8d, eax; mov eax, r8d; ret
0x0000ba09 : mov rax, [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call [rax + 0x70]
0x000470d4 : add [rax], al; add [rbx - 0x16], cl; mov rdx, r13; call [rax + 0x38]
0x00008541 : mov eax, [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call [rax + 0x10]
0x0000f1a2 : add al, [rdx + 0x2b]; add [rbx + 0x2b41f705], al; add [rcx], al; ret
0x00027fa8 : mov [rdi - 0x14], ebx; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x000638fa : add [rsi + 0x13], dh; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret
0x0004928f : mov esi, ecx; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x00010d2b : add [rax], al; add [rax], al; add [rax - 0x7f], cl; jmp [rax + 0x18]
0x0006218b : mov rdx, [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call [rdx + 0x30]
0x0004a840 : mov [rbp - 0x4f8], edx; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00008b18 : mov eax, [rdi + 0xd8]; mov rdx, rbp; mov rsi, r12; call [rax + 0x38]
0x00027bd8 : mov [rdi - 0x12], ebx; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000707b0 : add [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; pop r13; ret
0x0005edd8 : add [rax], al; mov eax, ecx; pop rbx; pop rbp; pop r12; pop r13; ret
0x0008a96f : add [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call [rbx]
0x0008508f : add al, [rax]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00091a0f : add [rcx], dh; fisttp [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; ret
0x0000ad1a : add [rax], al; add [rbx - 0x3d], bl; nop ; mov rax, -1; pop rbx; ret
0x00027fa7 : mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00008a52 : mov [rax + 0x140], edx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0007eab5 : add [rax], al; add [rsi + 0x47ebd0], bh; mov edi, 0x6c4640; call rax
0x0000ba0a : mov eax, [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call [rax + 0x70]
0x00027db7 : mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0003aa47 : add [rax], al; add [rsi + 0x43bab0], bh; mov edi, 0x6c4220; call rax
0x0005983c : add [rax], al; add [rbx - 0x1e], cl; mov rdx, r12; call [rax + 0x38]
0x00008b17 : mov rax, [rdi + 0xd8]; mov rdx, rbp; mov rsi, r12; call [rax + 0x38]
0x0000f1f8 : add [rax], al; mov [rip + 0x2b41a0], 0; mov [rip + 0x2b4199], 0; ret
0x00018bfe : add [rax], al; movzx ecx, [rsi]; movzx eax, [rdi]; sub eax, ecx; ret
0x00027db8 : mov [rdi - 0x13], ebx; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0008a96d : add [rax], r8b; mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x00028378 : mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0000de34 : add [rax], al; add [rbx + 0x48], dl; mov ebx, edi; call [rax + 0x20]
0x00049380 : mov [rbp - 0x578], edx; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00008d44 : mov eax, [rbx + 0xd8]; mov rsi, r10; mov rdi, rbx; call [rax + 0x58]
0x0007af47 : add [rbp + 0x5c840fed], al; add al, [rax]; add [rax - 0x39], cl; ret
0x00008d43 : mov rax, [rbx + 0xd8]; mov rsi, r10; mov rdi, rbx; call [rax + 0x58]
0x00044f4f : add bl, al; nop cs:[rax + rax]; mov rax, -0x28; add rax, fs:[0]; ret
0x00028578 : mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00028179 : mov [rdi - 0x15], ebx; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0002491e : add [rax], al; movzx eax, [rdi]; movzx ecx, [rsi]; sub eax, ecx; ret
0x0000dbd1 : add [rax], al; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x00016789 : add [rax + rax], cl; add [rax], al; xor eax, eax; add rsp, 0x18; ret
0x0004a83f : mov [rbp - 0x4f8], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00060e6e : add eax, [rax]; add [rax + 1], bh; add rsp, 8; pop rbx; pop rbp; ret
0x00044f6f : add bl, al; nop cs:[rax + rax]; mov rax, -0x20; add rax, fs:[0]; ret
0x0006218c : mov edx, [rbx + 0xd8]; mov esi, eax; mov rdi, rbx; call [rdx + 0x30]
0x00063d60 : add [rax], al; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx
0x0000c6f8 : xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, r12; call [rax + 0x48]
0x000911a3 : mov rdx, [rsp]; mov rdi, rbx; mov rsi, [r15 + r14*8 + 0x10]; call rbp
0x0000e7c7 : add [rax], al; add bl, ch; xchg eax, esi; nop [rax]; mov rax, -1; ret
0x0003dc4e : mov [rsp + 8], rax; lea rax, [rsp + 0xa0]; mov [rsp], rax; call [rbx]
0x0007e8c9 : add [rax], eax; add [rsi + 0x47ebd0], bh; mov edi, 0x6c4640; call rax
0x0000b465 : mov [rbx + 8], eax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x00047631 : mov [rbp - 0x578], ecx; mov rsi, r14; mov rdi, rbx; call [rax + 0x38]
0x0002788f : mov [rdi - 0x18], edx; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0000c609 : mov [rbx + 0x90], -1; cmove eax, r12d; pop rbx; pop rbp; pop r12; ret
0x0006385d : add [rax], al; add [rax - 0x39], cl; rol [rcx], 0; add [rax], al; ret
0x0001c327 : adc bl, al; nop [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x0006387d : add [rax], al; add [rax - 0x39], cl; rol [rbx], 0; add [rax], al; ret
0x00076260 : mov [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x00047b88 : sub rcx, rsi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x0000d8ef : mov [rdi + 0x18], ecx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x0000b464 : mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x0006386d : add [rax], al; add [rax - 0x39], cl; rol [rdx], 0; add [rax], al; ret
0x0000bf89 : add [rax], al; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x0004c356 : add [rax], al; mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret
0x000911a4 : mov edx, [rsp]; mov rdi, rbx; mov rsi, [r15 + r14*8 + 0x10]; call rbp
0x0000dddf : mov [rbx + 0x40], esp; mov [rbx], eax; pop rbx; pop rbp; pop r12; ret
0x00087ffb : add [rax], al; mov [rsp + 0x70], r13; lea rdi, [rsp + 0x70]; call rbp
0x00030abe : add [rax], al; mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; ret
0x0007f03f : add eax, [rax]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0001ca20 : movdqu xmm[rdi + 0x10], xmm8; movdqu xmm[rdi + rdx - 0x20], xmm8; ret
0x000422b8 : add [rax], al; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x0004c378 : sub [rcx], ah; add [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret
0x00042395 : add [rax], al; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x0007625f : mov [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x00027851 : mov [rdi - 0x18], edx; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x0000d9af : add [rax], al; mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x0009055b : add [rax], al; add [rax], al; add [rax - 0x80], al; call [rax + 0x75]
0x0006854f : add [rax - 0x75], cl; or [r8 - 0x7b], cl; sal [rdi + 0x48], 0x89; ret
0x000477aa : mov edx, esi; mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x000714c3 : add [rbx - 0x3d], bl; mov rax, -0x40; pop rbx; mov eax, fs:[rax]; ret
0x00030a7e : add [rax], al; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; ret
0x000638bd : add [rax], al; add [rax - 0x39], cl; rol [rdi], 0; add [rax], al; ret
0x00061b1a : mov eax, [rsp + 0xd8]; mov esi, r14d; mov rdi, r12; call [rax + 0x18]
0x0003ab38 : add [rax], eax; add [rsi + 0x43bab0], bh; mov edi, 0x6c4220; call rax
0x0006214c : add [rax], al; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x0000df0e : movzx esi, [rbp]; mov rdi, r12; lea r13, [rbp + 1]; call [rax + 0x18]
0x0000d8be : mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0000ddde : mov [rbx + 0x40], r12; mov [rbx], eax; pop rbx; pop rbp; pop r12; ret
0x0002788e : mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0004c357 : add [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret
0x0000d8bf : mov [rdi + 0x48], edx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x00087d8a : add [rax], al; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x80]; call rbp
0x0000d8ee : mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x00061b19 : mov rax, [r12 + 0xd8]; mov esi, r14d; mov rdi, r12; call [rax + 0x18]
0x00087f69 : add [rax], al; lea rsi, [rsp + 0xe0]; lea rdi, [rsp + 0x90]; call r12
0x0000c134 : mov [rbx + 0xd8], rax; mov [rdx + 0x140], 0x494fc0; call [rax + 0x20]
0x00027850 : mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00060a27 : add al, [rax]; add [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret
0x00047b89 : sub ecx, esi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x0000c135 : mov [rbx + 0xd8], eax; mov [rdx + 0x140], 0x494fc0; call [rax + 0x20]
0x0000ad63 : mov [rbx + 8], eax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x0000c337 : xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, rbx; call [rax + 0x48]
0x000638ad : add [rax], al; add [rax - 0x39], cl; rol [rsi], 0; add [rax], al; ret
0x000673bb : add [rax], al; mov [rax + 0x20], 0; mov [rax + 0x28], 0; pop rbx; ret
0x000175ba : add [rax - 0x73], cl; add al, 7; cmp [rax], sil; cmovne rax, rdx; ret
0x0009030e : dec [rax - 0x77]; cmc ; movsxd rax, [r8 + rdi*4]; add r8, rax; jmp r8
0x000477a9 : mov rdx, r14; mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x00047630 : mov [rbp - 0x578], rcx; mov rsi, r14; mov rdi, rbx; call [rax + 0x38]
0x00035c45 : add [rax], al; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0000e340 : mov [rbx + 8], 0; mov [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret
0x0003dc4f : mov [rsp + 8], eax; lea rax, [rsp + 0xa0]; mov [rsp], rax; call [rbx]
0x00061e8f : add [rax], al; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x0000ad62 : mov [rbx + 8], rax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x0005a266 : mov [rbp - 0x10f0], edx; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00009a7a : mov eax, [rax + 0x38]; mov rdi, r13; mov [rsp], rax; call [r13 + 0x18]
0x0000fbb6 : add [rax], al; add [rax], al; add [rbx + 0x5d5b080b], al; pop r12; ret
0x0005b717 : mov [rbp - 0x1140], rcx; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00074b82 : mov r15, [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx
0x000714b3 : add [rax], al; add [rbx + 0x2509f30d], al; add [rcx], al; pop rbx; ret
0x000175b6 : mov edx, 0; lea rax, [rdi + rax]; cmp [rax], sil; cmovne rax, rdx; ret
0x0005d7c8 : mov [rbp - 0x10e0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0000bbc3 : mov [rbx + 0x90], eax; mov rax, rbp; add rsp, 8; pop rbx; pop rbp; ret
0x000078a9 : add al, 0; add [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x00008a55 : add [rax], eax; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x00042500 : add [rbx + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; pop rbp; ret
0x00060a3d : add [rax], eax; add [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret
0x0005a265 : mov [rbp - 0x10f0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0008fa94 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, [rdi + 0xa8]; ret
0x0000ce86 : adc [rbp + 0x17], dh; mov [rbx + 0x90], -1; xor eax, eax; pop rbx; ret
0x000305c1 : add [rcx + 0x4418a02], ecx; mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x0002ede3 : mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x0008a997 : add [rbp - 0x7c], dh; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00036271 : mov edi, edi; call rbx; mov edx, 3; mov esi, 2; mov rdi, r14; call rbx
0x00074b83 : mov edi, [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx
0x0006eb10 : mov rax, [r12 + 0x10]; add rax, [rbx]; mov [rbp - 0xe0], r11; call rax
0x00030bb4 : mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x000361f8 : mov edi, edi; call rbx; mov edx, 3; mov esi, 1; mov rdi, r14; call rbx
0x00087905 : mov [rbp + 0xc], ecx; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00030bd5 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x000304fe : add [rax], al; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x00063b51 : lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r13]; call r12
0x000098d0 : mov eax, [rax + 0x38]; mov rdx, r10; mov [rsp], rax; call [r13 + 0x18]
0x0000de47 : lea rdx, [rax + 1]; mov [rbx + 8], rdx; movzx eax, [rax]; pop rbx; ret
0x000096cd : mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x00030bd4 : mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x0005d7c9 : mov [rbp - 0x10e0], edx; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x000749b0 : mov edx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x50; jmp [rax]
0x0003627f : mov rdi, r14; call rbx; mov edx, 2; mov esi, 1; mov rdi, r13; call rbx
0x0000dc80 : lea rax, [rdx + 1]; mov [rbx + 8], rax; movzx eax, [rdx]; pop rbx; ret
0x0007493c : add [rax], al; add [rax], al; mov rax, [rax + 8]; sub rax, fs:[0]; ret
0x00030b74 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x0000c3b6 : add gs:[rbx + 0x78940c8], al; mov rax, [rdi + 0xd8]; call [rax + 0x48]
0x0006515a : add eax, [rax]; add [rax], al; nop ; add rsp, 8; pop rbx; pop rbp; ret
0x0006eb11 : mov eax, [rsp + 0x10]; add rax, [rbx]; mov [rbp - 0xe0], r11; call rax
0x0006515b : add [rax], al; add [rsi - 0x70], ah; add rsp, 8; pop rbx; pop rbp; ret
0x00030bb5 : mov ecx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0000de4a : add [rax - 0x77], ecx; push rbx; or [rdi], cl; mov dh, 0; pop rbx; ret
0x00036280 : mov edi, esi; call rbx; mov edx, 2; mov esi, 1; mov rdi, r13; call rbx
0x00061f8b : add [rax], 0; add [rax], al; mov rax, [rax + 0x140]; call [rax + 0x68]
0x00067eba : mov [r8 + 0x21], cx; movzx ecx, [rsp - 0x15]; mov [r8 + 0x23], cl; ret
0x0000f19d : add [rax], al; mov [rip + 0x2b4202], rdx; add [rip + 0x2b41f7], 1; ret
0x00015255 : add [rax], al; add [rax - 0x77], cl; rcr [rbx + 0x5d], 1; pop r12; ret
0x000363b3 : mov rdi, r13; call rbx; mov edx, 1; mov esi, 1; mov rdi, r12; call rbx
0x0000dc81 : lea eax, [rdx + 1]; mov [rbx + 8], rax; movzx eax, [rdx]; pop rbx; ret
0x00036632 : mov edi, ebp; call rbx; mov edx, 1; mov esi, 2; mov rdi, r12; call rbx
0x00044f28 : movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x00030b54 : mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x00061f7c : xor [rcx + rcx*4 + 0x60], cl; cmp [rcx + 0x5d5b7453], cl; pop r12; ret
0x000096ce : mov eax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x0000c325 : adc eax, [rax]; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x000361f7 : mov rdi, r15; call rbx; mov edx, 3; mov esi, 1; mov rdi, r14; call rbx
0x000363a4 : mov rdi, r14; call rbx; mov edx, 2; mov esi, 2; mov rdi, r13; call rbx
0x0005092c : add [rdi], cl; xchg ebp, esi; add [rax], al; add [rax - 0x7d], cl; ret
0x000098cf : mov rax, [rax + 0x38]; mov rdx, r10; mov [rsp], rax; call [r13 + 0x18]
0x00035ccd : mov rdi, [rbp - 0x40]; mov r15d, r14d; mov rax, [rbp - 0x48]; call rax
0x00059823 : sub cl, [rcx - 0x3b7cb718]; or [rbx + 0x5d], bl; pop r12; pop r13; ret
0x000363a5 : mov edi, esi; call rbx; mov edx, 2; mov esi, 2; mov rdi, r13; call rbx
0x00036270 : mov rdi, r15; call rbx; mov edx, 3; mov esi, 2; mov rdi, r14; call rbx
0x00074a22 : mov edx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x48; jmp [rax]
0x0000bbc2 : mov [rbx + 0x90], rax; mov rax, rbp; add rsp, 8; pop rbx; pop rbp; ret
0x0004de79 : dec [rcx + rcx*4 - 0x3e]; mov [rbp - 0xb0], r8; mov rdi, rbx; call rax
0x00050a35 : add [rax - 1], bh; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0005b718 : mov [rbp - 0x1140], ecx; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00074a21 : mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x48; jmp [rax]
0x0008fa44 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, [rdi + 0xb8]; ret
0x00035cce : mov edi, [rbp - 0x40]; mov r15d, r14d; mov rax, [rbp - 0x48]; call rax
0x00036631 : mov rdi, r13; call rbx; mov edx, 1; mov esi, 2; mov rdi, r12; call rbx
0x0005ab62 : mov [rbp - 0x1190], r9; mov rsi, r14; mov rdi, r15; call [rax + r11*8]
0x000305ae : add [rax], al; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x000749af : mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x50; jmp [rax]
0x0000de48 : lea edx, [rax + 1]; mov [rbx + 8], rdx; movzx eax, [rax]; pop rbx; ret
0x000363b4 : mov edi, ebp; call rbx; mov edx, 1; mov esi, 1; mov rdi, r12; call rbx
0x0008fa34 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, [rdi + 0xa0]; ret
0x00009a79 : mov rax, [rax + 0x38]; mov rdi, r13; mov [rsp], rax; call [r13 + 0x18]
0x00063b52 : lea edx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r13]; call r12
0x000470d1 : mov eax, [rdi + 0xd8]; movsxd r13, edx; mov rdx, r13; call [rax + 0x38]
0x0004c48e : mov [rcx + rdx*8], eax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x00030b55 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x000312f1 : mov [rdi + 0x10], edx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00059839 : mov eax, [rdi + 0xd8]; movsxd r12, edx; mov rdx, r12; call [rax + 0x38]
0x0002ee12 : mov [rdx], eax; mov ax, [rcx + 4]; mov [rdx + 4], ax; mov rax, rdi; ret
0x00030c3c : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x00040862 : mov r8, r12; mov rcx, rbp; mov rdx, [r14]; mov rsi, rbx; call [r13 + 8]
0x0000aec1 : mov rax, [rbx + 8]; movzx eax, [rax]; add rsp, 8; pop rbx; pop rbp; ret
0x000470d0 : mov rax, [rdi + 0xd8]; movsxd r13, edx; mov rdx, r13; call [rax + 0x38]
0x00059a2b : sub ebp, ebx; mov r14, r13; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x0003c14a : mov r8, r12; mov rcx, rbx; mov rdx, [r13]; mov rsi, rbp; call [r15 + 8]
0x0000edb4 : add [rax], al; add [rax - 0x77], cl; fistp [rsi - 1]; call [rax + 0x18]
0x00030b40 : movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x0005a088 : add cl, [rcx + rcx*4 - 0x36]; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x000732b0 : adc [rax - 0x75], cl; and al, 8; mov rax, [rsp]; add rsp, 0x48; jmp r11
0x00036aed : add [rdi], cl; test [rdx + rax - 0x9cf0000], dh; mov rdi, r15; call rbx
0x0003cb62 : mov r8, rbx; mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r15 + 8]
0x000673f6 : syscall ; mov rax, -0x40; mov fs:[rax], edx; xor eax, eax; pop rbx; ret
0x0000c2c0 : add [rax], al; mov [rbx + 0x70], ebp; add rsp, 8; pop rbx; pop rbp; ret
0x0002b4e0 : mov dx, [rsi + 1]; mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x0002ee02 : mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; mov rax, rdi; ret
0x0004c320 : mov eax, [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call [rax + 0x38]
0x0002ede4 : mov [rdx], eax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x0003c592 : mov r8, r15; mov rcx, rbp; mov rdx, [r12]; mov rsi, rbx; call [r14 + 8]
0x000305f1 : add [rcx + 0x3418b02], ecx; mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x0000d9b3 : pop r8; add [rax], al; add [rax], al; mov [rbx + 0x50], 0; pop rbx; ret
0x00031268 : movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x0005f210 : add [rbp - 0x7e1e8737], al; stc ; int3 ; int3 ; int3 ; or al, 0x7e; ret
0x00036cef : push -0x41000003; add eax, [rax]; add [rax], al; mov rdi, r14; call rbx
0x00014269 : lea eax, [rbp + 0x10]; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00031288 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x000312cd : mov [rdi + 0x10], ecx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x000311e8 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x0003124b : mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x0004c31f : mov rax, [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call [rax + 0x38]
0x00030c18 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0003f092 : mov r8, rbx; mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r14 + 8]
0x000311c0 : movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x00030b97 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x000312f0 : mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x0001513b : add [rdi], cl; test [rbx + 0x48000021], edi; mov eax, ebx; pop rbx; ret
0x0003daf2 : mov r8, r12; mov rcx, rbp; mov rdx, [r14]; mov rsi, r13; call [rbx + 8]
0x0003f3b7 : add [rcx + rcx*4 + 0x55], eax; add [rcx], dh; ror [rax + 0x39], cl; ret
0x00067ebb : mov [r8 + 0x21], ecx; movzx ecx, [rsp - 0x15]; mov [r8 + 0x23], cl; ret
0x0005ab63 : mov [rbp - 0x1190], ecx; mov rsi, r14; mov rdi, r15; call [rax + r11*8]
0x0006d868 : mov [rbp - 0xd8], r8; mov [rbp - 0xd0], r9; mov edi, 0x6c21e0; call rax
0x00067f2b : neg edx; mov [rip + 0x25c328], -1; mov fs:[rax], edx; xor eax, eax; ret
0x00059a2a : sub r13, rbx; mov r14, r13; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x00014268 : lea rax, [rbp + 0x10]; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x0000aec2 : mov eax, [rbx + 8]; movzx eax, [rax]; add rsp, 8; pop rbx; pop rbp; ret
0x00061f8c : add [rax], al; add [rax], al; mov rax, [rax + 0x140]; call [rax + 0x68]
0x000685c2 : mov [rbx + 8], r12; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x00060e6d : inc [rbx]; add [rax], al; mov eax, 1; add rsp, 8; pop rbx; pop rbp; ret
0x00031207 : movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x0004c48d : mov [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x00059838 : mov rax, [rdi + 0xd8]; movsxd r12, edx; mov rdx, r12; call [rax + 0x38]
0x000311d4 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x000685c3 : mov [rbx + 8], esp; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x00014c7a : push rbx; add r8b, bpl; scasb al, [rdi]; mov bl, 0xff; jmp [rsi + 0x66]
0x000312cc : mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x00090181 : lea rbp, [r12 + r9 - 8]; mov [rsp + 0x10], r9; mov rsi, [rbp]; call r14
0x0001c3b9 : add [rax], cl; add [rax + rcx + 0x48], dh; lea eax, [rip + 0x852b]; ret
0x0002af32 : movq [rdi + 0x10], mm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x00040863 : mov eax, esp; mov rcx, rbp; mov rdx, [r14]; mov rsi, rbx; call [r13 + 8]
0x0000d9b4 : pop rax; add [rax], al; add [rax], al; mov [rbx + 0x50], 0; pop rbx; ret
0x000312a8 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x0002a7a3 : int1 ; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x00030cf7 : push rsi; adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0003c14b : mov eax, esp; mov rcx, rbx; mov rdx, [r13]; mov rsi, rbp; call [r15 + 8]
0x00030bf5 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x00045735 : add al, 0; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0007472b : add [rax], al; add [rax], al; nop ; mov rax, fs:[0]; add rax, -0x10; ret
0x00062361 : sub edx, [rax + 8]; mov eax, [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret
0x0001755c : add [rax], al; add [rdi + rax + 0x48], dh; lea eax, [rip + 0x19e58]; ret
0x00030c5b : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x000199ef : add al, [rax]; add [rdi + rax + 0x48], dh; lea eax, [rip + 0x13d25]; ret
0x000728e7 : add [rcx - 0x77], al; mov [rcx + rcx*4 - 0x10], 0x41; call [rdi + rax*8]
0x000141e7 : add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; pop r13; pop r14; ret
0x00008d45 : sbb eax, 0; add [rax], al; mov rsi, r10; mov rdi, rbx; call [rax + 0x58]
0x00036640 : mov rdi, r12; call rbx; xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx
0x00030b84 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x00067ebc : mov [rax + 0x21], ecx; movzx ecx, [rsp - 0x15]; mov [r8 + 0x23], cl; ret
0x0002b4e1 : mov edx, [rsi + 1]; mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x0003c593 : mov eax, edi; mov rcx, rbp; mov rdx, [r12]; mov rsi, rbx; call [r14 + 8]
0x00062360 : sub rdx, [rax + 8]; mov eax, [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret
0x00031310 : mov [rdi + 0x10], edx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x0000ed4c : mov [rbp], rax; mov [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret
0x0002eda5 : add cl, [rax - 0x75]; or [r8 - 0x77], cl; or [rax - 0x77], cl; clc ; ret
0x0000da52 : add [rax - 0x77], cl; fistp [rbx + 0x48]; mov eax, [rax + 0x20]; jmp rax
0x0003130f : mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x0000d314 : add [rcx], dh; sal [rcx], cl; test [rax - 0x77], 0xdf; call [rax + 0x58]
0x0003e94c : mov [rsp], rax; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; call [r13]
0x0003cb63 : mov eax, ebx; mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r15 + 8]
0x0001d0fc : add [rax], al; add al, [rax]; add [rbp + 7], dh; lea rax, [rip + 6]; ret
0x00036641 : mov edi, esp; call rbx; xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx
0x00090182 : lea ebp, [rsp + rcx - 8]; mov [rsp + 0x10], r9; mov rsi, [rbp]; call r14
0x0006ffd6 : mov edx, ebp; pop rbx; pop rbp; mov edi, r12d; pop r12; pop r13; jmp rax
0x00058bb1 : add [rdi], cl; xchg [rbx], esi; add al, [rax]; add [rax - 0x7d], cl; ret
0x00091a5b : add [rax], al; add [rax], al; add [rbx + 0x75c08507], cl; or dh, bl; ret
0x00031080 : mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x000087a1 : add [rdx + 4], 1; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x00030bf4 : mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x0008f601 : mov ecx, [rcx]; mov [rbx + 0x98], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x00028713 : int1 ; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0003136a : movq [rdi], mm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x0005227e : add [rdi], cl; xchg [rcx], ebx; xor al, [rax]; add [rax - 0x7d], cl; ret
0x000017cb : add [rcx], al; add [rax], al; add [rax + 0xf], cl; scasd eax, [rdi]; ret
0x00033b7b : call rax; lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x0000dbd2 : add [rax - 0x77], cl; fistp [rbx + 0x48]; mov eax, [rax + 0x28]; jmp rax
0x00071355 : add [rax], al; mov rbp, -1; pop rbx; mov rax, rbp; pop rbp; pop r12; ret
0x00008542 : sbb eax, 0; add [rax], al; xor esi, esi; mov rdi, rbx; call [rax + 0x10]
0x0008f600 : mov rcx, [rcx]; mov [rbx + 0x98], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x0006ffd5 : mov rdx, rbp; pop rbx; pop rbp; mov edi, r12d; pop r12; pop r13; jmp rax
0x000177bd : add [rax], al; add al, [rax]; add [rbp + 7], dh; lea rax, [rip + 5]; ret
0x00039cda : mov r9, r14; mov rcx, r12; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x0003daf3 : mov eax, esp; mov rcx, rbp; mov rdx, [r14]; mov rsi, r13; call [rbx + 8]
0x0003e94d : mov [rsp], eax; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; call [r13]
0x0003132f : mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x00031330 : mov [rdi + 0x10], edx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x0003138a : movq [rdi], mm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x0007f03e : add eax, cs:[rax]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0000ba0b : sbb eax, 0; add [rax], al; mov rsi, r14; mov rdi, rbx; call [rax + 0x70]
0x0001cf6f : add al, [rax]; add [rdi + rax + 0x48], dh; lea eax, [rip + 0x11f55]; ret
0x0000ed4d : mov [rbp], eax; mov [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret
0x0001638e : dec [rax - 0x75]; cmp cl, [rbx + rcx*4 + 0x47]; or [rbp - 0x77], cl; ret
0x00031227 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x0003f093 : mov eax, ebx; mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r14 + 8]
0x00030c7b : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x0003134a : movq [rdi], mm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x00008544 : add [rax], al; add [rcx], dh; test [rax - 0x77], 0xdf; call [rax + 0x10]
0x0006d869 : mov [rbp - 0xd8], eax; mov [rbp - 0xd0], r9; mov edi, 0x6c21e0; call rax
0x000348f3 : pushfq ; mov edx, eax; neg edx; cmp [rsp - 0x68], 2; cmove eax, edx; ret
0x0002ee22 : mov [rdx], eax; mov eax, [rcx + 3]; mov [rdx + 3], eax; mov rax, rdi; ret
0x000247ec : leave ; movzx eax, [rax + rcx]; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x0002ee33 : mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; mov rax, rdi; ret
0x0000f1fd : sub eax, [r8]; add [rax], al; add [rax], al; mov [rip + 0x2b4199], 0; ret
0x00025f63 : movsxd r9, [r11 + rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9
0x00047280 : mov esi, esp; mov rdi, rbx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x0002ee93 : mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x00030a90 : mov ecx, [rsi]; mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; ret
0x000609f1 : add [rax], al; mov [rsp], 1; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x0002ee64 : mov [rdx], eax; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x00060905 : add [rax], al; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x0000e3e4 : add [rax], al; add [rcx + 0x48d231d1], cl; mov eax, [rax + 0x48]; jmp rax
0x00018c9d : movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0002ee54 : mov [rdx], eax; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x0002eeb4 : mov [rdx], eax; mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x0002ee63 : mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x00039d7c : xor ecx, ecx; not eax; xor edx, edx; add eax, 2; mov [rsp], eax; call rbx
0x00090fa2 : add [rax], al; mov rsi, [r14 + 8]; mov rdx, [r15]; mov rdi, rbx; call rbp
0x00031081 : mov ecx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x000279bc : add [rax], al; add [rax], al; mov rdx, [rsi - 8]; mov [rdi - 8], rdx; ret
0x000478a8 : sub eax, ebp; mov rsi, r13; mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x0008fa21 : add [rax], al; add bl, al; nop cs:[rax + rax]; mov [rdi + 0x98], rsi; ret
0x0003be71 : movsx eax, [rax + 0xb]; mov [rdx + 0x50], ecx; mov [rdx + 0x54], eax; ret
0x0002ee73 : mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x0008fa92 : xchg [rax - 0x3d000000], esi; nop [rax + rax]; mov rax, [rdi + 0xa8]; ret
0x0002ee74 : mov [rdx], eax; mov rax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x00030ad1 : mov ecx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x00001cfc : mov eax, [rbp + 8]; sub eax, [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret
0x000175b9 : add [rax], al; lea rax, [rdi + rax]; cmp [rax], sil; cmovne rax, rdx; ret
0x000620b6 : push rax; sub [rax - 0x77], cl; push rax; sbb [rcx + 0x5bc0310b], cl; ret
0x00063f5d : mov ecx, edi; mov rdx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x00060bed : mov ecx, edi; lea rdx, [rbp - 0x40]; mov rdi, r13; xor r8d, r8d; call r12
0x0000c136 : sbb eax, 0; add [rax], al; mov [rdx + 0x140], 0x494fc0; call [rax + 0x20]
0x00039cdb : mov ecx, esi; mov rcx, r12; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x0003587c : dec [rax - 0x75]; and al, 8; mov rdi, [rax]; mov [rsp + 8], rax; call rbx
0x0002ad4c : add [rax], al; add [rax], al; mov edx, [rsi - 4]; mov [rdi - 4], edx; ret
0x0002eeb3 : mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x0002ee34 : mov [rdx], eax; mov eax, [rcx + 5]; mov [rdx + 5], eax; mov rax, rdi; ret
0x0002ee44 : mov [rdx], eax; mov eax, [rcx + 6]; mov [rdx + 6], eax; mov rax, rdi; ret
0x00062151 : push rax; add [rax], al; add [rax], al; mov [rax + 0x48], 0; pop rbx; ret
0x0000a358 : mov [rsp + 8], rax; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r15 + 8]
0x000478a7 : sub rax, r13; mov rsi, r13; mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x0006014f : add [rax], al; mov rdx, r12; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0000fbb7 : add [rax], al; add [rax], al; or [rbx], 8; pop rbx; pop rbp; pop r12; ret
0x0000e3e5 : add [rax], al; mov ecx, edx; xor edx, edx; mov rax, [rax + 0x48]; jmp rax
0x00060bec : mov rcx, r15; lea rdx, [rbp - 0x40]; mov rdi, r13; xor r8d, r8d; call r12
0x0008fa42 : xchg [rax - 0x3d000000], esp; nop [rax + rax]; mov rax, [rdi + 0xb8]; ret
0x000313aa : movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x0000a359 : mov [rsp + 8], eax; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r15 + 8]
0x0002eda4 : mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x0002ee94 : mov [rdx], eax; mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x00014ccc : xor [rsi + 0x41], al; add bl, al; nop [rax]; mov [rip + 0x2ae74e], 0; ret
0x0008cd40 : add [rbx + 0xc], dh; mov rdx, [rip + 0x2377a6]; add [rdx + rax*2], 1; ret
0x0008ccf0 : add [rax], eax; add [rcx], dh; ror [rax], cl; leave ; cmove rax, rdx; ret
0x00091a0e : add [rax], al; xor ebx, ebx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0002ee43 : mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; mov rax, rdi; ret
0x00063f5c : mov rcx, r15; mov rdx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x00035c43 : add [rax], 0; add [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0002ee53 : mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x0003108c : add al, bl; nop ; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 3]; ret
0x0002eda3 : mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x00030ad0 : mov rcx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x00044efb : mov rcx, -0x28; mov fs:[rcx], rax; mov rax, -0x20; mov fs:[rax], rdx; ret
0x0004727f : mov rsi, r12; mov rdi, rbx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x0007472c : add [rax], al; add [rax + 0x48b4864], dl; and eax, 0; add rax, -0x10; ret
0x0000d9b8 : add [rax - 0x39], cl; push r8; add [rax], al; add [rax], al; pop rbx; ret
0x0008cafa : add [rax], al; add [rax], al; add [rax - 0x1992417], dl; jmp [rsi + 0x66]
0x0006b1b1 : sbb [rbx + 0x5d], bl; pop r12; pop r13; pop r14; mov eax, 1; pop r15; ret
0x0000b4fa : add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x000900dd : mov rdi, [rdx + 8]; sbb ecx, ecx; cmp [rsi + 8], rdi; cmovbe eax, ecx; ret
0x0008f6c3 : add [rax], eax; add [rax + 2], bh; pop rbx; pop rbp; pop r12; pop r13; ret
0x00024d42 : lea r11, [rip + 0x71eb7]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0008f0dc : push rdx; mov eax, [rbx]; movsxd rax, [r15 + rax*4]; add rax, r15; jmp rax
0x0003c5fa : mov esi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call rbx
0x0008ccef : add [rcx], al; add [rax], al; xor edx, edx; or cl, cl; cmove rax, rdx; ret
0x000310f1 : mov ecx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x00060150 : add [rcx + rcx*4 - 0x1e], cl; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00061e93 : xchg eax, ebx; add [rax], al; add [rcx + rcx*4 - 1], cl; call [rax + 0x20]
0x0008c8dc : add [rax], al; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call [rax + 0x48]
0x0003c8e4 : mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x0003fab6 : mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r15
0x0003f105 : mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r12
0x00001875 : add [rcx], cl; add [rax], al; mov [rip + 0x2bf490], rax; xor eax, eax; ret
0x00024906 : lea r11, [rip + 0x722f3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0005bf67 : mov [rdx], cs; mov [rbp - 0x10e8], 1; mov rdx, [rax*8 + 0x4a86c0]; jmp rdx
0x0005bfb4 : add [rax], al; mov [rbp - 0x10fc], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0007bfdd : sub [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; fmulp st(1); ret
0x0005ae9e : mov [rdx], cs; mov [rbp - 0x1100], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00038d5a : add [rcx + rbp - 0x3f], al; shl ecx, 3; pop rbx; shl eax, cl; pop rbp; ret
0x0003c5f9 : mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call rbx
0x0005c047 : add [rax], al; mov [rbp - 0x1110], 1; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x0005bbab : add [rax], al; mov [rbp - 0x1120], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00063deb : lea rdx, [rsp + 0x20]; lea rsi, [rsp + 0x40]; lea rcx, [rax + 4]; call rbx
0x0000c3ec : add [rax], al; add [rax], al; pop rbx; pop rbp; xor eax, eax; pop r12; ret
0x00024e58 : lea ebx, [rip + 0x71da2]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00024a15 : lea r11, [rip + 0x721e4]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000310f0 : mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x00039f0b : add [rax], al; add [rax], al; add [rax - 0x75], cl; add eax, 0x28add1; ret
0x00024e57 : lea r11, [rip + 0x71da2]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0000bdc8 : add [rax - 0x73], cl; push rax; add ecx, ebp; sar esi, -1; jmp [rsi + 0xf]
0x0000d313 : add [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x0008f65f : mov r8, rbx; mov rcx, r12; or esi, 2; mov rdx, [r12]; mov edi, 1; call rax
0x0000bdf2 : add [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbp; call [rax + 0x78]
0x0006d507 : movsd [rdi], [rsi]; add [rax], eax; add [rbp - 0x7b], cl; jmp [rsi - 0x70]
0x0002525b : lea ebx, [rip + 0x7199f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0003db69 : mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x0003de3e : mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x0003c2a5 : mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r14
0x0003cbc4 : mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r15
0x0003cbc5 : mov esi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r15
0x0003c2a6 : mov esi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r14
0x0000b791 : add [rax], eax; add al, al; add [r9 + rcx*4 - 0x16], cl; call [rax + 0x40]
0x0003e4e0 : mov rax, [rsp + 0x28]; mov [rsp + 8], esi; mov rsi, [rsp + 0x58]; call rax
0x00010abb : mov [rip + 0x2b294f], eax; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x000714aa : inc [rbp + 0x481775c0]; mov [rbx], 0; or [rip + 0x2509f3], 1; pop rbx; ret
0x0003c1ac : mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call rbx
0x0000c46e : add [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x000485ee : add [rax], al; mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x000252ea : lea ebx, [rip + 0x71910]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00063dec : lea edx, [rsp + 0x20]; lea rsi, [rsp + 0x40]; lea rcx, [rax + 4]; call rbx
0x0009030c : movzx edi, bh; mov rbp, rsi; movsxd rax, [r8 + rdi*4]; add r8, rax; jmp r8
0x00045472 : add [rax], al; mov rdx, r12; mov rsi, rbx; mov rdi, [rsp + 0x18]; call rbp
0x00009859 : add [rax], al; mov rsi, r12; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x00035c44 : add [rax], al; add [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x00010aba : mov [rip + 0x2b294f], rax; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x00024f1e : lea ebx, [rip + 0x71cdc]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0008e97b : lea rdx, [rip + 0x240f6]; movsxd rcx, [rdx + rcx*4]; add rdx, rcx; jmp rdx
0x00024b47 : lea ebx, [rip + 0x720b3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0000bdf1 : add [rax], al; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call [rax + 0x78]
0x00063da2 : add [rax], al; sub rsp, -0x80; mov rax, -1; pop rbx; pop rbp; pop r12; ret
0x0007ec51 : mov eax, [rbx + 0x18]; mov rdx, [rdi + 0x30]; mov [rax], rdx; pop rbx; ret
0x000252e9 : lea r11, [rip + 0x71910]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00024b46 : lea r11, [rip + 0x720b3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000353c7 : mov esi, 2; mov rdi, rbx; mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax
0x0000c6f7 : add [rcx], dh; idiv [rcx + 3]; mov edx, 2; mov rdi, r12; call [rax + 0x48]
0x0006b14f : add [rcx - 0x73], cl; add [rax + 0xf4c3afa], rax; ror [rcx - 0x7d], 1; ret
0x000615c9 : mov esi, ebp; mov rax, [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x00064088 : sub [rcx + rcx*4 - 0xf], cl; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x000310a0 : mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x0005bffa : mov [rdx], cs; mov [rbp - 0x1114], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0005bd83 : mov [rdx], cs; mov [rbp - 0x1130], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0000c6fb : add eax, [rax]; add [rax], al; mov edx, 2; mov rdi, r12; call [rax + 0x48]
0x0008c8db : add [rax], al; add [rcx - 0x1976b317], cl; mov rdi, rbx; call [rax + 0x48]
0x00024d43 : lea ebx, [rip + 0x71eb7]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0003c8e5 : mov esi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x00024907 : lea ebx, [rip + 0x722f3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0003f106 : mov esi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r12
0x000900de : mov edi, [rdx + 8]; sbb ecx, ecx; cmp [rsi + 8], rdi; cmovbe eax, ecx; ret
0x00042e55 : sub [rax], al; add [rsi + rax - 0x17], dh; adc [rip - 0xc6f0003], esp; ret
0x0007018c : add [rax - 0x39], cl; adc [rax + 0x48004704], spl; mov [rax + 8], edx; ret
0x0003db6a : mov esi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x0003de3f : mov esi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x0000c33a : add eax, [rax]; add [rax], al; mov edx, 2; mov rdi, rbx; call [rax + 0x48]
0x00040414 : mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call r14
0x0000b683 : mov [r12 + 0x90], rdx; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x00000aa4 : mov eax, ebp; sar rax, 1; pop rbp; mov [rip + 0x2c131f], rax; pop r12; ret
0x0003fab7 : mov esi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r15
0x0000a29d : mov edx, [rbx + 0x18]; sar r8, 2; lea rsi, [rax + 0x58]; call [r15 + 0x30]
0x0005ff76 : add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x38]
0x0002504f : lea r11, [rip + 0x71baa]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00040415 : mov esi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call r14
0x0002aedc : add [rax], al; add [rax], al; movzx edx, [rsi - 1]; mov [rdi - 1], dl; ret
0x0003e4e1 : mov eax, [rsp + 0x28]; mov [rsp + 8], esi; mov rsi, [rsp + 0x58]; call rax
0x0008e97c : lea edx, [rip + 0x240f6]; movsxd rcx, [rdx + rcx*4]; add rdx, rcx; jmp rdx
0x000712dd : add [rax], dl; add [rax], al; mov rax, rbp; pop rbx; pop rbp; pop r12; ret
0x00030602 : add [rax - 0x77], ecx; add cl, [rbx + 0x42890541]; add eax, 0x8428d48; ret
0x0000b684 : mov [rsp + 0x90], edx; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0000c336 : add [rcx], dh; idiv [rcx + 3]; mov edx, 2; mov rdi, rbx; call [rax + 0x48]
0x00047632 : lea ecx, [rax + 0x4cfffffa]; mov esi, esi; mov rdi, rbx; call [rax + 0x38]
0x0000a29c : mov rdx, [rbx + 0x18]; sar r8, 2; lea rsi, [rax + 0x58]; call [r15 + 0x30]
0x000762e6 : add [rax], al; adc [rax], al; or rax, rsi; mov [rdi], rax; mov eax, 1; ret
0x0006090a : add [rax], al; add [rax], al; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x0007ec50 : mov rax, [rbx + 0x18]; mov rdx, [rdi + 0x30]; mov [rax], rdx; pop rbx; ret
0x00025363 : lea r11, [rip + 0x71896]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0005bdc5 : mov [rdx], cs; mov [rbp - 0x1134], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00024a16 : lea ebx, [rip + 0x721e4]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000088fc : add [rax - 0x73], cl; mov al, dh; add [rax], al; add [rax - 0x77], cl; ret
0x0005bb5e : mov [rdx], cs; mov [rbp - 0x1120], 1; mov rdx, [rax*8 + 0x4a88c0]; jmp rdx
0x00000aa3 : mov rax, rbp; sar rax, 1; pop rbp; mov [rip + 0x2c131f], rax; pop r12; ret
0x00059c9f : add [rax], al; mov [rbp - 0x1110], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x0002ae5c : add [rax], al; add [rax], al; movzx edx, [rsi - 2]; mov [rdi - 2], dx; ret
0x0002525a : lea r11, [rip + 0x7199f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00024f1d : lea r11, [rip + 0x71cdc]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00070ba4 : add [rip + 0x7894800], esp; mov rax, [rip + 0x253bb7]; mov [rsi], rax; ret
0x00024dda : lea ebx, [rip + 0x71e20]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0000f1fe : sub eax, [rax]; add [rax], al; add [rax], al; mov [rip + 0x2b4199], 0; ret
0x0004ec88 : lea eax, [rdi - 1]; xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret
0x0002a4e7 : add [rax], 0; add [rdi], cl; cmp [rbx - 1], -1; dec [rax - 0x7f]; ret 0x80
0x0001c0d2 : stosb [rdi], al; add al, [rax]; add [rax + 1], cl; clc ; add rax, rcx; ret
0x00025050 : lea ebx, [rip + 0x71baa]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0000f11b : add [rax], al; add [rax], al; add [rax - 0x75], cl; add eax, 0x2b1c19; ret
0x0008f6dc : add [rax], eax; add [rax + 7], bh; pop rbx; pop rbp; pop r12; pop r13; ret
0x0004206b : popfq ; add [rax], eax; add [rax - 0x7d], cl; rol [rcx + rcx*2], 0x39; ret
0x00025364 : lea ebx, [rip + 0x71896]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0005aee0 : mov [rdx], cs; mov [rbp - 0x1108], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00024dd9 : lea r11, [rip + 0x71e20]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0008c6a4 : add [rcx], cl; or edx, eax; mov [rsp - 4], edx; movss xmm0, [rsp - 4]; ret
0x0003c1ad : mov esi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call rbx
0x00030b11 : mov ecx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; ret
0x0001c3a3 : add [rax], al; add al, [rax]; add [rbp + 8], dh; lea rax, [rip + 0x1f]; ret
0x00035234 : add [rbp + 0x482178c0], al; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x0002b241 : mov edx, [rsi + 1]; mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x000673b6 : mov [rax + 0x18], 0; mov [rax + 0x20], 0; mov [rax + 0x28], 0; pop rbx; ret
0x0002b0f1 : mov edx, [rsi + 4]; mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x00045473 : add [rcx + rcx*4 - 0x1e], cl; mov rsi, rbx; mov rdi, [rsp + 0x18]; call rbp
0x00030ae1 : mov ecx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; ret
0x0002b400 : mov edx, [rsi + 1]; mov ecx, [rsi]; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x0002a4e8 : add [rax], al; add [rdi], cl; cmp [rbx - 1], -1; dec [rax - 0x7f]; ret 0x80
0x0002b240 : mov rdx, [rsi + 1]; mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x0002b1d0 : mov rdx, [rsi + 2]; mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x00038d59 : add [rax], al; sub ecx, r8d; shl ecx, 3; pop rbx; shl eax, cl; pop rbp; ret
0x00073627 : mov edi, [rsp + 0x28]; mov rsp, rbx; mov rbx, [rsp]; add rsp, 0x30; jmp r11
0x0005ff77 : add [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call [rax + 0x38]
0x00071f0a : movabs al, gs:[0x415c415bd8658d48]; pop rbp; pop r14; pop r15; pop rbp; ret
0x0006dbdd : lea rax, [rax + rdx*4]; mov [rdi + 0x2ec], edx; mov [rdi + 0x300], rax; ret
0x00030b20 : mov rcx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; ret
0x00073626 : mov rdi, [rsp + 0x28]; mov rsp, rbx; mov rbx, [rsp]; add rsp, 0x30; jmp r11
0x0002b1d1 : mov edx, [rsi + 2]; mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x00062147 : mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x00061e8a : mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x000609f6 : add [rax], eax; add [rax], al; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x0008bcfb : xor esi, ebx; clc ; dec [rbx + rcx*4 + 0x3d]; fimul [rsi - 0x76b7ffdd]; ret
0x00014e19 : stosd [rdi], eax; mov rsi, [rsp + 0x18]; pop rdx; pop rbx; pop rbp; jmp rax
0x0002afa0 : mov rdx, [rsi + 7]; mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x0004c321 : sbb eax, 0; add [rax], al; movsxd rdx, ebp; mov rdi, rbx; call [rax + 0x38]
0x00061b1e : add [rax], al; add [rcx + rcx*4 - 0xa], al; mov rdi, r12; call [rax + 0x18]
0x00068044 : mov eax, [rbp + rax*8]; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0002afa1 : mov edx, [rsi + 7]; mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x0002b390 : mov edx, [rsi + 2]; mov ecx, [rsi]; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x0000b4fb : add [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x00084f0e : add rax, 1; mov [rbp], rax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret
0x0002b080 : mov rdx, [rsi + 5]; mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0002b320 : mov edx, [rsi + 3]; mov ecx, [rsi]; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x00030b10 : mov rcx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; ret
0x00068566 : inc [rbp + 0x48e575c0]; add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0002edbb : add [rax], al; add [rax], al; add [rdx + 0x48028801], cl; mov eax, edi; ret
0x0002a832 : push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x0008f660 : mov eax, ebx; mov rcx, r12; or esi, 2; mov rdx, [r12]; mov edi, 1; call rax
0x00068043 : mov rax, [r13 + rax*8]; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x00060791 : adc [rax], al; add [rax], al; mov rsi, r13; mov rdi, r12; call [rax + 0x38]
0x00091d24 : add al, [rax]; movzx r8d, r8b; movsxd rax, [r9 + r8*4]; add r9, rax; jmp r9
0x0002b161 : mov edx, [rsi + 3]; mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x00030b21 : mov ecx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; ret
0x0001d099 : add [rax], al; add al, [rax]; add [rbp + 7], dh; lea rax, [rip + 0x79]; ret
0x00030af0 : mov rcx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; ret
0x00030b00 : mov rcx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; ret
0x0002b0f0 : mov rdx, [rsi + 4]; mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x0001ca1f : add bl, dh; movq [rdi + 0x10], mm0; movdqu xmm[rdi + rdx - 0x20], xmm8; ret
0x00030af1 : mov ecx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; ret
0x0002b160 : mov rdx, [rsi + 3]; mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x0001c32b : add [rax], 0; add [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x00030b01 : mov ecx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; ret
0x00084f0f : add eax, 1; mov [rbp], rax; mov rax, rbx; add rsp, 8; pop rbx; pop rbp; ret
0x0006234b : sub rdx, [rax + 0x10]; mov eax, [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret
0x0009030b : movzx edi, dil; mov rbp, rsi; movsxd rax, [r8 + rdi*4]; add r8, rax; jmp r8
0x00030ae0 : mov rcx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; ret
0x0002b081 : mov edx, [rsi + 5]; mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0006234c : sub edx, [rax + 0x10]; mov eax, [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret
0x0002b011 : mov edx, [rsi + 6]; mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x0008fc2d : mov r8, rbx; mov rcx, r13; mov rdx, [r13]; mov esi, 1; mov edi, 1; call rax
0x0000d9aa : mov [rbx + 0x48], 0; mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x0006dbde : lea eax, [rax + rdx*4]; mov [rdi + 0x2ec], edx; mov [rdi + 0x300], rax; ret
0x0003762b : int1 ; cmpsd [rsi], [rdi]; sub [rax], al; add rsp, 8; pop rbx; pop rbp; ret
0x0002b010 : mov rdx, [rsi + 6]; mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x0000985a : add [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x0000ba0d : add [rax], al; add [rcx + rcx*4 - 0xa], cl; mov rdi, rbx; call [rax + 0x70]
0x0002a8c2 : push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x00030aa0 : mov ecx, [rsi]; mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; ret
0x00037626 : mov eax, [rbx]; mov [rip + 0x28a7f1], rax; add rsp, 8; pop rbx; pop rbp; ret
0x0000dbcd : mov eax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x000279bd : add [rax], al; add [rax - 0x75], cl; push rsi; clc ; mov [rdi - 8], rdx; ret
0x000013fd : mov esi, [rsp + 0x10]; mov edi, [rsp + 0xc]; mov rax, [rsp + 0x18]; call rax
0x00045241 : xchg edx, ebp; add [rax], al; add [rbp + 0x480e79d2], al; add esp, 0xd0; ret
0x0002edcf : add [rsi - 0x75], ah; add [rsi - 0x77], esp; add cl, [rax - 0x77]; clc ; ret
0x000608ff : mov [rsp + 8], 0; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00030aa8 : push rdi; add eax, ebx; nop [rax + rax]; mov rdx, [rsi]; mov [rdi], rdx; ret
0x0000b7ba : add [rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x00070080 : inc [rbp + 0x75c389c0]; mov rdi, [rsp + 0x38]; mov r9, [rsp + 0x30]; call r9
0x0008f9e5 : add [rax], al; add [rsi + 0x48], dh; mov [rdi + rsi*8], edx; add rsp, 8; ret
0x0008e7da : add al, [rax]; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x000230dc : add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret
0x00061f7d : mov [rax + 0x38], r12; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x00008dac : dec [rax - 0x75]; sbb eax, 0; add [rax], al; mov rdi, rbx; call [rax + 0x68]
0x0008fa1f : xchg [rax - 0x3d000000], ebx; nop cs:[rax + rax]; mov [rdi + 0x98], rsi; ret
0x0000da4c : mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x00014266 : add [r8 - 0x73], r9b; adc [r11 + 0x5d], r11b; pop r12; pop r13; pop r14; ret
0x000762f2 : add [rax], al; add bl, al; nop cs:[rax + rax]; mov [rdx], 0; mov eax, 1; ret
0x0000844d : mov esp, ebx; lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x0002ed4f : add [rax - 0x75], cl; add [rax - 0x77], ecx; add cl, [rax - 0x77]; clc ; ret
0x00015daa : mov [rip + 0x2ab67c], 1; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x000257be : add [rax], al; movzx eax, [rdi - 1]; movzx ecx, [rsi - 1]; sub eax, ecx; ret
0x000013fc : mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; mov rax, [rsp + 0x18]; call rax
0x00030593 : mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x0000a5d2 : lea rsi, [rax + 0x58]; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x0008fd15 : mov esi, [rbp - 0x10]; mov r15, [rbp - 8]; mov rbp, [rbp]; mov rsp, rcx; ret
0x000609eb : mov [rsp + 8], 0; mov [rsp], 1; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00027f52 : push rsi; std ; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x0008fc2e : mov eax, ebx; mov rcx, r13; mov rdx, [r13]; mov esi, 1; mov edi, 1; call rax
0x00070a3e : add [rax], al; add rsp, 8; xor edx, edx; pop rbx; mov eax, edx; pop rbp; ret
0x00014267 : add [rax - 0x73], cl; adc [r11 + 0x5d], r11b; pop r12; pop r13; pop r14; ret
0x0000dbcc : mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x0008fd14 : mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; mov rbp, [rbp]; mov rsp, rcx; ret
0x00008d47 : add [rax], al; add [rcx + rcx*4 - 0x2a], cl; mov rdi, rbx; call [rax + 0x58]
0x0001c32c : add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret
0x0000a5d3 : lea esi, [rax + 0x58]; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x000620d7 : add [rax - 0x75], cl; add [rax + 1], 0; add [rsi - 1], bh; call [rax + 0x18]
0x00074607 : movsd [rdi], [rsi]; add [rax], al; mov rax, [rsp + 0x48]; add rsp, 0x78; ret
0x0000e731 : add [rax], al; add [rax], al; add bl, al; nop [rax + rax]; xor eax, eax; ret
0x00061f7e : mov [rax + 0x38], esp; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x0000da4d : mov eax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x0002491d : add [rax], al; add [rdi], cl; mov dh, 7; movzx ecx, [rsi]; sub eax, ecx; ret
0x00060792 : add [rax], al; add [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call [rax + 0x38]
0x00030a7b : add [rax], al; add [rax], al; add [rbx + 0x477880e], cl; mov [rdi], ecx; ret
0x0006e10c : add [rax], al; add [rax], al; mov rax, [rip + 0x253dc1]; add rsp, 8; jmp rax
0x0001ca1e : add bl, sil; movq [rdi + 0x10], mm0; movdqu xmm[rdi + rdx - 0x20], xmm8; ret
0x0000844c : mov rsp, rbx; lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x0002250b : adc [rdi + rax - 0x6eeb7500], ecx; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0003108b : add r8b, r11b; nop ; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 3]; ret
0x00033cef : add [rsp + rax - 0x7d], dh; adc [rcx], al; add rsp, 8; pop rbx; pop rbp; ret
0x00037625 : mov rax, [rbx]; mov [rip + 0x28a7f1], rax; add rsp, 8; pop rbx; pop rbp; ret
0x0001c31c : add [rax], al; add [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret
0x00025571 : add [rax], al; movzx eax, [rdi - 1]; movzx edx, [rsi - 1]; sub eax, edx; ret
0x00035c15 : add [rax], al; add [rax - 0x75], cl; xor ecx, [rcx + rcx*4 - 0x19]; call rbp
0x0008829e : mov [rsp + 0x90], rbp; lea rsi, [rsp + 0xe0]; lea rdi, [rsp + 0x90]; call r12
0x0002edbc : add [rax], al; add [rax], al; mov al, [rcx]; mov [rdx], al; mov rax, rdi; ret
0x00037d5c : add [rax], eax; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0003e0f9 : xchg eax, esp; add r8b, bpl; scasd eax, [rdi]; cmp esp, edi; jmp [rsi + 0x66]
0x00045785 : mov rbx, [rsp]; nop [rax]; mov rsi, r14; mov rdi, r13; mov rdx, r12; call rbp
0x000311e7 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x00037595 : add [rbx], al; add [rcx - 0x3b7cb718], cl; adc [rbx + 0x5d], bl; pop r12; ret
0x0008fc75 : mov r13, [rbp - 0x18]; mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; leave ; ret
0x00073655 : mov rcx, [rdi + 0x18]; mov rsi, [rdi + 0x20]; mov rdi, [rdi + 0x28]; call r11
0x00022b80 : mov rax, r11; shr r10, cl; or rax, r10; mov [rdi], rax; pop rbx; pop rbp; ret
0x000744da : mov eax, [rax]; mov rdx, [rsp + 0x48]; add rax, [rdx + 8]; add rsp, 0x58; ret
0x00087f63 : mov [rsp + 0x90], rdx; lea rsi, [rsp + 0xe0]; lea rdi, [rsp + 0x90]; call r12
0x00087ff5 : lea rsi, [rsp + 0xa0]; mov [rsp + 0x70], r13; lea rdi, [rsp + 0x70]; call rbp
0x00022b81 : mov eax, ebx; shr r10, cl; or rax, r10; mov [rdi], rax; pop rbx; pop rbp; ret
0x000430a3 : sbb [rcx], dh; fisttp [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; pop r13; ret
0x00015c10 : add bl, [rax]; add [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x00084f2f : add [rax], al; add [rax], al; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x000881d8 : mov [rsp + 0x70], rdx; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x00045786 : mov ebx, [rsp]; nop [rax]; mov rsi, r14; mov rdi, r13; mov rdx, r12; call rbp
0x0002edcc : add [rax], al; add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov rax, rdi; ret
0x00030b96 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x00036116 : add [rdi], cl; test [rbx + 0x3100000a], dh; test [rax - 0x77], 0xef; call rbx
0x000305d2 : mov [rdx], eax; mov ax, [rcx + 4]; mov [rdx + 4], ax; lea rax, [rdx + 5]; ret
0x0000a558 : mov edi, ebx; pop rbx; mov rax, [rax + 0x140]; mov rax, [rax + 0x20]; jmp rax
0x0008e5d7 : add [rcx - 0x77], cl; mov [rax], fs; add [rax], al; add [rax - 0x77], cl; ret
0x0007d46b : add [rax], al; add [rcx - 0x43], al; add [rax], al; add [rax - 0x77], cl; ret
0x00087f64 : mov [rsp + 0x90], edx; lea rsi, [rsp + 0xe0]; lea rdi, [rsp + 0x90]; call r12
0x00088367 : mov [rsp + 0x70], rbx; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x00047f28 : mov esi, [rbp + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x0000a557 : mov rdi, rbx; pop rbx; mov rax, [rax + 0x140]; mov rax, [rax + 0x20]; jmp rax
0x000744d9 : mov rax, [rax]; mov rdx, [rsp + 0x48]; add rax, [rdx + 8]; add rsp, 0x58; ret
0x0002832f : add [rbx + 0x4e8bfb56], cl; cld ; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x000305c2 : mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x00039f6f : xchg eax, ecx; add [rax], al; mov [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret
0x00047f27 : mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x00030594 : mov [rdx], eax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x00063b50 : int1 ; lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r13]; call r12
0x00073656 : mov ecx, [rdi + 0x18]; mov rsi, [rdi + 0x20]; mov rdi, [rdi + 0x28]; call r11
0x000310b2 : mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 5]; ret
0x00067b17 : lea esp, [rbp - 0x18]; mov eax, r13d; pop rbx; pop r12; pop r13; pop rbp; ret
0x00030b3f : add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x00088368 : mov [rsp + 0x70], ebx; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x00087b7e : mov [rsp + 0x40], eax; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x0002872f : add [rbx + 0x4e8bf956], cl; cld ; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x00067b16 : lea rsp, [rbp - 0x18]; mov eax, r13d; pop rbx; pop r12; pop r13; pop rbp; ret
0x00031103 : mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x00087d85 : mov [rsp + 0x80], eax; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x80]; call rbp
0x000422b2 : lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x0004238f : lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x0006250c : add [rax], al; add [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00030c17 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x000422b3 : lea edx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x0008fc76 : mov ebp, [rbp - 0x18]; mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; leave ; ret
0x00030c3b : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x0000d8ec : adc [r8 - 0x77], r9b; sbb [r8 - 0x77], r9b; push rdi; mov [rdi + 8], rax; ret
0x0006cc01 : mov rbx, [rsp + 0x30]; mov rdi, [rsp + 0x28]; mov r12, r14; call [rbx + 0x40]
0x000311bf : add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x0000d8ed : adc [rax - 0x77], cl; sbb [r8 - 0x77], r9b; push rdi; mov [rdi + 8], rax; ret
0x000233c8 : dec [rax - 0x7d]; clc ; add [rdi - 0x27], esi; pop rbx; pop rbp; pop r12; ret
0x000881d9 : mov [rsp + 0x70], edx; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x0006b66d : add eax, [rax]; add [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x000607c2 : add [rax], al; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call [rax + 0x38]
0x00087ff6 : lea esi, [rsp + 0xa0]; mov [rsp + 0x70], r13; lea rdi, [rsp + 0x70]; call rbp
0x00025fbc : lea ebx, [rip + 0x70ebe]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x00087d84 : mov [rsp + 0x80], rax; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x80]; call rbp
0x0008829f : mov [rsp + 0x90], ebp; lea rsi, [rsp + 0xe0]; lea rdi, [rsp + 0x90]; call r12
0x0002852f : add [rbx + 0x4e8bfa56], cl; cld ; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x00026015 : lea r11, [rip + 0x70ea4]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0003056b : add [rax], al; add [rax], al; add [rdx + 0x48028801], cl; lea eax, [rdx]; ret
0x00025fbb : lea r11, [rip + 0x70ebe]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x00070108 : mov ebx, eax; mov [rip + 0x25416f], r13; mov rdi, rbp; mov [rax], 0; call r12
0x00004c36 : add [rdx + rdx*8 - 0x716eb8b], eax; add [rax], eax; add [rax - 0x7d], cl; ret
0x0006cc02 : mov ebx, [rsp + 0x30]; mov rdi, [rsp + 0x28]; mov r12, r14; call [rbx + 0x40]
0x00042390 : lea edx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x00070107 : mov rbx, rax; mov [rip + 0x25416f], r13; mov rdi, rbp; mov [rax], 0; call r12
0x00026016 : lea ebx, [rip + 0x70ea4]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x000353ca : add [rax], al; mov rdi, rbx; mov rax, rbp; pop rbx; pop rbp; pop r12; jmp rax
0x000312a7 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x000078a2 : mov [rax + 8], rdi; mov [rax], 4; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x00070a29 : add [rax], eax; add [rax], al; add rsp, 8; mov eax, edx; pop rbx; pop rbp; ret
0x00061592 : lea ecx, [rax + 4]; mov [rdx], rcx; mov edx, [rax]; mov eax, edx; pop rbx; ret
0x00073be9 : mov ss, [rdi]; add al, 0; add [rcx - 0x73], al; pop rsi; dec [rax + 0x63]; ret
0x0004531a : add [rax], al; mov rdx, [rsp + 0x38]; mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x00061591 : lea rcx, [rax + 4]; mov [rdx], rcx; mov edx, [rax]; mov eax, edx; pop rbx; ret
0x0000846d : add eax, [rax]; lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret
0x0000e109 : inc [rbp + 0x483b75c0]; mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x00031389 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x0000f1f0 : mov [rip + 0x2b41a6], 0; mov [rip + 0x2b41a0], 0; mov [rip + 0x2b4199], 0; ret
0x0000e2c7 : mov ebp, esi; push rbx; mov rax, [rdi + 0xd8]; mov rbx, rdi; call [rax + 0x60]
0x0008e787 : add [rax], al; movzx edx, dl; movsxd rdx, [rbp + rdx*4]; add rdx, rbp; jmp rdx
0x00031349 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x000146d3 : adc [rcx + rcx*4 - 0x10], cl; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00030c7a : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x0008e07d : add [rax], al; movzx eax, al; movsxd rax, [r11 + rax*4]; add rax, r11; jmp rax
0x0000e2c6 : mov rbp, rsi; push rbx; mov rax, [rdi + 0xd8]; mov rbx, rdi; call [rax + 0x60]
0x00031104 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x00030cd5 : movq mm2, [rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x00031369 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x0003a9c0 : add [rax - 0x39], cl; add eax, [rax]; add [rax], al; add [rax - 0x7d], cl; ret
0x000230d0 : xor bl, al; nop cs:[rax + rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret
0x0008dde2 : mov [rip + 0x236735], 8; mov [rip + 0x23672f], 8; mov [rip + 0x236729], 8; ret
0x0008d563 : add al, [rax]; movzx ecx, cl; movsxd rcx, [rdi + rcx*4]; add rcx, rdi; jmp rcx
0x0000c3eb : add [rax], al; add [rax], al; add [rbx + 0x5d], bl; xor eax, eax; pop r12; ret
0x0008e17d : add r8b, [r8]; movzx eax, al; movsxd rax, [rcx + rax*4]; add rcx, rax; jmp rcx
0x00064320 : add [rax], al; mov [rsp], 0; mov r9, r15; mov rsi, r14; mov rdi, r12; call rbp
0x0000bf84 : mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x000310b3 : mov edx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 5]; ret
0x0002af31 : movdqu xmm[rdi + 0x10], xmm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x00030cb5 : movq mm2, [rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x0008e3f8 : add [rax], al; add [rbp + 1], ecx; ror [rdi], -0x4a; add [r8 - 0x7d], ecx; ret
0x0000bf85 : mov [rax + 0x140], edx; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x0006088b : add [rax], al; add [rax], al; add [rax - 0x75], cl; mov rax, [rax + 0x4c]; ret
0x0008e17e : add al, [rax]; movzx eax, al; movsxd rax, [rcx + rax*4]; add rcx, rax; jmp rcx
0x00031226 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x00030c95 : movq mm2, [rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x000078a3 : mov [rax + 8], edi; mov [rax], 4; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x00044f32 : add [rax], 0; add bl, al; nop [rax + rax]; mov rax, -0x18; add rax, fs:[0]; ret
0x0005fd82 : lea rdx, [rbx + 0x34]; lea rcx, [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call r8
0x000459ce : add [rax], al; add r14, r13; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call rbp
0x00019b11 : add [rax], al; nop [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret
0x00006ff4 : mov esi, esi; mov rdi, r12; lea r9, [r15 + rax]; mov [rsp + 0x10], r9; call r13
0x0004578b : add [rax], 0; add [rax], al; mov rsi, r14; mov rdi, r13; mov rdx, r12; call rbp
0x0000c324 : pop rax; adc eax, [rax]; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0002345b : lea edx, [rip + 0x7375f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0008508b : lea edx, [rip + 0x2cebf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0002b6db : lea edx, [rip + 0x6bd1f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00050cf2 : xchg eax, edx; xor esp, [rdi]; add [rbp + 0x5c], dh; mov eax, edx; pop rbx; ret
0x0008508a : lea r10, [rip + 0x2cebf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00030603 : mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x0006e046 : add [rax], al; sub rsp, 8; call [rip + 0x253e86]; xor eax, eax; add rsp, 8; ret
0x00030c3a : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x0005a082 : mov rdi, r15; sar r9, 2; mov rdx, r9; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x00030c16 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0006179e : add [rax], al; lea rcx, [rdx + 4]; mov [rax], rcx; mov eax, [rdx]; pop rbx; ret
0x00019d8b : lea edx, [rip + 0x7cc6f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0001784a : lea r10, [rip + 0x7f16f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0000bbed : sub eax, [rdi + 0x10]; add rax, [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; ret
0x00028731 : push rsi; stc ; mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x0002ed4c : add [rax], al; add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00030623 : mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x0006088c : add [rax], al; add [rax], al; mov rax, [rdi + 0x48]; mov eax, [rax + 0x4c]; ret
0x0001d21a : lea r10, [rip + 0x798df]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000762fd : add [rax], al; add bh, al; add al, [rax]; add [rax], al; add [rax + 1], bh; ret
0x00062153 : add [rax], al; add [rax - 0x39], cl; add [rax], al; add [rax], al; pop rbx; ret
0x00006ff3 : mov rsi, r14; mov rdi, r12; lea r9, [r15 + rax]; mov [rsp + 0x10], r9; call r13
0x000116d8 : mov [rbx + 0x24], edi; mov [rbx + 0x14], eax; add rsp, 8; pop rbx; pop rbp; ret
0x0000e7f1 : push [rsp + rbx + 0x48]; mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x30]
0x00079723 : sub [rbx + 0x5d], bl; pop r12; pop r13; pop r14; mulsd xmm0, xmm0; pop r15; ret
0x000311e6 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x0005fd83 : lea edx, [rbx + 0x34]; lea rcx, [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call r8
0x0000ee1c : add [rax], al; add [rax], al; mov eax, [rdi + 0x10]; sub eax, [rsi + 0x10]; ret
0x0003166f : add [rax - 0x73], cl; or r11b, r8b; nop cs:[rax + rax]; lea rax, [rdi + 9]; ret
0x0005a083 : mov edi, edi; sar r9, 2; mov rdx, r9; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x00064655 : xor ecx, [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; pop r13; pop r14; ret
0x00030b95 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x00075709 : adc rdx, r8; mov [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret
0x0003056c : add [rax], al; add [rax], al; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret
0x0001d21b : lea edx, [rip + 0x798df]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00064326 : add [rax], al; add [rbp - 0x77], cl; stc ; mov rsi, r14; mov rdi, r12; call rbp
0x00019d8a : lea r10, [rip + 0x7cc6f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000310d2 : mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x00064325 : add [rax], al; add [rax], al; mov r9, r15; mov rsi, r14; mov rdi, r12; call rbp
0x00030604 : mov [rdx], eax; mov eax, [rcx + 5]; mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x0002345a : lea r10, [rip + 0x7375f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0000bbec : sub rax, [rdi + 0x10]; add rax, [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; ret
0x0000de2e : add [rax], al; mov rax, [rdi + 0xd8]; push rbx; mov rbx, rdi; call [rax + 0x20]
0x00076933 : sub [rbx + 0x5d], bl; pop r12; pop r13; pop r14; mulss xmm0, xmm0; pop r15; ret
0x000466b9 : add [rsi], dl; add [rax], al; add [rax - 1], bh; pop rbx; pop rbp; pop r12; ret
0x000012fe : sub ecx, [rdi]; test [rdx - 0xffffff], esi; push rbx; adc [rax - 0x7d], cl; ret
0x00030624 : mov [rdx], eax; mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x000305f2 : mov [rdx], eax; mov eax, [rcx + 3]; mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x0007f03b : lea edx, [rip + 0x32ecf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0007f03a : lea r10, [rip + 0x32ecf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00027f50 : mov dx, [rsi - 3]; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x0002b6da : lea r10, [rip + 0x6bd1f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0001784b : lea edx, [rip + 0x7f16f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000313a9 : movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x0000da4e : sbb eax, 0; add [rax], al; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x0005f578 : lea edx, [rbx + 0x34]; lea rcx, [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call rax
0x0003160f : add [rax - 0x73], cl; add r11d, r8d; nop cs:[rax + rax]; lea rax, [rdi + 2]; ret
0x0007570a : adc edx, eax; mov [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret
0x0003294e : add [rax], al; movzx eax, [rdi - 0xb]; movzx edx, [rsi - 0xb]; sub eax, edx; ret
0x000477a8 : dec [rcx + rcx*4 - 0xe]; mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x0004de73 : mov [rbp - 0xc8], r9d; mov rdx, r8; mov [rbp - 0xb0], r8; mov rdi, rbx; call rax
0x0004928d : dec [rcx + rcx*4 - 0x32]; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x0003f3b6 : pop rax; add [rcx + rcx*4 + 0x55], eax; add [rcx], dh; ror [rax + 0x39], cl; ret
0x0006179d : add [rax], r8b; lea rcx, [rdx + 4]; mov [rax], rcx; mov eax, [rdx]; pop rbx; ret
0x000078a8 : add [rax + rax], al; add [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret
0x0004578d : add [rax], al; add [rcx + rcx*4 - 0xa], cl; mov rdi, r13; mov rdx, r12; call rbp
0x0005f577 : lea rdx, [rbx + 0x34]; lea rcx, [rbx + 0x40]; mov esi, 1; mov rdi, rbx; call rax
0x0004de74 : mov [rbp - 0xc8], ecx; mov rdx, r8; mov [rbp - 0xb0], r8; mov rdi, rbx; call rax
0x0004578c : add [rax], al; add [rax], al; mov rsi, r14; mov rdi, r13; mov rdx, r12; call rbp
0x00027f51 : mov edx, [rsi - 3]; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x0008378f : lea edi, [rcx + 1]; add [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret
0x0000aec0 : add [rax - 0x75], cl; or [r15], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret
0x000013a6 : mov rdx, [rip + 0x2c217b]; mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; call r13
0x000312a6 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x0003293e : add [rax], al; movzx eax, [rdi - 0xc]; movzx edx, [rsi - 0xc]; sub eax, edx; ret
0x0006dbb2 : add [rax], al; lea rax, [rax + rcx*4]; sub rax, rdx; mov [rdi + 0x308], rax; ret
0x0000bf8a : add [rax - 0x75], cl; sbb eax, 0; add [rax], al; mov rdi, rbx; call [rax + 0x20]
0x00044f33 : add [rax], al; add bl, al; nop [rax + rax]; mov rax, -0x18; add rax, fs:[0]; ret
0x00030c79 : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x0003290e : add [rax], al; movzx eax, [rdi - 0xf]; movzx edx, [rsi - 0xf]; sub eax, edx; ret
0x0000de49 : push rax; add [rax - 0x77], ecx; push rbx; or [rdi], cl; mov dh, 0; pop rbx; ret
0x0004a739 : dec [rcx + rcx*4 - 0x32]; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x00020fed : movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00045dcd : mov [rax + 0xe], dh; mov rdx, r12; mov rsi, [rsp + 0x10]; mov rdi, rbx; call rbp
0x00030cf5 : movq mm2, [rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x000013a7 : mov edx, [rip + 0x2c217b]; mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; call r13
0x00070c52 : mov [rax], r12; mov [rbx + 8], rdx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0003295e : add [rax], al; movzx eax, [rdi - 0xa]; movzx edx, [rsi - 0xa]; sub eax, edx; ret
0x0003291e : add [rax], al; movzx eax, [rdi - 0xe]; movzx edx, [rsi - 0xe]; sub eax, edx; ret
0x00070c53 : mov [rax], esp; mov [rbx + 8], rdx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0000dbce : sbb eax, 0; add [rax], al; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x0003292e : add [rax], al; movzx eax, [rdi - 0xd]; movzx edx, [rsi - 0xd]; sub eax, edx; ret
0x0003162f : add [rax - 0x73], cl; add r8d, r11d; nop cs:[rax + rax]; lea rax, [rdi + 4]; ret
0x00032a60 : adc [rdi], ecx; test [rbx], bl; add al, [rax]; add [rbx - 0x7bf0ed07], al; ret 2
0x0003161f : add [rax - 0x73], cl; add r8b, r11b; nop cs:[rax + rax]; lea rax, [rdi + 3]; ret
0x00031225 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x000306a4 : mov [rdx], eax; mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x0003290d : add [rax], r8b; movzx eax, [rdi - 0xf]; movzx edx, [rsi - 0xf]; sub eax, edx; ret
0x00031143 : mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x00063583 : add [rcx], dh; rcr [rbx + 0x5d], cl; pop r12; pop r13; mov eax, edx; pop r14; ret
0x00031184 : mov edx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x0001441b : xor esi, eax; mov [r8 + rbx], sil; mov rax, r8; add rsp, 8; pop rbx; pop rbp; ret
0x0003292d : add [rax], r8b; movzx eax, [rdi - 0xd]; movzx edx, [rsi - 0xd]; sub eax, edx; ret
0x00030683 : mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x00030663 : mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x00064084 : lea r9, [rsp + 0x28]; mov rcx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x00031183 : mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x000311a4 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x00031164 : mov edx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x0006014a : mov rax, [rbx + 0xd8]; mov rdx, r12; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0003109d : add [rax], al; add [rbx + 0x477880e], cl; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x0003291d : add [rax], r8b; movzx eax, [rdi - 0xe]; movzx edx, [rsi - 0xe]; sub eax, edx; ret
0x0003ae84 : add [rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; xor eax, eax; pop r14; ret
0x0002b38d : add [rax], al; add [rbx + 0xe8b0256], cl; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x0003293d : add [rax], r8b; movzx eax, [rdi - 0xc]; movzx edx, [rsi - 0xc]; sub eax, edx; ret
0x00030a3f : add [rax + 0x6666c337], cl; nop cs:[rax + rax]; mov dx, [rsi]; mov [rdi], dx; ret
0x00030554 : mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x00045dcc : mov [rax + 0xe], sil; mov rdx, r12; mov rsi, [rsp + 0x10]; mov rdi, rbx; call rbp
0x0004d150 : dec [rdi]; test [rcx], ch; or [rax], al; add [rax - 0x12743], al; jmp [rsi + 0xf]
0x0000e3e0 : mov rax, [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, [rax + 0x48]; jmp rax
0x000732ad : mov edx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x48; jmp r11
0x000311a3 : mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x0001c249 : add [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret
0x000305ab : add [rax], al; add [rax], al; add [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret
0x00030553 : mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x00059d47 : mov edx, eax; mov [rbp - 0x1098], ecx; mov rdi, r15; sar rdx, 2; call [r9 + 0x38]
0x000087a4 : add [rax - 0x75], ecx; sbb eax, 0; add [rax], al; mov rdi, rbx; call [rax + 0x60]
0x00030664 : mov [rdx], eax; mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x00059c52 : movzx eax, [rax + 0x4a8cc0]; mov rdx, [rax*8 + 0x4a8bc0]; mov r14d, 0x10; jmp rdx
0x0003169f : add [rax - 0x73], cl; or r8d, r11d; nop cs:[rax + rax]; lea rax, [rdi + 0xc]; ret
0x0003294d : add [rax], r8b; movzx eax, [rdi - 0xb]; movzx edx, [rsi - 0xb]; sub eax, edx; ret
0x0000e3e1 : mov eax, [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, [rax + 0x48]; jmp rax
0x0003167f : add [rax - 0x73], cl; or r11d, r8d; nop cs:[rax + rax]; lea rax, [rdi + 0xa]; ret
0x000643c6 : add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; pop r13; pop r14; pop r15; ret
0x00030643 : mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x0000e44c : mov [rbx + 0x40], r12; mov [rbx], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x00031123 : mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x000306c4 : mov [rdx], eax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x0003168f : add [rax - 0x73], cl; or r8b, r11b; nop cs:[rax + rax]; lea rax, [rdi + 0xb]; ret
0x00038f19 : sub [rax], al; mov [rip + 0x28bdbb], edi; mov [rip + 0x28bd78], r8d; pop rbx; ret
0x0003295d : add [rax], r8b; movzx eax, [rdi - 0xa]; movzx edx, [rsi - 0xa]; sub eax, edx; ret
0x00030644 : mov [rdx], eax; mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x00030684 : mov [rdx], eax; mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x0002b31d : add [rax], al; add [rbx + 0xe8b0356], cl; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x0002b3fd : add [rax], al; add [rbx + 0xe8b0156], cl; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x0000e343 : add [rax], al; add [rax], al; mov [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret
0x000732ac : mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x48; jmp r11
0x0001588b : add [rcx + rcx*4 - 0x40], cl; add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret
0x0000e5e6 : add [rax], al; add [rax - 0x39], cl; or [rax], al; add [rax], al; add bl, dh; ret
0x00081526 : add [rax], eax; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00031163 : mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x000306a3 : mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x00059d46 : mov rdx, rax; mov [rbp - 0x1098], ecx; mov rdi, r15; sar rdx, 2; call [r9 + 0x38]
0x0007662b : sbb [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; pop r13; pop r14; pop r15; ret
0x000834c2 : add [rax], eax; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0000e44d : mov [rbx + 0x40], esp; mov [rbx], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0002ee62 : add [rax - 0x77], ecx; add cl, [rbx + 0x42890841]; or [rax - 0x77], cl; clc ; ret
0x0006014b : mov eax, [rbx + 0xd8]; mov rdx, r12; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0002a9d2 : push rsi; cmc ; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x0006431a : mov [rsp + 8], 1; mov [rsp], 0; mov r9, r15; mov rsi, r14; mov rdi, r12; call rbp
0x000306c3 : mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x00081831 : add [rax], eax; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00035b43 : sub [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; pop r13; pop r14; pop r15; ret
0x0000bdec : mov rax, [rbp + 0xd8]; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call [rax + 0x78]
0x00029b16 : lea r11, [rip + 0x6d623]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00064085 : lea ecx, [rsp + 0x28]; mov rcx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x00030f88 : lea ebx, [rip + 0x66532]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00027222 : lea r11, [rip + 0x6fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007ecaf : add [rax], al; add [rax], al; mov rdx, [rdi + 0x448]; mov [rax], rdx; pop rbx; ret
0x00029453 : lea r11, [rip + 0x6daa6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030fad : lea ebx, [rip + 0x6650d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0006078d : add [rax], al; add [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call [rax + 0x38]
0x00027373 : lea ebx, [rip + 0x6f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027800 : lea r11, [rip + 0x6f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000288ec : lea r11, [rip + 0x6e44d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029697 : lea ebx, [rip + 0x6daa3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000309ae : lea r11, [rip + 0x66a8b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0000ba07 : mov edx, eax; mov rax, [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call [rax + 0x70]
0x00009854 : mov rax, [rbx + 0xd8]; mov rsi, r12; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x00030f87 : lea r11, [rip + 0x66532]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00030968 : lea ebx, [rip + 0x66ad2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00026ce2 : lea r11, [rip + 0x70057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026366 : lea ebx, [rip + 0x709d4]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000309c4 : lea r11, [rip + 0x66a75]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000288ed : lea ebx, [rip + 0x6e44d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00059c97 : mov [rbp - 0x10e8], 1; mov [rbp - 0x1110], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00026457 : lea ebx, [rip + 0x708e3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026840 : lea r11, [rip + 0x704f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026c30 : lea r11, [rip + 0x70109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029c96 : lea r11, [rip + 0x6d4a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028821 : lea r11, [rip + 0x6e518]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000363ae : mov esi, 2; mov rdi, r13; call rbx; mov edx, 1; mov esi, 1; mov rdi, r12; call rbx
0x000274c2 : lea r11, [rip + 0x6f877]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a296 : lea r11, [rip + 0x6cea3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029e17 : lea r11, [rip + 0x6d322]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ed0 : lea r11, [rip + 0x6fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027372 : lea r11, [rip + 0x6f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026f83 : lea ebx, [rip + 0x6fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027561 : lea ebx, [rip + 0x6f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026f82 : lea r11, [rip + 0x6fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000289d8 : lea ebx, [rip + 0x6e362]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000266f0 : lea r11, [rip + 0x70649]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000276b0 : lea r11, [rip + 0x6f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000485e9 : mov rax, [rbx + 0xd8]; mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x00026652 : lea r11, [rip + 0x706e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000298d3 : lea r11, [rip + 0x6d626]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026a42 : lea r11, [rip + 0x702f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a6b2 : lea ebx, [rip + 0x6c848]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029817 : lea ebx, [rip + 0x6d923]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000270d2 : lea r11, [rip + 0x6fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00008d40 : mov rdx, rbp; mov rax, [rbx + 0xd8]; mov rsi, r10; mov rdi, rbx; call [rax + 0x58]
0x00031010 : lea r11, [rip + 0x664a9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000308f2 : lea r11, [rip + 0x66b47]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00008d41 : mov edx, ebp; mov rax, [rbx + 0xd8]; mov rsi, r10; mov rdi, rbx; call [rax + 0x58]
0x00027b69 : push rsi; cld ; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x000298d4 : lea ebx, [rip + 0x6d626]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00009855 : mov eax, [rbx + 0xd8]; mov rsi, r12; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x0000bbee : adc [r8 + 3], r9b; xchg [rax + 0x48000000], edx; add esp, 8; pop rbx; pop rbp; ret
0x00026990 : lea r11, [rip + 0x703a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030a26 : lea ebx, [rip + 0x66a14]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0000b4f5 : mov rax, [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x0002623c : lea r11, [rip + 0x70afd]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a297 : lea ebx, [rip + 0x6cea3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000dc7f : add [rax - 0x73], cl; add [rax - 0x77], ecx; or [r15], cl; mov dh, 2; pop rbx; ret
0x0003627a : mov esi, 2; mov rdi, r14; call rbx; mov edx, 2; mov esi, 1; mov rdi, r13; call rbx
0x00030f6a : lea r11, [rip + 0x6654f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00027411 : lea ebx, [rip + 0x6f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000270d3 : lea ebx, [rip + 0x6fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002ede2 : add [rsi - 0x77], esp; add cl, [rdx + 0x42880241]; add cl, [rax - 0x77]; clc ; ret
0x0002a353 : lea r11, [rip + 0x6cba6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029d53 : lea r11, [rip + 0x6d1a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063d59 : add [rax], al; mov [rsp], 1; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx
0x000276b1 : lea ebx, [rip + 0x6f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026e38 : lea ebx, [rip + 0x6ff02]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029a54 : lea ebx, [rip + 0x6d4a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ce3 : lea ebx, [rip + 0x70057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003098d : lea ebx, [rip + 0x66aad]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0000bded : mov eax, [rbp + 0xd8]; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call [rax + 0x78]
0x000262a7 : lea ebx, [rip + 0x70a93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0008c8d7 : mov rax, [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call [rax + 0x48]
0x000309af : lea ebx, [rip + 0x66a8b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00030f6b : lea ebx, [rip + 0x6654f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00027171 : lea ebx, [rip + 0x6fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029216 : lea r11, [rip + 0x6df23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030f12 : lea r11, [rip + 0x665a7]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0002a7a2 : push rsi; int1 ; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x00030fce : lea r11, [rip + 0x664eb]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0004937c : mov rdx, r10; mov [rbp - 0x578], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0005c03f : mov [rbp - 0x10e8], 1; mov [rbp - 0x1110], 1; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x0000bbef : adc [rax + 3], cl; xchg [rax + 0x48000000], edx; add esp, 8; pop rbx; pop rbp; ret
0x000309f0 : lea r11, [rip + 0x66a49]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00031045 : lea r11, [rip + 0x66474]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000292d4 : lea ebx, [rip + 0x6dc26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029454 : lea ebx, [rip + 0x6daa6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026653 : lea ebx, [rip + 0x706e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028d97 : lea ebx, [rip + 0x6e3a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028adb : lea r11, [rip + 0x6e41e]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029a53 : lea r11, [rip + 0x6d4a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ae0 : lea r11, [rip + 0x70259]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00042104 : add [rax], al; add [rcx + 0x415d5bd8], cl; pop rsp; pop r13; pop r14; pop r15; ret
0x00028cdb : lea ebx, [rip + 0x6e21f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028fd3 : lea r11, [rip + 0x6df26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027613 : lea ebx, [rip + 0x6f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003094b : lea ebx, [rip + 0x66aef]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0000c46a : mov eax, [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x000309f1 : lea ebx, [rip + 0x66a49]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00029c97 : lea ebx, [rip + 0x6d4a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000268f2 : lea r11, [rip + 0x70447]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027612 : lea r11, [rip + 0x6f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000267a2 : lea r11, [rip + 0x70597]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000361f2 : mov esi, 2; mov rdi, r15; call rbx; mov edx, 3; mov esi, 1; mov rdi, r14; call rbx
0x000266f1 : lea ebx, [rip + 0x70649]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030fe5 : lea ebx, [rip + 0x664d5]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0002a1d3 : lea r11, [rip + 0x6cd26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a117 : lea ebx, [rip + 0x6d023]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026456 : lea r11, [rip + 0x708e3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030576 : add al, bl; nop [rax + rax]; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x00029516 : lea r11, [rip + 0x6dc23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026502 : lea r11, [rip + 0x70837]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000b4f6 : mov eax, [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x00028a94 : lea r11, [rip + 0x6e2a5]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002614d : lea r11, [rip + 0x70bec]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a1d4 : lea ebx, [rip + 0x6cd26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029bd4 : lea ebx, [rip + 0x6d326]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026e37 : lea r11, [rip + 0x6ff02]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000289d7 : lea r11, [rip + 0x6e362]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027763 : lea ebx, [rip + 0x6f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029f96 : lea r11, [rip + 0x6d1a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029154 : lea ebx, [rip + 0x6dda6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029816 : lea r11, [rip + 0x6d923]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029096 : lea r11, [rip + 0x6e0a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029696 : lea r11, [rip + 0x6daa3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030fcf : lea ebx, [rip + 0x664eb]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00028fd4 : lea ebx, [rip + 0x6df26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028e54 : lea ebx, [rip + 0x6e0a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005bba3 : mov [rbp - 0x1118], 1; mov [rbp - 0x1120], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x000295d3 : lea r11, [rip + 0x6d926]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00035257 : add [rcx - 0x3b], bh; mov rbx, -1; add rsp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x00028afe : lea ebx, [rip + 0x6e63c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028c59 : lea r11, [rip + 0x6e4e0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005ff71 : mov rax, [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x38]
0x00027560 : lea r11, [rip + 0x6f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026089 : lea ebx, [rip + 0x70cb1]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029396 : lea r11, [rip + 0x6dda3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026d80 : lea r11, [rip + 0x6ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a054 : lea ebx, [rip + 0x6cea6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000308f3 : lea ebx, [rip + 0x66b47]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00029517 : lea ebx, [rip + 0x6dc23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000309c5 : lea ebx, [rip + 0x66a75]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00027223 : lea ebx, [rip + 0x6fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030fe4 : lea r11, [rip + 0x664d5]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000265a0 : lea r11, [rip + 0x70799]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000262a6 : lea r11, [rip + 0x70a93]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028c5a : lea ebx, [rip + 0x6e4e0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028e53 : lea r11, [rip + 0x6e0a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000272c0 : lea r11, [rip + 0x6fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003662c : mov esi, 2; mov rdi, r13; call rbx; mov edx, 1; mov esi, 2; mov rdi, r12; call rbx
0x000267a3 : lea ebx, [rip + 0x70597]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003098c : lea r11, [rip + 0x66aad]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00030a5c : add [rax], al; add [rax], al; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; ret
0x0002a354 : lea ebx, [rip + 0x6cba6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029b17 : lea ebx, [rip + 0x6d623]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004a83d : mov edx, edx; mov [rbp - 0x4f8], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00028f17 : lea ebx, [rip + 0x6e223]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026088 : lea r11, [rip + 0x70cb1]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a4fe : lea r11, [rip + 0x6cc3b]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000265a1 : lea ebx, [rip + 0x70799]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026b92 : lea r11, [rip + 0x701a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029f97 : lea ebx, [rip + 0x6d1a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026503 : lea ebx, [rip + 0x70837]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028f16 : lea r11, [rip + 0x6e223]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028d96 : lea r11, [rip + 0x6e3a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000485ea : mov eax, [rbx + 0xd8]; mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x00029217 : lea ebx, [rip + 0x6df23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0008c8d8 : mov eax, [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call [rax + 0x48]
0x0000d30e : mov rax, [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x00027170 : lea r11, [rip + 0x6fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000dda3 : add [rbp + 0x48487ed2], al; mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x68]
0x000295d4 : lea ebx, [rip + 0x6d926]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000292d3 : lea r11, [rip + 0x6dc26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000272c1 : lea ebx, [rip + 0x6fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029153 : lea r11, [rip + 0x6dda6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000ba06 : mov rdx, rax; mov rax, [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call [rax + 0x70]
0x0005c9d2 : mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x00031011 : lea ebx, [rip + 0x664a9]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00027020 : lea r11, [rip + 0x6fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030a25 : lea r11, [rip + 0x66a14]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00029996 : lea r11, [rip + 0x6d7a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ae1 : lea ebx, [rip + 0x70259]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a116 : lea r11, [rip + 0x6d023]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028cda : lea r11, [rip + 0x6e21f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00031046 : lea ebx, [rip + 0x66474]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000102f2 : adc [rbx], ebp; add [rbp - 0x17], dh; mov rax, rdi; pop rbx; pop rbp; pop r12; ret
0x00029d54 : lea ebx, [rip + 0x6d1a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000274c3 : lea ebx, [rip + 0x6f877]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a053 : lea r11, [rip + 0x6cea6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027801 : lea ebx, [rip + 0x6f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005c9d3 : mov edi, edi; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x0002a4ff : lea ebx, [rip + 0x6cc3b]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030967 : lea r11, [rip + 0x66ad2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000268f3 : lea ebx, [rip + 0x70447]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026b93 : lea ebx, [rip + 0x701a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027410 : lea r11, [rip + 0x6f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a6b1 : lea r11, [rip + 0x6c848]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028afd : lea r11, [rip + 0x6e63c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004937d : mov edx, edx; mov [rbp - 0x578], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00029ed3 : lea r11, [rip + 0x6d026]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004a83c : mov rdx, r10; mov [rbp - 0x4f8], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00028a95 : lea ebx, [rip + 0x6e2a5]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029753 : lea r11, [rip + 0x6d7a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029ed4 : lea ebx, [rip + 0x6d026]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000d30f : mov eax, [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x0002614e : lea ebx, [rip + 0x70bec]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000328fe : add [rax], al; movzx eax, [rdi - 0x10]; movzx edx, [rsi - 0x10]; sub eax, edx; ret
0x0005ff72 : mov eax, [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x38]
0x000109ff : mov rax, -0x30; mov fs:[rax], rdx; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x00026d81 : lea ebx, [rip + 0x6ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026991 : lea ebx, [rip + 0x703a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000c469 : mov rax, [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x0003599f : add [rax], al; mov rsi, [rbx]; mov rdi, [rsp + 8]; mov rax, [rsp + 0x10]; call rax
0x00028822 : lea ebx, [rip + 0x6e518]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030f13 : lea ebx, [rip + 0x665a7]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00029754 : lea ebx, [rip + 0x6d7a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002623d : lea ebx, [rip + 0x70afd]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030fac : lea r11, [rip + 0x6650d]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00028adc : lea ebx, [rip + 0x6e41e]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026365 : lea r11, [rip + 0x709d4]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026a43 : lea ebx, [rip + 0x702f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029bd3 : lea r11, [rip + 0x6d326]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005a879 : mov edi, edi; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x00027762 : lea r11, [rip + 0x6f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026c31 : lea ebx, [rip + 0x70109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003639f : mov esi, 2; mov rdi, r14; call rbx; mov edx, 2; mov esi, 2; mov rdi, r13; call rbx
0x0003626b : mov esi, 2; mov rdi, r15; call rbx; mov edx, 3; mov esi, 2; mov rdi, r14; call rbx
0x00026841 : lea ebx, [rip + 0x704f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ed1 : lea ebx, [rip + 0x6fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005a878 : mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x00027021 : lea ebx, [rip + 0x6fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029397 : lea ebx, [rip + 0x6dda3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029997 : lea ebx, [rip + 0x6d7a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029e18 : lea ebx, [rip + 0x6d322]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029097 : lea ebx, [rip + 0x6e0a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a6cd : add [rcx], cl; add [rax], al; add [rax - 1], bh; add rsp, 8; pop rbx; pop rbp; ret
0x0003094a : lea r11, [rip + 0x66aef]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00063e10 : mov eax, [rsp + 0x40]; sub rsp, -0x80; pop rbx; sub rax, rbp; pop rbp; pop r12; ret
0x00027b81 : mov ecx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x000361f6 : add [rcx + rcx*4 - 1], cl; call rbx; mov edx, 3; mov esi, 1; mov rdi, r14; call rbx
0x00028530 : mov edx, [rsi - 6]; mov ecx, [rsi - 4]; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x0007625c : sub r10, rax; mov [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x0000853e : add [rax], al; mov rax, [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call [rax + 0x10]
0x0000de32 : xchg eax, ebx; add [rax], al; add [rbx + 0x48], dl; mov ebx, edi; call [rax + 0x20]
0x00044f4d : add [rax], al; add bl, al; nop cs:[rax + rax]; mov rax, -0x28; add rax, fs:[0]; ret
0x0002aad0 : mov rdx, [rsi - 9]; mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x00047b85 : mov rdi, rbx; sub rcx, rsi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x000363a3 : add [rcx + rcx*4 - 9], cl; call rbx; mov edx, 2; mov esi, 2; mov rdi, r13; call rbx
0x00047b86 : mov edi, ebx; sub rcx, rsi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x00027b80 : mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0008c67d : add edx, eax; mov [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x00044f6d : add [rax], al; add bl, al; nop cs:[rax + rax]; mov rax, -0x20; add rax, fs:[0]; ret
0x00008a4f : add [rax], al; mov [rax + 0x140], rdx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0004762e : mov edx, ecx; mov [rbp - 0x578], rcx; mov rsi, r14; mov rdi, rbx; call [rax + 0x38]
0x0004762d : mov rdx, rcx; mov [rbp - 0x578], rcx; mov rsi, r14; mov rdi, rbx; call [rax + 0x38]
0x0000f1f6 : add [rax], al; add [rax], al; mov [rip + 0x2b41a0], 0; mov [rip + 0x2b4199], 0; ret
0x000673f1 : mov eax, 3; syscall ; mov rax, -0x40; mov fs:[rax], edx; xor eax, eax; pop rbx; ret
0x0007625d : sub edx, eax; mov [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x0003057c : add [rax], al; add [rax], al; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x0002491c : add [rax], al; add [rax], al; movzx eax, [rdi]; movzx ecx, [rsi]; sub eax, ecx; ret
0x00018bfc : add [rax], al; add [rax], al; movzx ecx, [rsi]; movzx eax, [rdi]; sub eax, ecx; ret
0x000470d2 : xchg eax, ebx; add [rax], al; add [rbx - 0x16], cl; mov rdx, r13; call [rax + 0x38]
0x0008d360 : adc al, [rbx + 0xd7440e7]; mov rdx, -1; shl rdx, cl; or r8, rdx; mov [rsi], r8; ret
0x00063e0f : mov rax, [rsp + 0x40]; sub rsp, -0x80; pop rbx; sub rax, rbp; pop rbp; pop r12; ret
0x000607c3 : add [rax + 0x63], cl; ror [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call [rax + 0x38]
0x00028330 : mov edx, [rsi - 5]; mov ecx, [rsi - 4]; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0002aad1 : mov edx, [rsi - 9]; mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x0003968f : mov edx, [rbp - 0x60]; lea rdi, [rbp - 0x40]; mov rsi, [rdx + rbx + 0x20]; call rax
0x0005a8ed : sbb [rcx - 0x75], cl; push rbp; and [rax + 0x29], cl; sar rdx, 2; call [rax + 0x38]
0x00091a0d : add [rax], al; add [rcx], dh; fisttp [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; ret
0x0005983a : xchg eax, ebx; add [rax], al; add [rbx - 0x1e], cl; mov rdx, r12; call [rax + 0x38]
0x0008c67c : add r10, rax; mov [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret
0x00028730 : mov edx, [rsi - 7]; mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x0003626f : add [rcx + rcx*4 - 1], cl; call rbx; mov edx, 3; mov esi, 2; mov rdi, r14; call rbx
0x0003106c : add [rax], al; add [rax], al; mov dx, [rsi]; mov [rdi], dx; lea rax, [rdi + 1]; ret
0x0003627e : add [rcx + rcx*4 - 9], cl; call rbx; mov edx, 2; mov esi, 1; mov rdi, r13; call rbx
0x0003968e : mov rdx, [rbp - 0x60]; lea rdi, [rbp - 0x40]; mov rsi, [rdx + rbx + 0x20]; call rax
0x00090fa0 : add al, 1; add [rax], al; mov rsi, [r14 + 8]; mov rdx, [r15]; mov rdi, rbx; call rbp
0x000714c1 : add [rax], al; add [rbx - 0x3d], bl; mov rax, -0x40; pop rbx; mov eax, fs:[rax]; ret
0x0000e33d : add [rax], al; mov [rbx + 8], 0; mov [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret
0x0007ec5a : adc [rbx - 0x3d], bl; nop [rax]; mov rax, [rbx + 0x18]; mov [rax], rdi; pop rbx; ret
0x0006214a : add [rax], al; add [rax], al; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x0003663b : mov esi, 2; mov rdi, r12; call rbx; xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx
0x00027d49 : push rsi; cld ; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00030cb4 : movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x000284fa : push rsi; clc ; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0000853d : add [rax], r8b; mov rax, [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call [rax + 0x10]
0x00009c3f : mov edx, [rdx + 0x38]; mov rcx, rax; mov [rsp], rdx; mov rdx, r14; call [r13 + 0x18]
0x00063b4f : mov ecx, esi; lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r13]; call r12
0x000673b9 : add [rax], al; add [rax], al; mov [rax + 0x20], 0; mov [rax + 0x28], 0; pop rbx; ret
0x000282fa : push rsi; clc ; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x000638f8 : add [rax], eax; add [rsi + 0x13], dh; sub rsp, -0x80; pop rbx; pop rbp; pop r12; ret
0x0000c6f6 : add [rax], al; xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, r12; call [rax + 0x48]
0x00027f29 : push rsi; cld ; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0000df0c : add [rax], al; movzx esi, [rbp]; mov rdi, r12; lea r13, [rbp + 1]; call [rax + 0x18]
0x0000d9ad : add [rax], al; add [rax], al; mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x0006385b : add [rax], al; add [rax], al; add [rax - 0x39], cl; rol [rcx], 0; add [rax], al; ret
0x000376ee : add al, 0; test rax, rax; cmovne rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret
0x0002af30 : adc bl, dh; movq [rdi + 0x10], mm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x0006386b : add [rax], al; add [rax], al; add [rax - 0x39], cl; rol [rdx], 0; add [rax], al; ret
0x00009bc0 : dec [rax - 0x75]; xchg eax, ebx; add [rax], al; add [rsi - 1], bh; call [rax + 0x18]
0x0000edb2 : xchg al, bl; add [rax], al; add [rax - 0x77], cl; fistp [rsi - 1]; call [rax + 0x18]
0x00063b4e : mov rcx, r14; lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r13]; call r12
0x0005b714 : mov rdx, rcx; mov [rbp - 0x1140], rcx; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x000638ab : add [rax], al; add [rax], al; add [rax - 0x39], cl; rol [rsi], 0; add [rax], al; ret
0x00028109 : push rsi; cld ; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0009012a : mov rdx, [rbp]; mov rdi, [rsp + 8]; lea r15, [r12 + rcx*8]; mov rsi, [r15]; call r14
0x0006e0f7 : add [rsi*2 + 0x158f8015], al; add eax, [rax]; add [rax + rcx*2], al; add esp, 8; ret
0x000422b1 : int1 ; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x0005d7c5 : mov rdx, r10; mov [rbp - 0x10e0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0005d7c6 : mov edx, edx; mov [rbp - 0x10e0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0005a262 : mov rdx, r10; mov [rbp - 0x10f0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x000337fa : lea eax, [rax]; add [rax], al; add [rbx + 0x25], bl; add ah, bh; add eax, [rax]; ret
0x00063d5e : add [rax], eax; add [rax], al; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx
0x0006387b : add [rax], al; add [rax], al; add [rax - 0x39], cl; rol [rbx], 0; add [rax], al; ret
0x000175b8 : add [rax], al; add [rax - 0x73], cl; add al, 7; cmp [rax], sil; cmovne rax, rdx; ret
0x00061e8d : add [rax], al; add [rax], al; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x0002ed40 : add [rax], al; nop cs:[rax + rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00030c94 : movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x00009c3e : mov rdx, [rdx + 0x38]; mov rcx, rax; mov [rsp], rdx; mov rdx, r14; call [r13 + 0x18]
0x0005a263 : mov edx, edx; mov [rbp - 0x10f0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0005b715 : mov edx, ecx; mov [rbp - 0x1140], rcx; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00030abc : add [rax], al; add [rax], al; mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; ret
0x0000c132 : add [rax], al; mov [rbx + 0xd8], rax; mov [rdx + 0x140], 0x494fc0; call [rax + 0x20]
0x0009012b : mov edx, [rbp]; mov rdi, [rsp + 8]; lea r15, [r12 + rcx*8]; mov rsi, [r15]; call r14
0x000638bb : add [rax], al; add [rax], al; add [rax - 0x39], cl; rol [rdi], 0; add [rax], al; ret
0x00030cd4 : movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x0001ce87 : sub [rbx + rcx*4 + 0x6e], cl; xor [rbx + rcx*4 + 0x76], cl; cmp [rax + 0xf], cl; ret
0x0003c1ab : push rax; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call rbx
0x0000b462 : add [rax], al; mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x000286fa : push rsi; clc ; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00030a7c : add [rax], al; add [rax], al; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; ret
0x0003cbc3 : push rax; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r15
0x0000c335 : add [rax], al; xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, rbx; call [rax + 0x48]
0x0003e4df : push rax; mov rax, [rsp + 0x28]; mov [rsp + 8], esi; mov rsi, [rsp + 0x58]; call rax
0x000361f5 : add [rax], al; mov rdi, r15; call rbx; mov edx, 3; mov esi, 1; mov rdi, r14; call rbx
0x00088312 : mov eax, ebx; and rax, r12; and eax, 1; add r14, rax; mov [rsp + 0x70], r14; call rbp
0x00045315 : mov [r8 + 0x88], edx; mov rdx, [rsp + 0x38]; mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x00059a27 : mov rdi, r15; sub r13, rbx; mov r14, r13; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x00087e66 : mov rax, r13; and rax, r15; and eax, 1; add r14, rax; mov [rsp + 0x70], r14; call rbp
0x00037ced : add [rax - 0x77], cl; mov [rax + rcx*4], gs; add [rax], al; add [rax - 0x7d], cl; ret
0x00065159 : add [rbx], al; add [rax], al; add [rsi - 0x70], ah; add rsp, 8; pop rbx; pop rbp; ret
0x000304fc : add [rax], al; add [rax], al; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x00061252 : mov [rax + 8], edx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x00059a28 : mov edi, edi; sub r13, rbx; mov r14, r13; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x0006014c : sbb eax, 0; add [rax], al; mov rdx, r12; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0000dc7e : add [rax], al; lea rax, [rdx + 1]; mov [rbx + 8], rax; movzx eax, [rdx]; pop rbx; ret
0x00065150 : add [rdi + 0xd], dh; mov [rip + 0x25fc3a], 3; nop ; add rsp, 8; pop rbx; pop rbp; ret
0x000375cf : add [rbx + 0x28d66215], cl; add [rax + 0x64], bh; test edx, edx; cmovne eax, edx; ret
0x0000e346 : add [rax - 0x39], cl; sbb [r8], al; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x0003662f : add [rax], al; mov rdi, r13; call rbx; mov edx, 1; mov esi, 2; mov rdi, r12; call rbx
0x00000aa1 : sub al, 0; mov rax, rbp; sar rax, 1; pop rbp; mov [rip + 0x2c131f], rax; pop r12; ret
0x00056a32 : add [rcx - 0x77], ecx; push rdi; or [rdi + rcx - 0x4a], al; xor [rax - 0x7d], cl; ret
0x000363b1 : add [rax], al; mov rdi, r13; call rbx; mov edx, 1; mov esi, 1; mov rdi, r12; call rbx
0x00091d1f : lea r9, [rip + 0x20e26]; movzx r8d, r8b; movsxd rax, [r9 + r8*4]; add r9, rax; jmp r9
0x00061251 : mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x000363a2 : add [rax], al; mov rdi, r14; call rbx; mov edx, 2; mov esi, 2; mov rdi, r13; call rbx
0x0006eb0e : add [rax], al; mov rax, [r12 + 0x10]; add rax, [rbx]; mov [rbp - 0xe0], r11; call rax
0x00088311 : mov rax, rbx; and rax, r12; and eax, 1; add r14, rax; mov [rsp + 0x70], r14; call rbp
0x0002798a : push rsi; clc ; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0005092a : add [rax], al; add [rdi], cl; xchg ebp, esi; add [rax], al; add [rax - 0x7d], cl; ret
0x000305ac : add [rax], al; add [rax], al; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x00063d53 : mov [rsp + 8], 1; mov [rsp], 1; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx
0x0003626e : add [rax], al; mov rdi, r15; call rbx; mov edx, 3; mov esi, 2; mov rdi, r14; call rbx
0x000313a8 : adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x00087e67 : mov eax, ebp; and rax, r15; and eax, 1; add r14, rax; mov [rsp + 0x70], r14; call rbp
0x000607bc : mov rax, [r12 + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call [rax + 0x38]
0x000607bd : mov eax, [rsp + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call [rax + 0x38]
0x0002ede0 : mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x0003627d : add [rax], al; mov rdi, r14; call rbx; mov edx, 2; mov esi, 1; mov rdi, r13; call rbx
0x00044f20 : mov rax, -0x60; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x0006388f : add [rax - 0x39], cl; rol [rax + rax], 0; add bl, al; nop [rax + rax]; mov rax, 5; ret
0x000311be : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x00035232 : sub al, 3; add [rbp + 0x482178c0], al; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x0002af2f : adc bl, r14b; movq [rdi + 0x10], mm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x0002a712 : movq [rdi - 0x20], mm0; lddqu xmm0, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x10], xmm0; ret
0x000485eb : sbb eax, 0; add [rax], al; mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x0002ede1 : mov eax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x00036630 : add [rcx + rcx*4 - 0x11], cl; call rbx; mov edx, 1; mov esi, 2; mov rdi, r12; call rbx
0x000363b2 : add [rcx + rcx*4 - 0x11], cl; call rbx; mov edx, 1; mov esi, 1; mov rdi, r12; call rbx
0x0003c591 : sbb [rbp - 0x77], cl; clc ; mov rcx, rbp; mov rdx, [r12]; mov rsi, rbx; call [r14 + 8]
0x0000b4f7 : sbb eax, 0; add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x000247e8 : int1 ; bsf rcx, rcx; movzx eax, [rax + rcx]; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x00027b68 : mov edx, [rsi - 4]; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00036aeb : add [rax], al; add [rdi], cl; test [rdx + rax - 0x9cf0000], dh; mov rdi, r15; call rbx
0x0000ae92 : mov [rbx + 0x30], esi; mov [rbx + 0x28], rsi; mov [rbx + 0x20], rsi; call [rax + 0x70]
0x00059836 : add [rax], al; mov rax, [rdi + 0xd8]; movsxd r12, edx; mov rdx, r12; call [rax + 0x38]
0x00009856 : sbb eax, 0; add [rax], al; mov rsi, r12; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x0004fe61 : add [rax - 0x77], ecx; push rbx; sub dh, al; add [rip - 0x71817], ch; jmp [rsi - 0x70]
0x000900d8 : mov eax, 1; mov rdi, [rdx + 8]; sbb ecx, ecx; cmp [rsi + 8], rdi; cmovbe eax, ecx; ret
0x0000d310 : sbb eax, 0; add [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x00045316 : mov [rax + 0x88], edx; mov rdx, [rsp + 0x38]; mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x000367d6 : add [rdi], cl; test [rbx + 5], cl; add [rax], al; xor esi, esi; mov rdi, r14; call rbx
0x00036527 : add [rdi], cl; test [rdx + 7], bl; add [rax], al; xor esi, esi; mov rdi, r14; call rbx
0x000367f6 : add [rdi], cl; test [rbx + 6], cl; add [rax], al; xor esi, esi; mov rdi, r15; call rbx
0x000673f4 : add [rax], al; syscall ; mov rax, -0x40; mov fs:[rax], edx; xor eax, eax; pop rbx; ret
0x0001c3b7 : add [rax], al; add [rax], cl; add [rax + rcx + 0x48], dh; lea eax, [rip + 0x852b]; ret
0x0000ae91 : mov [rbx + 0x30], rsi; mov [rbx + 0x28], rsi; mov [rbx + 0x20], rsi; call [rax + 0x70]
0x0006514f : add [rdi + 0xd], sil; mov [rip + 0x25fc3a], 3; nop ; add rsp, 8; pop rbx; pop rbp; ret
0x000348f0 : mov eax, [rsp - 0x64]; mov edx, eax; neg edx; cmp [rsp - 0x68], 2; cmove eax, edx; ret
0x0008a92d : mov eax, [rax + 8]; add rax, [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax
0x00030cf4 : movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0000c3ca : push [rbx + rdx + 0x64]; mov [rbp], r12d; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0000c46b : sbb eax, 0; add [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x00030b3e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x000714b1 : add eax, [rax]; add [rax], al; add [rbx + 0x2509f30d], al; add [rcx], al; pop rbx; ret
0x00035ccb : mov esi, [rax]; mov rdi, [rbp - 0x40]; mov r15d, r14d; mov rax, [rbp - 0x48]; call rax
0x00039cd3 : mov [rsp], 0; mov r9, r14; mov rcx, r12; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x00091d20 : lea ecx, [rip + 0x20e26]; movzx r8d, r8b; movsxd rax, [r9 + r8*4]; add r9, rax; jmp r9
0x000470ce : add [rax], al; mov rax, [rdi + 0xd8]; movsxd r13, edx; mov rdx, r13; call [rax + 0x38]
0x000680a1 : mov ecx, eax; and ecx, [rsi + 0x10]; lea rdx, [rdx + rcx*4]; add eax, [rsi + rdx]; ret
0x000310cf : add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x0008a92c : mov rax, [rax + 8]; add rax, [rbx]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call rax
0x000608fe : push rax; mov [rsp + 8], 0; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x0000aebf : add [rax], al; mov rax, [rbx + 8]; movzx eax, [rax]; add rsp, 8; pop rbx; pop rbp; ret
0x000834f4 : sub [rcx + rax], bh; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0005ff73 : sbb eax, 0; add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x38]
0x0004fac9 : add [rax - 0x77], ecx; push rbx; sub dh, al; add [rip - 0xa8d17], ch; jmp [rsi + 0x2e]
0x00036a74 : add [rdi], cl; test [rbp + 3], cl; add [rax], al; xor esi, esi; mov rdi, r15; call rbx
0x0008c8d9 : sbb eax, 0; add [rax], al; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call [rax + 0x48]
0x00035cca : mov rsi, [rax]; mov rdi, [rbp - 0x40]; mov r15d, r14d; mov rax, [rbp - 0x48]; call rax
0x0004cd11 : add [rax - 0x77], ecx; push rbx; sub dh, al; add [rip - 0x1ae17], ch; jmp [rsi - 0x70]
0x0002b4de : add [rax], al; mov dx, [rsi + 1]; mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x0002a831 : mov edx, [rsi - 0xe]; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x00028710 : mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00028311 : mov ecx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00067f24 : mov rax, -0x40; neg edx; mov [rip + 0x25c328], -1; mov fs:[rax], edx; xor eax, eax; ret
0x0005227c : adc [rax], al; add [rdi], cl; xchg [rcx], ebx; xor al, [rax]; add [rax - 0x7d], cl; ret
0x00039d79 : xor r8d, r8d; xor ecx, ecx; not eax; xor edx, edx; add eax, 2; mov [rsp], eax; call rbx
0x00039d7a : xor eax, eax; xor ecx, ecx; not eax; xor edx, edx; add eax, 2; mov [rsp], eax; call rbx
0x00030bd1 : movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x00030bb1 : movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0008f5fe : add [rax], al; mov rcx, [rcx]; mov [rbx + 0x98], rcx; add rsp, 8; pop rbx; pop rbp; ret
0x00027d61 : mov ecx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0000dbd0 : add [rax], al; add [rax - 0x77], cl; fistp [rbx + 0x48]; mov eax, [rax + 0x28]; jmp rax
0x0002ee10 : mov eax, [rcx]; mov [rdx], eax; mov ax, [rcx + 4]; mov [rdx + 4], ax; mov rax, rdi; ret
0x00023459 : leave ; lea r10, [rip + 0x7375f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00085089 : leave ; lea r10, [rip + 0x2cebf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0002b6d9 : leave ; lea r10, [rip + 0x6bd1f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0000da50 : add [rax], al; add [rax - 0x77], cl; fistp [rbx + 0x48]; mov eax, [rax + 0x20]; jmp rax
0x0002a8c0 : mov rdx, [rsi - 0xd]; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x0002ee00 : mov eax, [rcx]; mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; mov rax, rdi; ret
0x0002850f : add [rax - 0x75], cl; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0007f039 : leave ; lea r10, [rip + 0x32ecf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00030b71 : movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x000199ed : add [rax], al; add al, [rax]; add [rdi + rax + 0x48], dh; lea eax, [rip + 0x13d25]; ret
0x0002a950 : mov rdx, [rsi - 0xc]; mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x000478a6 : add [rcx + rbp - 0x18], cl; mov rsi, r13; mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x00028120 : mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0003107e : add [rax], al; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x0002a951 : mov edx, [rsi - 0xc]; mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x00028310 : mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0002830f : add [rax - 0x75], cl; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0002a7a0 : mov rdx, [rsi - 0xf]; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x0000d312 : add [rax], al; add [rcx], dh; sal [rcx], cl; test [rax - 0x77], 0xdf; call [rax + 0x58]
0x0001d219 : leave ; lea r10, [rip + 0x798df]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0003059f : add al, bl; nop cs:[rax + rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x00019d89 : leave ; lea r10, [rip + 0x7cc6f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00027f41 : mov ecx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00028510 : mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00028121 : mov ecx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0002a830 : mov rdx, [rsi - 0xe]; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x0001cf6d : add [rax], al; add al, [rax]; add [rdi + rax + 0x48], dh; lea eax, [rip + 0x11f55]; ret
0x00030b51 : movq mm0, [rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x000013fa : sub al, 0; mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; mov rax, [rsp + 0x18]; call rax
0x0006235e : add [rax], al; sub rdx, [rax + 8]; mov eax, [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret
0x0002a8c1 : mov edx, [rsi - 0xd]; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x00058baf : adc [rax], al; add [rdi], cl; xchg [rbx], esi; add al, [rax]; add [rax - 0x7d], cl; ret
0x00027d60 : mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00039cd8 : add [rax], al; mov r9, r14; mov rcx, r12; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x0002aa51 : mov edx, [rsi - 0xa]; mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x00017849 : leave ; lea r10, [rip + 0x7f16f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0002a9d0 : mov rdx, [rsi - 0xb]; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x0006218d : xchg eax, ebx; fadd [rax]; add [rax], al; mov esi, eax; mov rdi, rbx; call [rdx + 0x30]
0x0002a9d1 : mov edx, [rsi - 0xb]; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x0003663e : add [rax], al; mov rdi, r12; call rbx; xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx
0x0002aa50 : mov rdx, [rsi - 0xa]; mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x00028711 : mov ecx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0004546f : mov [rip + 0x4c000007], dl; mov edx, esp; mov rsi, rbx; mov rdi, [rsp + 0x18]; call rbp
0x00028511 : mov ecx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0002a7a1 : mov edx, [rsi - 0xf]; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x00027f40 : mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00083519 : add edi, [rcx + rax]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0005ae9a : movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1100], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x000284f9 : mov edx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00027b00 : mov [rdi - 0x19], edx; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x0004727d : add [rax], al; mov rsi, r12; mov rdi, rbx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x0005bf63 : movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x10e8], 1; mov rdx, [rax*8 + 0x4a86c0]; jmp rdx
0x000711b7 : mov [rbp + 0x18], esp; add rax, 1; mov [rbp + 0x10], rax; pop rbx; pop rbp; pop r12; ret
0x00024f1b : add edi, edx; lea r11, [rip + 0x71cdc]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00060903 : add [rax], al; add [rax], al; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00025361 : add edi, edx; lea r11, [rip + 0x71896]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000315ee : add [rax - 0x73], cl; movnti [r14 + 0x66], r12d; nop cs:[rax + rax]; lea rax, [rdi]; ret
0x00061212 : mov ecx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x0003c8e2 : xor edx, edx; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x000311d1 : movq mm0, [rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x000286f9 : mov edx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00024d40 : add edi, edx; lea r11, [rip + 0x71eb7]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00025360 : add rdi, rdx; lea r11, [rip + 0x71896]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0003e949 : mov rcx, [r14]; mov [rsp], rax; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; call [r13]
0x000478a5 : add [rax], al; sub rax, r13; mov rsi, r13; mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x000252e6 : add rdi, rdx; lea r11, [rip + 0x71910]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00024b44 : add edi, edx; lea r11, [rip + 0x720b3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00014cca : sub al, [rax]; xor [rsi + 0x41], al; add bl, al; nop [rax]; mov [rip + 0x2ae74e], 0; ret
0x0000d92f : mov [rbx + 0x30], eax; mov [rbx + 0x20], rax; mov [rbx], edx; xor eax, eax; pop rbx; ret
0x000284f8 : mov rdx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x000620b5 : mov [rax + 0x28], edx; mov [rax + 0x18], rdx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x000175b7 : add [rax], al; add [rax], al; lea rax, [rdi + rax]; cmp [rax], sil; cmovne rax, rdx; ret
0x00030ace : add [rax], al; mov rcx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x0000e3e2 : xchg eax, ebx; add [rax], al; add [rcx + 0x48d231d1], cl; mov eax, [rax + 0x48]; jmp rax
0x0000d92e : mov [rbx + 0x30], rax; mov [rbx + 0x20], rax; mov [rbx], edx; xor eax, eax; pop rbx; ret
0x0005bd7f : movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1130], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x000286f8 : mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00024dd6 : add rdi, rdx; lea r11, [rip + 0x71e20]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00031248 : movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x0000d9b6 : add [rax], al; add [rax - 0x39], cl; push r8; add [rax], al; add [rax], al; pop rbx; ret
0x00024b43 : add rdi, rdx; lea r11, [rip + 0x720b3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0003613b : add [rdi], cl; test [rsi + 0xa], ch; add [rax], al; xor esi, esi; mov rdi, r12; call rbx
0x00025257 : add rdi, rdx; lea r11, [rip + 0x7199f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00024f1a : add rdi, rdx; lea r11, [rip + 0x71cdc]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00030a8e : add [rax], al; mov ecx, [rsi]; mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; ret
0x00027a04 : mov [rdi - 0x19], edx; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x000282f9 : mov edx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0002504c : add rdi, rdx; lea r11, [rip + 0x71baa]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00024dd7 : add edi, edx; lea r11, [rip + 0x71e20]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00062044 : mov [rdx + 0x38], r12; mov [rbx + 0x74], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x0000af27 : add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rsi - 1], bh; call [rax + 0x18]
0x0005bb5a : movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1120], 1; mov rdx, [rax*8 + 0x4a88c0]; jmp rdx
0x0003c2a3 : xor edx, edx; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r14
0x00024d3f : add rdi, rdx; lea r11, [rip + 0x71eb7]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00062045 : mov [rdx + 0x38], esp; mov [rbx + 0x74], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret
0x000711b6 : mov [rbp + 0x18], r12; add rax, 1; mov [rbp + 0x10], rax; pop rbx; pop rbp; pop r12; ret
0x000312c9 : movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x0001020a : add [rax + rbp*8], al; fist [rax + 2]; add [rax - 0x7d], cl; clc ; dec [rax - 0x77]; ret
0x0005aedc : movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1108], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x000615c7 : mov edi, ebx; mov esi, ebp; mov rax, [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x0003663f : add [rcx + rcx*4 - 0x19], cl; call rbx; xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx
0x0005bff6 : movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1114], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0002504d : add edi, edx; lea r11, [rip + 0x71baa]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00040412 : xor edx, edx; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call r14
0x000282f8 : mov rdx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00024a13 : add edi, edx; lea r11, [rip + 0x721e4]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0003de3c : xor edx, edx; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x000615c6 : mov rdi, rbx; mov esi, ebp; mov rax, [rax + 0x18]; add rsp, 8; pop rbx; pop rbp; jmp rax
0x0008f65d : mov esi, ebp; mov r8, rbx; mov rcx, r12; or esi, 2; mov rdx, [r12]; mov edi, 1; call rax
0x00024e55 : add edi, edx; lea r11, [rip + 0x71da2]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00027f28 : mov edx, [rsi - 4]; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00027d48 : mov edx, [rsi - 4]; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00028108 : mov edx, [rsi - 4]; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0003107d : add [rax], r8b; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x0008d562 : push rax; add al, [rax]; movzx ecx, cl; movsxd rcx, [rdi + rcx*4]; add rcx, rdi; jmp rcx
0x00024903 : add rdi, rdx; lea r11, [rip + 0x722f3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0000c3cc : adc esp, [rsp + rax*2 - 0x77]; add gs:[rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x00024904 : add edi, edx; lea r11, [rip + 0x722f3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000252e7 : add edi, edx; lea r11, [rip + 0x71910]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0000e2c5 : push rbp; mov rbp, rsi; push rbx; mov rax, [rdi + 0xd8]; mov rbx, rdi; call [rax + 0x60]
0x0001c2b2 : xor [rsi + 0xf], ah; xlatb ; rol [rbp - 0x4e7af040], 0; add [rax], al; xor rax, rax; ret
0x00061211 : mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x0003fab4 : xor edx, edx; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r15
0x000621ef : add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rsi - 1], bh; call [rax + 0x30]
0x000620b4 : mov [rax + 0x28], rdx; mov [rax + 0x18], rdx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x000609ef : add [rax], al; add [rax], al; mov [rsp], 1; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00024a12 : add rdi, rdx; lea r11, [rip + 0x721e4]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00027a03 : mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x000312ed : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00025258 : add edi, edx; lea r11, [rip + 0x7199f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0007472a : add [rax], al; add [rax], al; add [rax + 0x48b4864], dl; and eax, 0; add rax, -0x10; ret
0x00039cd9 : add [rbp - 0x77], cl; int1 ; mov rcx, r12; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x0003e94a : mov ecx, [rsi]; mov [rsp], rax; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; call [r13]
0x00027aff : mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x000362c9 : add [rdi], cl; test [rax + 0xc], bh; add [rax], al; xor esi, esi; mov rdi, r15; call rbx
0x0005bdc1 : movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1134], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00024e54 : add rdi, rdx; lea r11, [rip + 0x71da2]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0009119f : lea r14, [r13 - 1]; mov rdx, [rsp]; mov rdi, rbx; mov rsi, [r15 + r14*8 + 0x10]; call rbp
0x00030bf1 : movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x00075250 : mov [rdi], r11; shrd r8, r9, cl; mov [rdi + 8], r8; shr r9, cl; mov [rdi + 0x10], r9; ret
0x0006014e : add [rax], al; add [rcx + rcx*4 - 0x1e], cl; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0004727e : add [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x000279a0 : mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0003739a : add [rax - 0x73], cl; fmul gs:[rcx + 0x5c415bd8]; pop r13; pop r14; pop r15; pop rbp; ret
0x000918df : mov eax, [rip + 0x232e2b]; mov [rip + 0x232e24], rsi; mov [rsi + 0x28], rax; pop rbx; ret
0x000911a0 : lea esi, [rbp - 1]; mov rdx, [rsp]; mov rdi, rbx; mov rsi, [r15 + r14*8 + 0x10]; call rbp
0x0002ee71 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x00030b81 : movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x0002eda0 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x0002eeb1 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x0002ee51 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x00070ba1 : mov eax, [rip + 0x250169]; mov [rdi], rax; mov rax, [rip + 0x253bb7]; mov [rsi], rax; ret
0x00044ef8 : mov [rsi], rcx; mov rcx, -0x28; mov fs:[rcx], rax; mov rax, -0x20; mov fs:[rax], rdx; ret
0x0007eca9 : mov eax, [rbx + 0x18]; mov [rax], 0; mov rdx, [rdi + 0x448]; mov [rax], rdx; pop rbx; ret
0x0008d55e : lea rdi, [rip + 0x250bb]; movzx ecx, cl; movsxd rcx, [rdi + rcx*4]; add rcx, rdi; jmp rcx
0x000900db : add [rax], al; mov rdi, [rdx + 8]; sbb ecx, ecx; cmp [rsi + 8], rdi; cmovbe eax, ecx; ret
0x000361f1 : add [rsi + 2], bh; mov rdi, r15; call rbx; mov edx, 3; mov esi, 1; mov rdi, r14; call rbx
0x0002eda1 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x0002ee90 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x000657c8 : mov rax, [rax + 0x6c4498]; mov [rsi + 0x28], rax; pop rbx; pop rbp; pop r12; pop r13; ret
0x0008e179 : lea rcx, [rip + 0x24508]; movzx eax, al; movsxd rax, [rcx + rax*4]; add rcx, rax; jmp rcx
0x00006174 : mov [rax + 0x10], edx; mov rdx, [r12]; mov [rax + 8], rdx; pop rbx; pop rbp; pop r12; ret
0x00070ba0 : mov rax, [rip + 0x250169]; mov [rdi], rax; mov rax, [rip + 0x253bb7]; mov [rsi], rax; ret
0x0004748f : inc [rbx - 0x67b7df18]; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7dc0]; jmp rdx
0x0003639e : add [rsi + 2], bh; mov rdi, r14; call rbx; mov edx, 2; mov esi, 2; mov rdi, r13; call rbx
0x00070ace : mov edx, [rip + 0x253c9c]; lea rax, [rdx + 1]; mov [rip + 0x253c91], rax; add rsp, 8; ret
0x000918de : mov rax, [rip + 0x232e2b]; mov [rip + 0x232e24], rsi; mov [rsi + 0x28], rax; pop rbx; ret
0x0002ee20 : mov eax, [rcx]; mov [rdx], eax; mov eax, [rcx + 3]; mov [rdx + 3], eax; mov rax, rdi; ret
0x000310ee : add [rax], al; mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x0000bdc6 : add [rax], al; add [rax - 0x73], cl; push rax; add ecx, ebp; sar esi, -1; jmp [rsi + 0xf]
0x00030acd : add [rax], r8b; mov rcx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; ret
0x0008e17a : lea ecx, [rip + 0x24508]; movzx eax, al; movsxd rax, [rcx + rax*4]; add rcx, rax; jmp rcx
0x00027988 : mov rdx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0002ee60 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x00037b09 : mov edx, [rbp - 0x20]; movsxd rcx, eax; cmp [rdx + rcx*8 - 8], 1; sbb eax, 0; leave ; ret
0x000099ef : add [rbx - 0x3b7cb7fe], cl; cmp [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x00075141 : mov [rdi], ebx; shld r8, r9, cl; mov [rdi - 8], r8; shl r9, cl; mov [rdi - 0x10], r9; ret
0x00027a4c : mov [rdi - 0x19], edx; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0003109e : add [rax], al; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x00009b22 : add cl, [rbx - 0x3b7cb800]; cmp [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x0002ee41 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; mov rax, rdi; ret
0x0008168b : add eax, [rax]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0002ee61 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; mov rax, rdi; ret
0x0008e978 : movzx ecx, dl; lea rdx, [rip + 0x240f6]; movsxd rcx, [rdx + rcx*4]; add rdx, rcx; jmp rdx
0x0002ee91 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x0004b7e6 : inc [rbx - 0x67b7df18]; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7bc0]; jmp rdx
0x0002ee30 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; mov rax, rdi; ret
0x0007ec4e : add [rax], al; mov rax, [rbx + 0x18]; mov rdx, [rdi + 0x30]; mov [rax], rdx; pop rbx; ret
0x000363ad : add [rsi + 2], bh; mov rdi, r13; call rbx; mov edx, 1; mov esi, 1; mov rdi, r12; call rbx
0x00036279 : add [rsi + 2], bh; mov rdi, r14; call rbx; mov edx, 2; mov esi, 1; mov rdi, r13; call rbx
0x00010ab8 : add [rax], al; mov [rip + 0x2b294f], rax; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x0005a8ea : mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; sar rdx, 2; call [rax + 0x38]
0x00045498 : lea edi, [rax + rbp]; nop [rax + rax]; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x0004ec86 : add [rax], al; lea eax, [rdi - 1]; xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret
0x00037b08 : mov rdx, [rbp - 0x20]; movsxd rcx, eax; cmp [rdx + rcx*8 - 8], 1; sbb eax, 0; leave ; ret
0x00027989 : mov edx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0009182a : mov rax, [rip + 0x232edf]; mov [rip + 0x232ed8], rsi; mov [rsi + 0x28], rax; pop rbx; ret
0x0000c334 : add [rax], al; add [rcx], dh; idiv [rcx + 3]; mov edx, 2; mov rdi, rbx; call [rax + 0x48]
0x0000aebc : adc [rax + 0x48000000], -0x75; or [r15], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret
0x0003abb2 : add [rcx - 0x3b7cb730], cl; sub [rbx + 0x5d], bl; pop r12; pop r13; pop r14; pop r15; ret
0x00006173 : mov [rax + 0x10], rdx; mov rdx, [r12]; mov [rax + 8], rdx; pop rbx; pop rbp; pop r12; ret
0x0006dbad : mov [rdi + 0x300], rax; lea rax, [rax + rcx*4]; sub rax, rdx; mov [rdi + 0x308], rax; ret
0x0007eca8 : mov rax, [rbx + 0x18]; mov [rax], 0; mov rdx, [rdi + 0x448]; mov [rax], rdx; pop rbx; ret
0x0005a8eb : mov esi, [rbp + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; sar rdx, 2; call [rax + 0x38]
0x000762e4 : add [rax], al; add [rax], al; adc [rax], al; or rax, rsi; mov [rdi], rax; mov eax, 1; ret
0x0006b14d : add [rax], al; add [rcx - 0x73], cl; add [rax + 0xf4c3afa], rax; ror [rcx - 0x7d], 1; ret
0x000657c9 : mov eax, [rax + 0x6c4498]; mov [rsi + 0x28], rax; pop rbx; pop rbp; pop r12; pop r13; ret
0x000088fa : add [rax], al; add [rax - 0x73], cl; mov al, dh; add [rax], al; add [rax - 0x77], cl; ret
0x0002ee31 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; mov rax, rdi; ret
0x0003ee47 : mov [rcx + rcx*2 - 0x6b674100], dl; add r8b, bpl; pop rbx; sub al, 0xfc; jmp [rsi + 0x66]
0x0000c6f5 : add [rax], al; add [rcx], dh; idiv [rcx + 3]; mov edx, 2; mov rdi, r12; call [rax + 0x48]
0x00075140 : mov [rdi], r11; shld r8, r9, cl; mov [rdi - 8], r8; shl r9, cl; mov [rdi - 0x10], r9; ret
0x0002ee70 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; mov rax, rdi; ret
0x0006dbae : mov [rdi + 0x300], eax; lea rax, [rax + rcx*4]; sub rax, rdx; mov [rdi + 0x308], rax; ret
0x0000bdf0 : add [rax], al; add [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbp; call [rax + 0x78]
0x0003130c : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x0002ee50 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; mov rax, rdi; ret
0x0002eeb0 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x0003626a : add [rsi + 2], bh; mov rdi, r15; call rbx; mov edx, 3; mov esi, 2; mov rdi, r14; call rbx
0x00075251 : mov [rdi], ebx; shrd r8, r9, cl; mov [rdi + 8], r8; shr r9, cl; mov [rdi + 0x10], r9; ret
0x0002ee40 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; mov rax, rdi; ret
0x0009182b : mov eax, [rip + 0x232edf]; mov [rip + 0x232ed8], rsi; mov [rsi + 0x28], rax; pop rbx; ret
0x00045497 : lea r15, [rax + r13]; nop [rax + rax]; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x0004b5ff : inc [rbx - 0x67b7df18]; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7cc0]; jmp rdx
0x00027a4b : mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0003132c : movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x000481ed : inc [rbx - 0x67b7df18]; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a77c0]; jmp rdx
0x0003db67 : add [rax], al; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x000408d8 : add [rax], al; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x00044ef9 : mov [rsi], ecx; mov rcx, -0x28; mov fs:[rcx], rax; mov rax, -0x20; mov fs:[rax], rdx; ret
0x000279a1 : mov ebx, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0008d55f : lea edi, [rip + 0x250bb]; movzx ecx, cl; movsxd rcx, [rdi + rcx*4]; add rcx, rdi; jmp rcx
0x0001c4bf : add ecx, [rax - 0x2d]; clc ; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret
0x00070acd : mov rdx, [rip + 0x253c9c]; lea rax, [rdx + 1]; mov [rip + 0x253c91], rax; add rsp, 8; ret
0x0003662b : add [rsi + 2], bh; mov rdi, r13; call rbx; mov edx, 1; mov esi, 2; mov rdi, r12; call rbx
0x000304f0 : add [rax], al; nop cs:[rax + rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x00047b84 : int1 ; mov rdi, rbx; sub rcx, rsi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x000673f0 : adc [rax + 3], bh; syscall ; mov rax, -0x40; mov fs:[rax], edx; xor eax, eax; pop rbx; ret
0x00009a75 : mov [rsp + 8], edi; mov rax, [rax + 0x38]; mov rdi, r13; mov [rsp], rax; call [r13 + 0x18]
0x0000de43 : mov rax, [rbx + 8]; lea rdx, [rax + 1]; mov [rbx + 8], rdx; movzx eax, [rax]; pop rbx; ret
0x0002b31e : add [rax], al; mov edx, [rsi + 3]; mov ecx, [rsi]; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x0000e338 : mov [rbx + 0x10], 0; mov [rbx + 8], 0; mov [rbx + 0x18], 0; pop rbx; pop rbp; pop r12; ret
0x0002b15e : add [rax], al; mov rdx, [rsi + 3]; mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x000098cb : mov [rsp + 8], edx; mov rax, [rax + 0x38]; mov rdx, r10; mov [rsp], rax; call [r13 + 0x18]
0x0000de44 : mov eax, [rbx + 8]; lea rdx, [rax + 1]; mov [rbx + 8], rdx; movzx eax, [rax]; pop rbx; ret
0x00063a0a : lea edx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r12]; lea rcx, [rax + 1]; call rbx
0x0002b23e : add [rax], al; mov rdx, [rsi + 1]; mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x00009858 : add [rax], al; add [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x0005ff75 : add [rax], al; add [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call [rax + 0x38]
0x0005bba9 : add [rax], eax; add [rax], al; mov [rbp - 0x1120], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x000673b3 : add [rax], al; mov [rax + 0x18], 0; mov [rax + 0x20], 0; mov [rax + 0x28], 0; pop rbx; ret
0x0004ec85 : add [rax], r8b; lea eax, [rdi - 1]; xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret
0x0002b3fe : add [rax], al; mov edx, [rsi + 1]; mov ecx, [rsi]; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x00009a74 : mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, r13; mov [rsp], rax; call [r13 + 0x18]
0x000096c9 : mov [rsp + 8], edi; mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x00061ef7 : add [rcx - 0x75], cl; add [rax + 1], 0; add [rsi - 1], bh; mov rdi, r15; call [rax + 0x18]
0x0000d9a7 : add [rax], al; mov [rbx + 0x48], 0; mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x00038d58 : add [rax], eax; add [rcx + rbp - 0x3f], al; shl ecx, 3; pop rbx; shl eax, cl; pop rbp; ret
0x000310ed : add [rax], r8b; mov rcx, [rsi]; mov [rdi + 8], dh; mov [rdi], rcx; lea rax, [rdi + 8]; ret
0x0002af9e : add [rax], al; mov rdx, [rsi + 7]; mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x0002b1ce : add [rax], al; mov rdx, [rsi + 2]; mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x0002b00e : add [rax], al; mov rdx, [rsi + 6]; mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x00010130 : mov [rbx + 0x10], ebp; mov [rbx + 0x18], rbp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x000098ca : mov [rsp + 8], rdx; mov rax, [rax + 0x38]; mov rdx, r10; mov [rsp], rax; call [r13 + 0x18]
0x0002b38e : add [rax], al; mov edx, [rsi + 2]; mov ecx, [rsi]; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x00059c9d : add [rax], eax; add [rax], al; mov [rbp - 0x1110], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x0002b07e : add [rax], al; mov rdx, [rsi + 5]; mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0005c045 : add [rax], eax; add [rax], al; mov [rbp - 0x1110], 1; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00062144 : add [rax], al; mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x000617af : add [rax - 0x75], cl; add [rax + 1], 0; add [rsi - 1], bh; mov rdi, rbx; call [rax + 0x18]
0x00090309 : add al, [rax]; movzx edi, dil; mov rbp, rsi; movsxd rax, [r8 + rdi*4]; add r8, rax; jmp r8
0x000454b2 : add [rax], al; nop [rax]; add r15, r13; mov rdx, r12; mov rsi, r15; mov rdi, rbx; call rbp
0x00061e87 : add [rax], al; mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x0001c2b1 : xor [r14 + 0xf], r12b; xlatb ; rol [rbp - 0x4e7af040], 0; add [rax], al; xor rax, rax; ret
0x000096c8 : mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x0006dbdb : add [rax], al; lea rax, [rax + rdx*4]; mov [rdi + 0x2ec], edx; mov [rdi + 0x300], rax; ret
0x00063a09 : lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r12]; lea rcx, [rax + 1]; call rbx
0x0002b0ee : add [rax], al; mov rdx, [rsi + 4]; mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x0001012f : mov [rbx + 0x10], rbp; mov [rbx + 0x18], rbp; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0000b4f9 : add [rax], al; add [rcx + rcx*4 - 0x1e], cl; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x00081522 : lea edx, [rip + 0x19bf8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0001f31c : lea rdx, [rip + 0x7bdfd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00027db4 : mov [rdi - 0x1b], edx; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00045457 : mov rdx, r12; shr rax, 1; imul rax, rbx; mov rbx, rsi; add rbx, rax; mov rdi, rbx; call rbp
0x0002edcd : add [rax], al; add [rsi - 0x75], ah; add [rsi - 0x77], esp; add cl, [rax - 0x77]; clc ; ret
0x0002788a : mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00081547 : lea edx, [rip + 0x19bd3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00028174 : mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0002d6ed : lea edx, [rip + 0x6da2d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000098cc : push rsp; and al, 8; mov rax, [rax + 0x38]; mov rdx, r10; mov [rsp], rax; call [r13 + 0x18]
0x00008a4b : mov eax, [rbx + 0xa0]; mov [rax + 0x140], rdx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x000834be : lea ecx, [rip + 0x17c5c]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x000834f2 : lea edx, [rip + 0x17c28]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00030590 : mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x00027db3 : mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00045458 : mov edx, esp; shr rax, 1; imul rax, rbx; mov rbx, rsi; add rbx, rax; mov rdi, rbx; call rbp
0x00084e6e : lea ecx, [rip + 0x162ac]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0002ed41 : add [rsi + 0x66], ah; nop cs:[rax + rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x00020ecd : lea edx, [rip + 0x7a24d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00084ea2 : lea edx, [rip + 0x16278]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0002253c : lea rdx, [rip + 0x78bdd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0004a734 : mov [rbp - 0x538], edx; mov rsi, r9; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x00081521 : lea rdx, [rip + 0x19bf8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00084ea1 : lea rdx, [rip + 0x16278]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00084ec6 : lea rdx, [rip + 0x16253]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00027bd3 : mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000210f3 : lea rcx, [rip + 0x7a026]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00028574 : mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00022556 : lea rdx, [rip + 0x78bc3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00049287 : mov [rbp - 0x590], r10; mov rsi, r9; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x0006195e : add [rax], al; mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x0000dd36 : inc [rbp + 0x6b8948c9]; cmp [rdi], cl; ror [rcx - 0x3b7cb7ed], 1; sbb [rbx + 0x5d], bl; ret
0x00020e99 : lea ecx, [rip + 0x7a281]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x00084ec7 : lea edx, [rip + 0x16253]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0001f336 : lea rdx, [rip + 0x7bde3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0008182d : lea ecx, [rip + 0x198ed]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00022557 : lea edx, [rip + 0x78bc3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00084e6d : lea rcx, [rip + 0x162ac]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0002d706 : lea rdx, [rip + 0x6da13]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00061763 : add [rax], al; mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x00028175 : mov [rdi - 0x1d], edx; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0000879d : mov [rax + 8], r8; add [rdx + 4], 1; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x0001c3a1 : mov [rdx], ebp; add [rax], al; add al, [rax]; add [rbp + 8], dh; lea rax, [rip + 0x1f]; ret
0x00028374 : mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0000d8b9 : sbb [rax - 0x75], cl; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x00020ee6 : lea rdx, [rip + 0x7a233]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000279bb : add [rax], al; add [rax], al; add [rax - 0x75], cl; push rsi; clc ; mov [rdi - 8], rdx; ret
0x00083517 : lea edx, [rip + 0x17c03]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000609e9 : add [rax], al; mov [rsp + 8], 0; mov [rsp], 1; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00087482 : lea edx, [rip + 0x13c98]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000834f1 : lea rdx, [rip + 0x17c28]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00083516 : lea rdx, [rip + 0x17c03]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0002d6ec : lea rdx, [rip + 0x6da2d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000874a6 : lea rdx, [rip + 0x13c73]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0002ed4d : add [rax], al; add [rax - 0x75], cl; add [rax - 0x77], ecx; add cl, [rax - 0x77]; clc ; ret
0x00022508 : lea rcx, [rip + 0x78c11]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x00027bd4 : mov [rdi - 0x1a], edx; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000834bd : lea rcx, [rip + 0x17c5c]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x00060adc : add [rax], al; mov [rsp + 8], 0; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00020ee7 : lea edx, [rip + 0x7a233]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0001f5c3 : lea rcx, [rip + 0x7bb56]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x000210f4 : lea ecx, [rip + 0x7a026]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00037623 : sub [rax], al; mov rax, [rbx]; mov [rip + 0x28a7f1], rax; add rsp, 8; pop rbx; pop rbp; ret
0x00081546 : lea rdx, [rip + 0x19bd3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0004a733 : mov [rbp - 0x538], r10; mov rsi, r9; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x0001f5c4 : lea ecx, [rip + 0x7bb56]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00028575 : mov [rdi - 0x1f], edx; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0002253d : lea edx, [rip + 0x78bdd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00027fa3 : mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00049288 : mov [rbp - 0x590], edx; mov rsi, r9; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x00020e98 : lea rcx, [rip + 0x7a281]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0003663a : add [rsi + 2], bh; mov rdi, r12; call rbx; xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx
0x000874a7 : lea edx, [rip + 0x13c73]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0008378d : lea ecx, [rip + 0x1798d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00008a4a : mov rax, [rbx + 0xa0]; mov [rax + 0x140], rdx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0001f31d : lea edx, [rip + 0x7bdfd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0001f337 : lea edx, [rip + 0x7bde3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0006514d : adc bl, [rcx + 0xd77004a]; mov [rip + 0x25fc3a], 3; nop ; add rsp, 8; pop rbx; pop rbp; ret
0x00028375 : mov [rdi - 0x1e], edx; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0002784c : mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x0002491b : add [rax], al; add [rax], al; add [rdi], cl; mov dh, 7; movzx ecx, [rsi]; sub eax, ecx; ret
0x0008182c : lea rcx, [rip + 0x198ed]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0008378c : lea rcx, [rip + 0x1798d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00020ecc : lea rdx, [rip + 0x7a24d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000422b0 : mov ecx, esi; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x00022509 : lea ecx, [rip + 0x78c11]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x000422af : mov rcx, r14; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x0002d707 : lea edx, [rip + 0x6da13]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00027fa4 : mov [rdi - 0x1c], edx; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00087481 : lea rdx, [rip + 0x13c98]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0000d8ba : mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0002872d : add [rax], al; add [rbx + 0x4e8bf956], cl; cld ; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x0000c330 : mov rax, [rbx + 0xd8]; xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, rbx; call [rax + 0x48]
0x0000ad5f : mov [rbx + 0x18], eax; mov [rbx + 8], rax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x0000b45e : mov [rbx + 0x90], esi; mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x0000df07 : mov eax, [rsp + 0xd8]; movzx esi, [rbp]; mov rdi, r12; lea r13, [rbp + 1]; call [rax + 0x18]
0x0000d8bb : mov eax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x00019d87 : sub r9, rcx; lea r10, [rip + 0x7cc6f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0000b45d : mov [rbx + 0x90], rsi; mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x000090af : add [rcx - 0x3b7eb718], cl; clc ; add [rax], al; add [rbx + 0x5d], bl; pop r12; pop r13; ret
0x0000d8ea : mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x0000dddb : mov [rbx + 0x38], ebp; mov [rbx + 0x40], r12; mov [rbx], eax; pop rbx; pop rbp; pop r12; ret
0x0004238d : add [rax], al; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x00030591 : mov eax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x0000ad5e : mov [rbx + 0x18], rax; mov [rbx + 8], rax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x0002852d : add [rax], al; add [rbx + 0x4e8bfa56], cl; cld ; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x0000c331 : mov eax, [rbx + 0xd8]; xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, rbx; call [rax + 0x48]
0x0000df06 : mov rax, [r12 + 0xd8]; movzx esi, [rbp]; mov rdi, r12; lea r13, [rbp + 1]; call [rax + 0x18]
0x00000c78 : add [rax - 0x7b], cl; sal [rsp + rsi*8 + 0x5d], cl; mov rsi, rax; mov edi, 0x6c2c30; jmp rdx
0x00009852 : push rbx; mov rax, [rbx + 0xd8]; mov rsi, r12; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x000311bd : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x0000e5e4 : add al, 0; add [rax], al; add [rax - 0x39], cl; or [rax], al; add [rax], al; add bl, dh; ret
0x00030b3d : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x0003dc4a : mov edi, [rsp + 0x68]; mov [rsp + 8], rax; lea rax, [rsp + 0xa0]; mov [rsp], rax; call [rbx]
0x00017847 : sub r9, rcx; lea r10, [rip + 0x7f16f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0000c6f0 : mov rax, [r12 + 0xd8]; xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, r12; call [rax + 0x48]
0x00045096 : add [rbp - 0x3f6bf040], al; movzx eax, al; mov [rbx + 0x40], eax; xor eax, eax; pop rbx; ret
0x0002b6d7 : sub r9, rcx; lea r10, [rip + 0x6bd1f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0002832d : add [rax], al; add [rbx + 0x4e8bfb56], cl; cld ; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0000c12d : mov rdx, [rbx + 0xa0]; mov [rbx + 0xd8], rax; mov [rdx + 0x140], 0x494fc0; call [rax + 0x20]
0x0000d8eb : mov [rdi + 0x10], eax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x0007f037 : sub r9, rcx; lea r10, [rip + 0x32ecf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0008f0d7 : add [rbx + 0x5277053b], al; mov eax, [rbx]; movsxd rax, [r15 + rax*4]; add rax, r15; jmp rax
0x00075706 : add r9, rax; adc rdx, r8; mov [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret
0x0002a711 : movdqu xmm[rdi - 0x20], xmm0; lddqu xmm0, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x10], xmm0; ret
0x00047f25 : add [rax], al; mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x0003dc49 : mov rdi, [rsp + 0x68]; mov [rsp + 8], rax; lea rax, [rsp + 0xa0]; mov [rsp], rax; call [rbx]
0x0001d217 : sub r9, rcx; lea r10, [rip + 0x798df]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00087d82 : add [rax], al; mov [rsp + 0x80], rax; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x80]; call rbp
0x0000a555 : add [rax], al; mov rdi, rbx; pop rbx; mov rax, [rax + 0x140]; mov rax, [rax + 0x20]; jmp rax
0x00023457 : sub r9, rcx; lea r10, [rip + 0x7375f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00085087 : sub r9, rcx; lea r10, [rip + 0x2cebf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00005871 : add [rdi], cl; ror [rax - 0x7d], -0x3c; and [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret
0x0000c12e : mov edx, [rbx + 0xa0]; mov [rbx + 0xd8], rax; mov [rdx + 0x140], 0x494fc0; call [rax + 0x20]
0x0002788b : mov [rdi - 0x20], ecx; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0000c6f1 : mov eax, [rsp + 0xd8]; xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, r12; call [rax + 0x48]
0x00044ef7 : mov fs:[rsi], rcx; mov rcx, -0x28; mov fs:[rcx], rax; mov rax, -0x20; mov fs:[rax], rdx; ret
0x000881d6 : add [rax], al; mov [rsp + 0x70], rdx; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x0000ddda : mov [rbx + 0x38], rbp; mov [rbx + 0x40], r12; mov [rbx], eax; pop rbx; pop rbp; pop r12; ret
0x00090129 : leave ; mov rdx, [rbp]; mov rdi, [rsp + 8]; lea r15, [r12 + rcx*8]; mov rsi, [r15]; call r14
0x0000879e : mov [rax + 8], eax; add [rdx + 4], 1; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x0007d46a : xchg eax, edx; add [rax], al; add [rcx - 0x43], al; add [rax], al; add [rax - 0x77], cl; ret
0x0002784d : mov [rdi - 0x20], ecx; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00049bef : mov ebx, [rip + 0x27b253]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, rbx; call [r11 + rax*8]
0x000498b5 : add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7dc0]; jmp rdx
0x0000bf82 : add [rax], al; mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x00074a1d : mov ebx, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x48; jmp [rax]
0x000881d5 : add [rax], r8b; mov [rsp + 0x70], rdx; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x0000f1ee : add [rax], al; mov [rip + 0x2b41a6], 0; mov [rip + 0x2b41a0], 0; mov [rip + 0x2b4199], 0; ret
0x00074a1c : mov r11, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x48; jmp [rax]
0x000311e4 : mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x0004b834 : add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7ac0]; jmp rdx
0x0004ba42 : add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a78c0]; jmp rdx
0x0005c1f1 : mov r11, [rip + 0x268c50]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, r12; call [r11 + rax*8]
0x0008825d : mov rax, rbp; and rax, r13; and eax, 1; lea rbx, [rdx + rax]; mov [rsp + 0x90], rbx; call r12
0x00030bb0 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x000310b0 : mov ecx, [rsi]; mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; lea rax, [rdi + 5]; ret
0x00025fb9 : sub [rax], eax; lea r11, [rip + 0x70ebe]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x00017848 : sub ecx, ecx; lea r10, [rip + 0x7f16f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00030b50 : movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x000305d0 : mov eax, [rcx]; mov [rdx], eax; mov ax, [rcx + 4]; mov [rdx + 4], ax; lea rax, [rdx + 5]; ret
0x00031204 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x0008dde0 : add [rax], cl; mov [rip + 0x236735], 8; mov [rip + 0x23672f], 8; mov [rip + 0x236729], 8; ret
0x00031284 : mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x00030c38 : mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x0000ef4d : add fs:[rax], al; mov [rbx + 0x48], 0; mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x0006e043 : add [rax], 0; add [rax], al; sub rsp, 8; call [rip + 0x253e86]; xor eax, eax; add rsp, 8; ret
0x00070105 : mov edi, [rax]; mov rbx, rax; mov [rip + 0x25416f], r13; mov rdi, rbp; mov [rax], 0; call r12
0x0002b6d8 : sub ecx, ecx; lea r10, [rip + 0x6bd1f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00030bd0 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x0000de24 : inc ebx; nop cs:[rax + rax]; mov rax, [rdi + 0xd8]; push rbx; mov rbx, rdi; call [rax + 0x20]
0x00031100 : mov rcx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x0001d218 : sub ecx, ecx; lea r10, [rip + 0x798df]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00075707 : add ecx, eax; adc rdx, r8; mov [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret
0x00074b7e : mov r14, [rdi + 0x20]; mov r15, [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx
0x00019d88 : sub ecx, ecx; lea r10, [rip + 0x7cc6f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00030b70 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x0005a080 : mov esi, esi; mov rdi, r15; sar r9, 2; mov rdx, r9; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x00031101 : mov ecx, [rsi]; mov dx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], dx; lea rax, [rdi + 9]; ret
0x0000d9b0 : add [rax - 0x39], cl; pop r8; add [rax], al; add [rax], al; mov [rbx + 0x50], 0; pop rbx; ret
0x00031285 : mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x0005a07f : mov rsi, r14; mov rdi, r15; sar r9, 2; mov rdx, r9; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x00074b7f : mov esi, [rdi + 0x20]; mov r15, [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx
0x00027f3f : add [rax - 0x75], cl; cmc ; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00026013 : sub [rax], eax; lea r11, [rip + 0x70ea4]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0005c1f2 : mov ebx, [rip + 0x268c50]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, r12; call [r11 + rax*8]
0x00045318 : mov [rax], al; add [rax], al; mov rdx, [rsp + 0x38]; mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x00038f15 : mov [rip + 0x28bdbd], esi; mov [rip + 0x28bdbb], edi; mov [rip + 0x28bd78], r8d; pop rbx; ret
0x0007492f : add [rax - 0x75], cl; or bl, al; nop cs:[rax + rax]; mov rax, [rax + 8]; sub rax, fs:[0]; ret
0x00049bee : mov r11, [rip + 0x27b253]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, rbx; call [r11 + rax*8]
0x00085088 : sub ecx, ecx; lea r10, [rip + 0x2cebf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0008825e : mov eax, ebp; and rax, r13; and eax, 1; lea rbx, [rdx + rax]; mov [rsp + 0x90], rbx; call r12
0x00031264 : mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x000749aa : mov r11, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x50; jmp [rax]
0x000305c0 : mov eax, [rcx]; mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x0004b91e : add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a79c0]; jmp rdx
0x00070104 : mov r15, [rax]; mov rbx, rax; mov [rip + 0x25416f], r13; mov rdi, rbp; mov [rax], 0; call r12
0x000749ab : mov ebx, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x50; jmp [rax]
0x0007f038 : sub ecx, ecx; lea r10, [rip + 0x32ecf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00031265 : mov ecx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x0005ab5e : movabs es:[0xffee708d894c0026], al; dec [rcx + rcx*4 - 0xa]; mov rdi, r15; call [rax + r11*8]
0x0000ee41 : push rax; or [rbp + 0xb], dh; sub edx, [rax + 0x18]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x000477a3 : mov [rbp - 0x530], ecx; mov rdx, r14; mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x00023458 : sub ecx, ecx; lea r10, [rip + 0x7375f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0004085e : mov rdi, [r13 + 0x18]; mov r8, r12; mov rcx, rbp; mov rdx, [r14]; mov rsi, rbx; call [r13 + 8]
0x0003c147 : mov edi, [rdi + 0x18]; mov r8, r12; mov rcx, rbx; mov rdx, [r13]; mov rsi, rbp; call [r15 + 8]
0x00018d27 : lea ecx, [rdx + rcx - 0x10]; movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; ret
0x0003f08f : mov edi, [rsi + 0x18]; mov r8, rbx; mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r14 + 8]
0x00031247 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x000116d6 : sub al, [rax]; mov [rbx + 0x24], edi; mov [rbx + 0x14], eax; add rsp, 8; pop rbx; pop rbp; ret
0x000762fb : add [rax], al; add [rax], al; add bh, al; add al, [rax]; add [rax], al; add [rax + 1], bh; ret
0x00018d26 : lea rcx, [rdx + rcx - 0x10]; movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; ret
0x0000f1ed : add [rax], r8b; mov [rip + 0x2b41a6], 0; mov [rip + 0x2b41a0], 0; mov [rip + 0x2b4199], 0; ret
0x0006e044 : add [rax], al; add [rax], al; sub rsp, 8; call [rip + 0x253e86]; xor eax, eax; add rsp, 8; ret
0x0003f08e : mov rdi, [r14 + 0x18]; mov r8, rbx; mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r14 + 8]
0x0006158e : mov rax, [rdx]; lea rcx, [rax + 4]; mov [rdx], rcx; mov edx, [rax]; mov eax, edx; pop rbx; ret
0x00030c39 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x0004085f : mov edi, [rbp + 0x18]; mov r8, r12; mov rcx, rbp; mov rdx, [r14]; mov rsi, rbx; call [r13 + 8]
0x0003c58f : mov edi, [rsi + 0x18]; mov r8, r15; mov rcx, rbp; mov rdx, [r12]; mov rsi, rbx; call [r14 + 8]
0x000312c8 : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x00030b94 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x00070c51 : adc [rcx + rcx*4 + 0x20], cl; mov [rbx + 8], rdx; mov rax, rbx; pop rbx; pop rbp; pop r12; ret
0x0008aab8 : lea r15, [rax + r15*8 + 8]; mov rbx, rax; mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x0003c58e : mov rdi, [r14 + 0x18]; mov r8, r15; mov rcx, rbp; mov rdx, [r12]; mov rsi, rbx; call [r14 + 8]
0x0006158f : mov eax, [rdx]; lea rcx, [rax + 4]; mov [rdx], rcx; mov edx, [rax]; mov eax, edx; pop rbx; ret
0x0000aebb : mov [rbx + 0x90], eax; mov rax, [rbx + 8]; movzx eax, [rax]; add rsp, 8; pop rbx; pop rbp; ret
0x00072901 : add [rax - 0x7b], cl; sal [rdx + rcx + 0x49], cl; mov eax, [rbp]; add rax, [rdx + 8]; call rax
0x0000de2c : add [rax], al; add [rax], al; mov rax, [rdi + 0xd8]; push rbx; mov rbx, rdi; call [rax + 0x20]
0x000311e5 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x000376ed : add [rax + rax], al; test rax, rax; cmovne rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret
0x000459cc : add [rax], al; add [rax], al; add r14, r13; mov rdx, r12; mov rsi, r14; mov rdi, rbx; call rbp
0x0008bcf8 : push [rbx - 0x18]; xor esi, ebx; clc ; dec [rbx + rcx*4 + 0x3d]; fimul [rsi - 0x76b7ffdd]; ret
0x00030c15 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0003daef : mov edi, [rbx + 0x18]; mov r8, r12; mov rcx, rbp; mov rdx, [r14]; mov rsi, r13; call [rbx + 8]
0x0004c489 : mov rcx, [rbx + 0x10]; mov [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x0003c146 : mov rdi, [r15 + 0x18]; mov r8, r12; mov rcx, rbx; mov rdx, [r13]; mov rsi, rbp; call [r15 + 8]
0x0000853f : add [rax - 0x75], cl; sbb eax, 0; add [rax], al; xor esi, esi; mov rdi, rbx; call [rax + 0x10]
0x0000aeba : mov [rbx + 0x90], rax; mov rax, [rbx + 8]; movzx eax, [rax]; add rsp, 8; pop rbx; pop rbp; ret
0x0006431e : add [rax], eax; add [rax], al; mov [rsp], 0; mov r9, r15; mov rsi, r14; mov rdi, r12; call rbp
0x0002870f : add [rax - 0x75], cl; int1 ; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00018bde : add [rax], al; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x0008aab9 : lea edi, [rax + rdi*8 + 8]; mov rbx, rax; mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x000312ec : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x0003cb5f : mov edi, [rdi + 0x18]; mov r8, rbx; mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r15 + 8]
0x00030c14 : mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0003cb5e : mov rdi, [r15 + 0x18]; mov r8, rbx; mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r15 + 8]
0x0004c48a : mov ecx, [rbx + 0x10]; mov [rcx + rdx*8], rax; add rsp, 8; mov eax, ebp; pop rbx; pop rbp; ret
0x000918e1 : sub ebp, [rsi]; and eax, [rax]; mov [rip + 0x232e24], rsi; mov [rsi + 0x28], rax; pop rbx; ret
0x0003daee : mov rdi, [rbx + 0x18]; mov r8, r12; mov rcx, rbp; mov rdx, [r14]; mov rsi, r13; call [rbx + 8]
0x000311d0 : movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x0002adce : add [rax], al; mov dx, [rsi - 3]; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x0008e07b : sub [rcx], eax; add [rax], al; movzx eax, al; movsxd rax, [r11 + rax*4]; add rax, r11; jmp rax
0x0003166d : add [rax], al; add [rax - 0x73], cl; or r11b, r8b; nop cs:[rax + rax]; lea rax, [rdi + 9]; ret
0x00030c78 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x00030601 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x00030b80 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x00060be8 : lea r9, [rbp - 0x38]; mov rcx, r15; lea rdx, [rbp - 0x40]; mov rdi, r13; xor r8d, r8d; call r12
0x00056a31 : push rax; add [rcx - 0x77], ecx; push rdi; or [rdi + rcx - 0x4a], al; xor [rax - 0x7d], cl; ret
0x0008363b : add al, [rax]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0000c133 : add [rax - 0x77], cl; sbb eax, 0; add [rax], al; mov [rdx + 0x140], 0x494fc0; call [rax + 0x20]
0x0006407d : mov [rsp], 0; lea r9, [rsp + 0x28]; mov rcx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x0003160d : add [rax], al; add [rax - 0x73], cl; add r11d, r8d; nop cs:[rax + rax]; lea rax, [rdi + 2]; ret
0x00059d44 : mov esi, ebp; mov rdx, rax; mov [rbp - 0x1098], ecx; mov rdi, r15; sar rdx, 2; call [r9 + 0x38]
0x00030621 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x00025f60 : add [rdi + 0x1d], dh; movsxd r9, [r11 + rdx*4]; add rsi, rdx; add rdi, rdx; add r9, r11; jmp r9
0x0003130b : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x0008fa8f : add [rax - 0x75], cl; xchg [rax - 0x3d000000], esi; nop [rax + rax]; mov rax, [rdi + 0xa8]; ret
0x00067eb5 : movzx ecx, [rsp - 0x17]; mov [r8 + 0x21], cx; movzx ecx, [rsp - 0x15]; mov [r8 + 0x23], cl; ret
0x0009017e : mov edx, [rsp + rax*8]; lea rbp, [r12 + r9 - 8]; mov [rsp + 0x10], r9; mov rsi, [rbp]; call r14
0x0002eda2 : add [rax - 0x77], ecx; add cl, [rax - 0x75]; or [r8 - 0x77], cl; or [rax - 0x77], cl; clc ; ret
0x00030bf0 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x000312a4 : mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x00006ff0 : mov edx, [rsp]; mov rsi, r14; mov rdi, r12; lea r9, [r15 + rax]; mov [rsp + 0x10], r9; call r13
0x000313a7 : push rsi; adc bl, dh; movq [rdi], mm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x0000ee4a : adc [rcx], ch; rol bl, 1; nop ; sub edx, [rax + 0x10]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x0003161d : add [rax], al; add [rax - 0x73], cl; add r8b, r11b; nop cs:[rax + rax]; lea rax, [rdi + 3]; ret
0x000286f7 : int1 ; mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0000ed48 : mov rax, [rbx + 0x60]; mov [rbp], rax; mov [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret
0x0003a9be : xchg [rax], eax; add [rax - 0x39], cl; add eax, [rax]; add [rax], al; add [rax - 0x7d], cl; ret
0x00030620 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x00006fef : mov rdx, [rsp]; mov rsi, r14; mov rdi, r12; lea r9, [r15 + rax]; mov [rsp + 0x10], r9; call r13
0x000312a5 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x000310d0 : mov ecx, [rsi]; mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x00062292 : mov [rbp + 0x10], edx; mov [rbp], rax; mov [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret
0x000210ec : mov dh, 4; pi2fd mm6, [rsi - 0x72b7f1ec]; movabs al, es:[0x91148b81048b0007]; sub eax, edx; ret
0x00059d43 : mov rsi, r13; mov rdx, rax; mov [rbp - 0x1098], ecx; mov rdi, r15; sar rdx, 2; call [r9 + 0x38]
0x0009017d : mov rdx, [r12 + rax*8]; lea rbp, [r12 + r9 - 8]; mov [rsp + 0x10], r9; mov rsi, [rbp]; call r14
0x000264da : pop rdi; sal [rdx + 0xd], 1; movaps xmm[rdi - 0x20], xmm4; movaps xmm[rdi - 0x10], xmm5; jmp r9
0x00063f57 : lea r9, [rsp + 0x70]; mov rcx, r15; mov rdx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x0001998d : add [rax], r8b; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x00030600 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 5]; mov [rdx + 5], eax; lea rax, [rdx + 8]; ret
0x0003162d : add [rax], al; add [rax - 0x73], cl; add r8d, r11d; nop cs:[rax + rax]; lea rax, [rdi + 4]; ret
0x00064318 : mov edx, ebp; mov [rsp + 8], 1; mov [rsp], 0; mov r9, r15; mov rsi, r14; mov rdi, r12; call rbp
0x0008fa3f : add [rax - 0x75], cl; xchg [rax - 0x3d000000], esp; nop [rax + rax]; mov rax, [rdi + 0xb8]; ret
0x000305f0 : mov eax, [rcx]; mov [rdx], eax; mov eax, [rcx + 3]; mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x000620b3 : adc [rax - 0x77], cl; push rax; sub [rax - 0x77], cl; push rax; sbb [rcx + 0x5bc0310b], cl; ret
0x00030c58 : mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x00030561 : movnti [rsi + 0x66], esp; nop cs:[rax + rax]; mov al, [rcx]; mov [rdx], al; lea rax, [rdx]; ret
0x0000ed49 : mov eax, [rbx + 0x60]; mov [rbp], rax; mov [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret
0x0006dbb0 : add [rbx], al; add [rax], al; lea rax, [rax + rcx*4]; sub rax, rdx; mov [rdi + 0x308], rax; ret
0x0003132b : movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x0006214d : add [rax - 0x39], cl; push rax; add [rax], al; add [rax], al; mov [rax + 0x48], 0; pop rbx; ret
0x00031224 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x0005a084 : dec [rcx - 0x3f]; stc ; add cl, [rcx + rcx*4 - 0x36]; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x00064317 : mov rdx, r13; mov [rsp + 8], 1; mov [rsp], 0; mov r9, r15; mov rsi, r14; mov rdi, r12; call rbp
0x00087b7a : leave ; setne al; mov [rsp + 0x40], eax; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x0000ba04 : sub eax, edx; mov rdx, rax; mov rax, [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call [rax + 0x70]
0x00026085 : add rdi, rdx; lea r11, [rip + 0x70cb1]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029f93 : add rsi, rdx; lea r11, [rip + 0x6d1a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000292d0 : sub rsi, rdx; lea r11, [rip + 0x6dc26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a051 : sub esi, edx; lea r11, [rip + 0x6cea6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000292d1 : sub esi, edx; lea r11, [rip + 0x6dc26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027760 : add esi, edx; lea r11, [rip + 0x6f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a5cd : mov [rsp + 8], r14; lea rsi, [rax + 0x58]; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x0000ee49 : adc [r9], r13b; rol bl, 1; nop ; sub edx, [rax + 0x10]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x0002614a : add rdi, rdx; lea r11, [rip + 0x70bec]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002775f : add rsi, rdx; lea r11, [rip + 0x6f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000298d1 : sub esi, edx; lea r11, [rip + 0x6d626]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00061e82 : mov [rax + 0x50], 0; mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x00029514 : add esi, edx; lea r11, [rip + 0x6dc23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029451 : sub esi, edx; lea r11, [rip + 0x6daa6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028d93 : add rsi, rdx; lea r11, [rip + 0x6e3a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003de3b : leave ; xor edx, edx; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x0005c9d0 : mov esi, esi; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x00029393 : add rsi, rdx; lea r11, [rip + 0x6dda3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029213 : add rsi, rdx; lea r11, [rip + 0x6df23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029e14 : add rsi, rdx; lea r11, [rip + 0x6d322]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029150 : sub rsi, rdx; lea r11, [rip + 0x6dda6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029b14 : add esi, edx; lea r11, [rip + 0x6d623]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00040411 : leave ; xor edx, edx; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call r14
0x00029c93 : add rsi, rdx; lea r11, [rip + 0x6d4a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000274bf : add rsi, rdx; lea r11, [rip + 0x6f877]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029093 : add rsi, rdx; lea r11, [rip + 0x6e0a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003fab3 : leave ; xor edx, edx; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r15
0x0000ba03 : sub rax, rdx; mov rdx, rax; mov rax, [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call [rax + 0x70]
0x00047279 : mov eax, [rbx + 0xd8]; mov rsi, r12; mov rdi, rbx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x00029694 : add esi, edx; lea r11, [rip + 0x6daa3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a4fc : add edi, edx; lea r11, [rip + 0x6cc3b]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002736f : add rsi, rdx; lea r11, [rip + 0x6f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002679f : add rsi, rdx; lea r11, [rip + 0x70597]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003169d : add [rax], al; add [rax - 0x73], cl; or r8d, r11d; nop cs:[rax + rax]; lea rax, [rdi + 0xc]; ret
0x000309ac : sub edx, ecx; lea r11, [rip + 0x66a8b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0003c8e1 : leave ; xor edx, edx; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x0002a113 : add rsi, rdx; lea r11, [rip + 0x6d023]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029813 : add rsi, rdx; lea r11, [rip + 0x6d923]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029e15 : add esi, edx; lea r11, [rip + 0x6d322]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029693 : add rsi, rdx; lea r11, [rip + 0x6daa3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000e3de : add [rax], al; mov rax, [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, [rax + 0x48]; jmp rax
0x00029b13 : add rsi, rdx; lea r11, [rip + 0x6d623]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00067f22 : inc ebx; mov rax, -0x40; neg edx; mov [rip + 0x25c328], -1; mov fs:[rax], edx; xor eax, eax; ret
0x000268ef : add rsi, rdx; lea r11, [rip + 0x70447]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005c9cf : mov rsi, r14; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x0002a293 : add rsi, rdx; lea r11, [rip + 0x6cea3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000bf88 : add [rax], eax; add [rax - 0x75], cl; sbb eax, 0; add [rax], al; mov rdi, rbx; call [rax + 0x20]
0x0002a6af : sub edi, edx; lea r11, [rip + 0x6c848]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028f13 : add rsi, rdx; lea r11, [rip + 0x6e223]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a1d1 : sub esi, edx; lea r11, [rip + 0x6cd26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a6ae : sub rdi, rdx; lea r11, [rip + 0x6c848]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028afb : add edi, edx; lea r11, [rip + 0x6e63c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000270d0 : add esi, edx; lea r11, [rip + 0x6fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026f80 : add esi, edx; lea r11, [rip + 0x6fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003c2a2 : leave ; xor edx, edx; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r14
0x0002721f : add rsi, rdx; lea r11, [rip + 0x6fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029d50 : sub rsi, rdx; lea r11, [rip + 0x6d1a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000295d1 : sub esi, edx; lea r11, [rip + 0x6d926]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029751 : sub esi, edx; lea r11, [rip + 0x6d7a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030a3d : add [rax], al; add [rax + 0x6666c337], cl; nop cs:[rax + rax]; mov dx, [rsi]; mov [rdi], dx; ret
0x00026cdf : add rsi, rdx; lea r11, [rip + 0x70057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a556 : add [rax - 0x77], cl; fistp [rbx + 0x48]; mov eax, [rax + 0x140]; mov rax, [rax + 0x20]; jmp rax
0x00029f94 : add esi, edx; lea r11, [rip + 0x6d1a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026b8f : add rsi, rdx; lea r11, [rip + 0x701a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000298d0 : sub rsi, rdx; lea r11, [rip + 0x6d626]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004cd10 : push rax; add [rax - 0x77], ecx; push rbx; sub dh, al; add [rip - 0x1ae17], ch; jmp [rsi - 0x70]
0x00009e5f : add [rbx + rcx*4 - 0x45], cl; cwde ; add [rax], al; add [rcx + rcx*4 - 1], cl; call [r15 + 0x20]
0x000478a0 : mov rcx, [rbx + 0xd8]; sub rax, r13; mov rsi, r13; mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x00026a40 : add esi, edx; lea r11, [rip + 0x702f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000c332 : sbb eax, 0; add [rax], al; xor esi, esi; mov ecx, 3; mov edx, 2; mov rdi, rbx; call [rax + 0x48]
0x000268f0 : add esi, edx; lea r11, [rip + 0x70447]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ce0 : add esi, edx; lea r11, [rip + 0x70057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029d51 : sub esi, edx; lea r11, [rip + 0x6d1a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000309ab : sub rdx, rcx; lea r11, [rip + 0x66a8b]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0005a875 : mov rsi, r14; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x000274c0 : add esi, edx; lea r11, [rip + 0x6f877]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029513 : add rsi, rdx; lea r11, [rip + 0x6dc23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002623a : add esi, edx; lea r11, [rip + 0x70afd]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00060be9 : lea ecx, [rbp - 0x38]; mov rcx, r15; lea rdx, [rbp - 0x40]; mov rdi, r13; xor r8d, r8d; call r12
0x00026e08 : pop rdi; sal [rdx + 0x14], 1; movaps xmm[rdi - 0x20], xmm4; movaps xmm[rdi - 0x10], xmm5; jmp r9
0x000295d0 : sub rsi, rdx; lea r11, [rip + 0x6d926]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028c57 : add edi, edx; lea r11, [rip + 0x6e4e0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007ec39 : add [rdi], cl; test [rax + 0x48000000], edx; mov edx, [rbx + 0x18]; mov [rdx], rax; pop rbx; ret
0x000270cf : add rsi, rdx; lea r11, [rip + 0x6fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028cd8 : sub esi, edx; lea r11, [rip + 0x6e21f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028fd1 : sub esi, edx; lea r11, [rip + 0x6df26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028f14 : add esi, edx; lea r11, [rip + 0x6e223]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030fcb : sub rdx, rcx; lea r11, [rip + 0x664eb]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00029814 : add esi, edx; lea r11, [rip + 0x6d923]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a354 : lea eax, [rsp + 0x20]; mov [rsp + 8], rax; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r15 + 8]
0x00029a50 : sub rsi, rdx; lea r11, [rip + 0x6d4a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028cd7 : sub rsi, rdx; lea r11, [rip + 0x6e21f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a350 : sub rsi, rdx; lea r11, [rip + 0x6cba6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00047278 : mov rax, [rbx + 0xd8]; mov rsi, r12; mov rdi, rbx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x0004fac8 : push rax; add [rax - 0x77], ecx; push rbx; sub dh, al; add [rip - 0xa8d17], ch; jmp [rsi + 0x2e]
0x0003168d : add [rax], al; add [rax - 0x73], cl; or r8b, r11b; nop cs:[rax + rax]; lea rax, [rdi + 0xb]; ret
0x00028e50 : sub rsi, rdx; lea r11, [rip + 0x6e0a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000288ea : add edi, edx; lea r11, [rip + 0x6e44d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029994 : add esi, edx; lea r11, [rip + 0x6d7a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002614b : add edi, edx; lea r11, [rip + 0x70bec]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00061e90 : add [rcx - 0x75], cl; xchg eax, ebx; add [rax], al; add [rcx + rcx*4 - 1], cl; call [rax + 0x20]
0x00029094 : add esi, edx; lea r11, [rip + 0x6e0a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028afa : add rdi, rdx; lea r11, [rip + 0x6e63c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029bd1 : sub esi, edx; lea r11, [rip + 0x6d326]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004fe60 : push rax; add [rax - 0x77], ecx; push rbx; sub dh, al; add [rip - 0x71817], ch; jmp [rsi - 0x70]
0x00026b90 : add esi, edx; lea r11, [rip + 0x701a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005a876 : mov esi, esi; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x000264ff : add rsi, rdx; lea r11, [rip + 0x70837]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063f58 : lea ecx, [rsp + 0x70]; mov rcx, r15; mov rdx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x0002760f : add rsi, rdx; lea r11, [rip + 0x6f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027370 : add esi, edx; lea r11, [rip + 0x6f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a114 : add esi, edx; lea r11, [rip + 0x6d023]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a351 : sub esi, edx; lea r11, [rip + 0x6cba6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000673ae : mov [rax + 0x10], 0; mov [rax + 0x18], 0; mov [rax + 0x20], 0; mov [rax + 0x28], 0; pop rbx; ret
0x00029993 : add rsi, rdx; lea r11, [rip + 0x6d7a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a4fb : add rdi, rdx; lea r11, [rip + 0x6cc3b]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029151 : sub esi, edx; lea r11, [rip + 0x6dda6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029c94 : add esi, edx; lea r11, [rip + 0x6d4a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028d94 : add esi, edx; lea r11, [rip + 0x6e3a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026a3f : add rsi, rdx; lea r11, [rip + 0x702f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029750 : sub rsi, rdx; lea r11, [rip + 0x6d7a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00064082 : add [rax], al; lea r9, [rsp + 0x28]; mov rcx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x00028fd0 : sub rsi, rdx; lea r11, [rip + 0x6df26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000267a0 : add esi, edx; lea r11, [rip + 0x70597]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029450 : sub rsi, rdx; lea r11, [rip + 0x6daa6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029a51 : sub esi, edx; lea r11, [rip + 0x6d4a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a050 : sub rsi, rdx; lea r11, [rip + 0x6cea6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063de6 : lea r9, [rsp + 0x28]; lea rdx, [rsp + 0x20]; lea rsi, [rsp + 0x40]; lea rcx, [rax + 4]; call rbx
0x000288e9 : add rdi, rdx; lea r11, [rip + 0x6e44d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a353 : lea rax, [rsp + 0x20]; mov [rsp + 8], rax; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r15 + 8]
0x00026500 : add esi, edx; lea r11, [rip + 0x70837]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a5ce : mov [rsp + 8], esi; lea rsi, [rax + 0x58]; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x0003167d : add [rax], al; add [rax - 0x73], cl; or r11d, r8d; nop cs:[rax + rax]; lea rax, [rdi + 0xa]; ret
0x00030fcc : sub edx, ecx; lea r11, [rip + 0x664eb]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00029ed1 : sub esi, edx; lea r11, [rip + 0x6d026]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026650 : add esi, edx; lea r11, [rip + 0x706e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029214 : add esi, edx; lea r11, [rip + 0x6df23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027220 : add esi, edx; lea r11, [rip + 0x6fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a294 : add esi, edx; lea r11, [rip + 0x6cea3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003be6c : movsx r9, [rax + 0xa]; movsx eax, [rax + 0xb]; mov [rdx + 0x50], ecx; mov [rdx + 0x54], eax; ret
0x00029ed0 : sub rsi, rdx; lea r11, [rip + 0x6d026]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029bd0 : sub rsi, rdx; lea r11, [rip + 0x6d326]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026239 : add rsi, rdx; lea r11, [rip + 0x70afd]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026086 : add edi, edx; lea r11, [rip + 0x70cb1]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026f7f : add rsi, rdx; lea r11, [rip + 0x6fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028e51 : sub esi, edx; lea r11, [rip + 0x6e0a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029394 : add esi, edx; lea r11, [rip + 0x6dda3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00000aa0 : adc ebp, [rax + rax]; mov rax, rbp; sar rax, 1; pop rbp; mov [rip + 0x2c131f], rax; pop r12; ret
0x0002664f : add rsi, rdx; lea r11, [rip + 0x706e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028c56 : add rdi, rdx; lea r11, [rip + 0x6e4e0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a1d0 : sub rsi, rdx; lea r11, [rip + 0x6cd26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000478a1 : mov ecx, [rbx + 0xd8]; sub rax, r13; mov rsi, r13; mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x00027610 : add esi, edx; lea r11, [rip + 0x6f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00073653 : movsq [rdi], [rsi]; mov rcx, [rdi + 0x18]; mov rsi, [rdi + 0x20]; mov rdi, [rdi + 0x28]; call r11
0x000306a1 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x00047b82 : mov rcx, r14; mov rdi, rbx; sub rcx, rsi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x0006175e : mov [rax + 0x48], 0; mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x0005ab5c : mov eax, [rip + 0x26a226]; mov [rbp - 0x1190], r9; mov rsi, r14; mov rdi, r15; call [rax + r11*8]
0x00030661 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x0003be6d : movsx ecx, [rax + 0xa]; movsx eax, [rax + 0xb]; mov [rdx + 0x50], ecx; mov [rdx + 0x54], eax; ret
0x0003db62 : lea edx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x000408d3 : lea edx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x0005ae99 : pop rbp; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1100], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x000306c1 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x0003f100 : lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r12
0x0003d564 : lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x00030681 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x00028ad9 : add [rax], al; lea r11, [rip + 0x6e41e]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a299 : mov ecx, [rbx + 0x10]; mov rdx, [rbx + 0x18]; sar r8, 2; lea rsi, [rax + 0x58]; call [r15 + 0x30]
0x00063de7 : lea ecx, [rsp + 0x28]; lea rdx, [rsp + 0x20]; lea rsi, [rsp + 0x40]; lea rcx, [rax + 4]; call rbx
0x000304f1 : add [rsi + 0x66], ah; nop cs:[rax + rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x000328fc : add [rax], al; add [rax], al; movzx eax, [rdi - 0x10]; movzx edx, [rsi - 0x10]; sub eax, edx; ret
0x00061959 : mov [rax + 0x48], 0; mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x00071f07 : add [rax - 0x75], cl; movabs al, gs:[0x415c415bd8658d48]; pop rbp; pop r14; pop r15; pop rbp; ret
0x0000dda1 : add [rax], al; add [rbp + 0x48487ed2], al; mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x68]
0x00031120 : mov rcx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x000306a0 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x00030641 : mov eax, [rcx]; mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x000311a0 : mov rcx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x0005ab5b : mov rax, [rip + 0x26a226]; mov [rbp - 0x1190], r9; mov rsi, r14; mov rdi, r15; call [rax + r11*8]
0x0003cbc0 : lea edx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r15
0x0004937a : add [rax], al; mov rdx, r10; mov [rbp - 0x578], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0003e4db : mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x28]; mov [rsp + 8], esi; mov rsi, [rsp + 0x58]; call rax
0x0003db61 : lea rdx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x000408d2 : lea rdx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x00030551 : mov eax, [rcx]; mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x0003cbbf : lea rdx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r15
0x00030660 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x0008a966 : lea r14, [rbx + rax*8 + 8]; nop [rax + rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x0004a83a : add [rax], al; mov rdx, r10; mov [rbp - 0x4f8], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0000a298 : mov rcx, [rbx + 0x10]; mov rdx, [rbx + 0x18]; sar r8, 2; lea rsi, [rax + 0x58]; call [r15 + 0x30]
0x0003e4dc : mov edi, [rsp + 0x50]; mov rax, [rsp + 0x28]; mov [rsp + 8], esi; mov rsi, [rsp + 0x58]; call rax
0x0003c1a7 : lea rdx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call rbx
0x00030550 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x0000c467 : add [rax], al; mov rax, [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x00031121 : mov ecx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x0007ee96 : adc bl, [rsi + 0x24]; add [rax], al; add al, [rax]; add [rbp + 7], dh; lea rax, [rip + 0x79]; ret
0x0002a8bf : add [rax - 0x75], cl; push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x00040048 : lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x0000d30c : add [rax], al; mov rax, [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x00040049 : lea edx, [rsp + 0x70]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x00062348 : adc [rbp + 0x15], dh; sub rdx, [rax + 0x10]; mov eax, [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret
0x0000b4f3 : add [rax], al; mov rax, [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x00031141 : mov ecx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x00031181 : mov ecx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x00031140 : mov rcx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x0003c5f5 : lea edx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call rbx
0x00059c94 : mov [rdx], cs; mov [rbp - 0x10e8], 1; mov [rbp - 0x1110], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x0005c03c : mov [rdx], cs; mov [rbp - 0x10e8], 1; mov [rbp - 0x1110], 1; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00030680 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x0000dc7d : add [rax], al; add [rax - 0x73], cl; add [rax - 0x77], ecx; or [r15], cl; mov dh, 2; pop rbx; ret
0x000311a1 : mov ecx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x0003c1a8 : lea edx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call rbx
0x00073654 : movsd [rdi], [rsi]; mov rcx, [rdi + 0x18]; mov rsi, [rdi + 0x20]; mov rdi, [rdi + 0x28]; call r11
0x00030640 : mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x00047b83 : mov ecx, esi; mov rdi, rbx; sub rcx, rsi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x00031160 : mov rcx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x0008a967 : lea esi, [rbx + rax*8 + 8]; nop [rax + rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x0002a82f : add [rax - 0x75], cl; push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x00031180 : mov rcx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x00031161 : mov ecx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x000306c0 : mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x0003c5f4 : lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call rbx
0x0003d565 : lea edx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x0003f101 : lea edx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r12
0x0005bba0 : mov [rdx], cs; mov [rbp - 0x1118], 1; mov [rbp - 0x1120], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x0002701c : movq [r8], mm0; lea r11, [rip + 0x6fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00036c8c : add [rdi], cl; test [rbx - 0x41000008], ebx; add eax, [rax]; add [rax], al; mov rdi, r14; call rbx
0x00036d2c : add [rdi], cl; test [rdx - 0x41000006], ebp; add eax, [rax]; add [rax], al; mov rdi, r14; call rbx
0x00026e33 : movq [r8], mm0; lea r11, [rip + 0x6ff02]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000266ec : movq [r8], mm0; lea r11, [rip + 0x70649]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00091a0b : add [rax], al; add [rax], al; add [rcx], dh; fisttp [rax - 0x77]; fcomp [rbx + 0x5d]; pop r12; ret
0x00010ab3 : mov rax, [rdx + 0x868]; mov [rip + 0x2b294f], rax; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x0002659c : movq [r8], mm0; lea r11, [rip + 0x70799]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002aace : add [rax], al; mov rdx, [rsi - 9]; mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x000607c1 : add [rax], al; add [rax + 0x63], cl; ror [rcx + rcx*4 - 0x12], cl; mov rdi, r12; call [rax + 0x38]
0x0002740c : movq [r8], mm0; lea r11, [rip + 0x6f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002adcf : add [rsi - 0x75], ah; push rsi; std ; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x0002832e : add [rax], al; mov edx, [rsi - 5]; mov ecx, [rsi - 4]; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0004937b : add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x578], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0002716c : movq [r8], mm0; lea r11, [rip + 0x6fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00010ab4 : mov eax, [rdx + 0x868]; mov [rip + 0x2b294f], rax; add rsp, 8; mov rax, rdx; pop rbx; pop rbp; ret
0x0002872e : add [rax], al; mov edx, [rsi - 7]; mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x00073622 : mov esi, [rsp + 0x20]; mov rdi, [rsp + 0x28]; mov rsp, rbx; mov rbx, [rsp]; add rsp, 0x30; jmp r11
0x00036e8c : add [rdi], cl; test [rbx - 0x4100000a], edi; add eax, [rax]; add [rax], al; mov rdi, r15; call rbx
0x00036e4c : add [rdi], cl; test [rdx - 0x41000007], ebp; add eax, [rax]; add [rax], al; mov rdi, r15; call rbx
0x000276ac : movq [r8], mm0; lea r11, [rip + 0x6f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006213f : mov rax, [rbx + 0xa0]; mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x00073621 : mov rsi, [rsp + 0x20]; mov rdi, [rsp + 0x28]; mov rsp, rbx; mov rbx, [rsp]; add rsp, 0x30; jmp r11
0x00026ecc : movq [r8], mm0; lea r11, [rip + 0x6fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00036bb5 : add [rdi], cl; test [rsi - 0x4100000b], eax; add eax, [rax]; add [rax], al; mov rdi, r12; call rbx
0x00036c0c : add [rdi], cl; test [rcx - 0x41000006], eax; add eax, [rax]; add [rax], al; mov rdi, r13; call rbx
0x00026d7c : movq [r8], mm0; lea r11, [rip + 0x6ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00036c4c : add [rdi], cl; test [rdi - 0x41000004], edi; add eax, [rax]; add [rax], al; mov rdi, r13; call rbx
0x00026adc : movq [r8], mm0; lea r11, [rip + 0x70259]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000fbe1 : mov eax, [rdi + 0x10]; cmp [rdi + 0x28], rax; cmovae rax, [rdi + 0x28]; sub rax, [rdi + 0x18]; ret
0x0000d925 : adc [r8 - 0x76b7081a], al; or [r8 - 0x77], cl; xor [r8 - 0x77], cl; and [r9 + 0x5bc03113], cl; ret
0x0003627c : add [rax], al; add [rcx + rcx*4 - 9], cl; call rbx; mov edx, 2; mov esi, 1; mov rdi, r13; call rbx
0x000363a1 : add [rax], al; add [rcx + rcx*4 - 9], cl; call rbx; mov edx, 2; mov esi, 2; mov rdi, r13; call rbx
0x0002698c : movq [r8], mm0; lea r11, [rip + 0x703a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000376ea : add bh, [rdx + 0x40000]; test rax, rax; cmovne rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret
0x0002755c : movq [r8], mm0; lea r11, [rip + 0x6f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000272bc : movq [r8], mm0; lea r11, [rip + 0x6fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003626d : add [rax], al; add [rcx + rcx*4 - 1], cl; call rbx; mov edx, 3; mov esi, 2; mov rdi, r14; call rbx
0x00027b7e : add [rax], al; mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0004c31e : sbb ecx, [rax - 0x75]; sbb eax, 0; add [rax], al; movsxd rdx, ebp; mov rdi, rbx; call [rax + 0x38]
0x0003e0f3 : mov [rcx + rcx*2 - 0x6b674100], dl; add r8b, bpl; scasd eax, [rdi]; cmp esp, edi; jmp [rsi + 0x66]
0x00036dcc : add [rdi], cl; test [rax - 0x41000004], ebp; add eax, [rax]; add [rax], al; mov rdi, r15; call rbx
0x000361f4 : add [rax], al; add [rcx + rcx*4 - 1], cl; call rbx; mov edx, 3; mov esi, 1; mov rdi, r14; call rbx
0x00008a50 : add [rax - 0x77], cl; nop ; add [rax], eax; add [rax - 0x77], cl; fcomp [rbx + 0x5d]; pop r12; ret
0x0004a83b : add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x4f8], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0000fbe0 : mov rax, [rdi + 0x10]; cmp [rdi + 0x28], rax; cmovae rax, [rdi + 0x28]; sub rax, [rdi + 0x18]; ret
0x0000f1f3 : sub eax, [r8]; add [rax], al; add [rax], al; mov [rip + 0x2b41a0], 0; mov [rip + 0x2b4199], 0; ret
0x00063d57 : add [rax], eax; add [rax], al; mov [rsp], 1; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx
0x00026c2c : movq [r8], mm0; lea r11, [rip + 0x70109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002852e : add [rax], al; mov edx, [rsi - 6]; mov ecx, [rsi - 4]; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x00031088 : add cl, [rax - 0x73]; add r8b, r11b; nop ; mov edx, [rsi]; mov [rdi], edx; lea rax, [rdi + 3]; ret
0x0002683c : movq [r8], mm0; lea r11, [rip + 0x704f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000277fc : movq [r8], mm0; lea r11, [rip + 0x6f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00062140 : mov eax, [rbx + 0xa0]; mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x00087e63 : add r14, rax; mov rax, r13; and rax, r15; and eax, 1; add r14, rax; mov [rsp + 0x70], r14; call rbp
0x00087e64 : add esi, eax; mov rax, r13; and rax, r15; and eax, 1; add r14, rax; mov [rsp + 0x70], r14; call rbp
0x000096c7 : pop rax; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x000098c9 : pop rax; mov [rsp + 8], rdx; mov rax, [rax + 0x38]; mov rdx, r10; mov [rsp], rax; call [r13 + 0x18]
0x0002698d : movq [rax], mm0; lea r11, [rip + 0x703a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030b6f : add bl, dh; movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x00063d51 : xor edx, edx; mov [rsp + 8], 1; mov [rsp], 1; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx
0x00018c97 : lea edx, [rip + 0x7dce3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0006dbd6 : mov [rdi + 0x308], rax; lea rax, [rax + rdx*4]; mov [rdi + 0x2ec], edx; mov [rdi + 0x300], rax; ret
0x0002683d : movq [rax], mm0; lea r11, [rip + 0x704f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00015a83 : add dh, [rbp + 0x1a]; test [rdi + rdx - 8], 1; lea rcx, [rdx - 8]; cmovne rax, rcx; add rsp, 8; ret
0x00026d7d : movq [rax], mm0; lea r11, [rip + 0x6ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000608fb : lea rsi, [rbx + 0x50]; mov [rsp + 8], 0; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00031097 : add eax, ebx; nop [rax]; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x0000d8e9 : sbb [rax - 0x77], cl; adc [r8 - 0x77], r9b; sbb [r8 - 0x77], r9b; push rdi; mov [rdi + 8], rax; ret
0x0005ed99 : add al, [rbp + 0x481b7eed]; mov eax, [rbx + 0xd8]; movsxd rdx, ebp; mov rdi, rbx; call [rax + 0x38]
0x00026add : movq [rax], mm0; lea r11, [rip + 0x70259]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002659d : movq [rax], mm0; lea r11, [rip + 0x70799]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005d7c3 : add [rax], al; mov rdx, r10; mov [rbp - 0x10e0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0001f457 : lea edx, [rip + 0x77623]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x000609e5 : lea esi, [rbx + 0x98]; mov [rsp + 8], 0; mov [rsp], 1; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00026c2d : movq [rax], mm0; lea r11, [rip + 0x70109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030b4f : add bl, dh; movq mm0, [rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x000277fd : movq [rax], mm0; lea r11, [rip + 0x6f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00042387 : lea r8, [rsp + 0x90]; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x00026e34 : movq [rax], mm0; lea r11, [rip + 0x6ff02]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000276ad : movq [rax], mm0; lea r11, [rip + 0x6f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001f456 : lea r10, [rip + 0x77623]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00062a9a : xor r8, rax; and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret
0x0008fd11 : mov ebp, [rbp - 0x18]; mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; mov rbp, [rbp]; mov rsp, rcx; ret
0x000609e4 : lea rsi, [rbx + 0x98]; mov [rsp + 8], 0; mov [rsp], 1; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x0005a260 : add [rax], al; mov rdx, r10; mov [rbp - 0x10f0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00059a25 : mov esi, ebx; mov rdi, r15; sub r13, rbx; mov r14, r13; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x00026ecd : movq [rax], mm0; lea r11, [rip + 0x6fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005b712 : add [rax], al; mov rdx, rcx; mov [rbp - 0x1140], rcx; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00059a24 : mov rsi, rbx; mov rdi, r15; sub r13, rbx; mov r14, r13; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x0000f1f4 : sub eax, [rax]; add [rax], al; add [rax], al; mov [rip + 0x2b41a0], 0; mov [rip + 0x2b4199], 0; ret
0x00036c2c : add [rdi], cl; test [rsi*8 + 0x3beffff], esi; add [rax], al; add [rcx + rcx*4 - 0x11], cl; call rbx
0x0008830f : add esi, eax; mov rax, rbx; and rax, r12; and eax, 1; add r14, rax; mov [rsp + 0x70], r14; call rbp
0x00030baf : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x00081686 : lea r10, [rip + 0x30803]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0000bbe9 : mov eax, [rdi + 8]; sub rax, [rdi + 0x10]; add rax, [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; ret
0x0002716d : movq [rax], mm0; lea r11, [rip + 0x6fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000608fc : lea esi, [rbx + 0x50]; mov [rsp + 8], 0; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00030bcf : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x000266ed : movq [rax], mm0; lea r11, [rip + 0x70649]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00018c96 : lea r10, [rip + 0x7dce3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00060ad8 : lea esi, [rbx + 0x98]; mov [rsp + 8], 0; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x0002740d : movq [rax], mm0; lea r11, [rip + 0x6f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00060ad7 : lea rsi, [rbx + 0x98]; mov [rsp + 8], 0; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x0000bbe8 : mov rax, [rdi + 8]; sub rax, [rdi + 0x10]; add rax, [rdi + 0x90]; add rsp, 8; pop rbx; pop rbp; ret
0x0002755d : movq [rax], mm0; lea r11, [rip + 0x6f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006dbd7 : mov [rdi + 0x308], eax; lea rax, [rax + rdx*4]; mov [rdi + 0x2ec], edx; mov [rdi + 0x300], rax; ret
0x0008fd10 : mov r13, [rbp - 0x18]; mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; mov rbp, [rbp]; mov rsp, rcx; ret
0x000272bd : movq [rax], mm0; lea r11, [rip + 0x6fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00037cea : add [rax], 0; add [rax - 0x77], cl; mov [rax + rcx*4], gs; add [rax], al; add [rax - 0x7d], cl; ret
0x00061f79 : mov [rax + 0x30], rbp; mov [rax + 0x38], r12; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x0000d926 : adc [rax - 0x76b7081a], al; or [r8 - 0x77], cl; xor [r8 - 0x77], cl; and [r9 + 0x5bc03113], cl; ret
0x0002701d : movq [rax], mm0; lea r11, [rip + 0x6fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00061f7a : mov [rax + 0x30], ebp; mov [rax + 0x38], r12; mov [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret
0x0008830e : add r14, rax; mov rax, rbx; and rax, r12; and eax, 1; add r14, rax; mov [rsp + 0x70], r14; call rbp
0x00081687 : lea edx, [rip + 0x30803]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00045781 : mov [rsp + 0x10], ebx; mov rbx, [rsp]; nop [rax]; mov rsi, r14; mov rdi, r13; mov rdx, r12; call rbp
0x00047f21 : mov eax, [rbx + 0xd8]; mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x0000da47 : inc [rbp + 0x481975c0]; mov eax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x0000dbc7 : inc [rbp + 0x481975c0]; mov eax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x000312eb : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x0002b4db : add [rax], 0; add [rax], al; mov dx, [rsi + 1]; mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x0004727a : sbb eax, 0; add [rax], al; mov rsi, r12; mov rdi, rbx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x0002edde : add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x0005d7c4 : add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x10e0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0006e0f5 : add eax, [rax]; add [rsi*2 + 0x158f8015], al; add eax, [rax]; add [rax + rcx*2], al; add esp, 8; ret
0x0005a261 : add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x10f0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0000dc7c : add [rax], al; add [rax], al; lea rax, [rdx + 1]; mov [rbx + 8], rax; movzx eax, [rdx]; pop rbx; ret
0x00037ceb : add [rax], al; add [rax - 0x77], cl; mov [rax + rcx*4], gs; add [rax], al; add [rax - 0x7d], cl; ret
0x00030b3b : add [rax], 0; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x0000a550 : mov rax, [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x140]; mov rax, [rax + 0x20]; jmp rax
0x00090304 : lea r8, [rip + 0x2280d]; movzx edi, dil; mov rbp, rsi; movsxd rax, [r8 + rdi*4]; add r8, rax; jmp r8
0x0000e344 : add [rax], al; add [rax - 0x39], cl; sbb [r8], al; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x00062a9b : xor eax, eax; and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret
0x0000a551 : mov eax, [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x140]; mov rax, [rax + 0x20]; jmp rax
0x00059833 : add [rax], 0; add [rax], al; mov rax, [rdi + 0xd8]; movsxd r12, edx; mov rdx, r12; call [rax + 0x38]
0x00008538 : add [rax], al; nop [rax + rax]; mov rax, [rbx + 0xd8]; xor esi, esi; mov rdi, rbx; call [rax + 0x10]
0x00091d1d : add [rax], al; lea r9, [rip + 0x20e26]; movzx r8d, r8b; movsxd rax, [r9 + r8*4]; add r9, rax; jmp r9
0x00031096 : add r8d, r11d; nop [rax]; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x00047f20 : mov rax, [rbx + 0xd8]; mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x00042388 : lea eax, [rsp + 0x90]; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x00045780 : mov [rsp + 0x10], rbx; mov rbx, [rsp]; nop [rax]; mov rsi, r14; mov rdi, r13; mov rdx, r12; call rbp
0x0008fc71 : mov r12, [rbp - 0x20]; mov r13, [rbp - 0x18]; mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; leave ; ret
0x0008fc72 : mov esp, [rbp - 0x20]; mov r13, [rbp - 0x18]; mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; leave ; ret
0x000312c7 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x0000f198 : add [rdi], cl; test [rsi + 0x48000002], edx; mov [rip + 0x2b4202], edx; add [rip + 0x2b41f7], 1; ret
0x000009a0 : add [rbx + rbx - 0x7d], esi; clc ; add cl, [rdi]; test [rip + 0x5b000001], dl; pop rbp; pop r12; ret
0x0006eb0c : add [rax], al; add [rax], al; mov rax, [r12 + 0x10]; add rax, [rbx]; mov [rbp - 0xe0], r11; call rax
0x00031246 : adc bl, dh; movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x00030b4e : add bl, sil; movq mm0, [rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x000311cf : add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret
0x00018d25 : add [rax - 0x73], cl; or r14b, al; movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; ret
0x00090128 : movsxd rcx, ecx; mov rdx, [rbp]; mov rdi, [rsp + 8]; lea r15, [r12 + rcx*8]; mov rsi, [r15]; call r14
0x00031365 : movq mm2, [rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x0003662e : add [rax], al; add [rcx + rcx*4 - 0x11], cl; call rbx; mov edx, 1; mov esi, 2; mov rdi, r12; call rbx
0x0000df05 : pop rdx; mov rax, [r12 + 0xd8]; movzx esi, [rbp]; mov rdi, r12; lea r13, [rbp + 1]; call [rax + 0x18]
0x000311bc : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x00039cd1 : add [rax], al; mov [rsp], 0; mov r9, r14; mov rcx, r12; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x0000bf7d : mov rax, [rbx + 0xa0]; mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x00031385 : movq mm2, [rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x00030b3c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], dh; ret
0x0006235b : add [rax], 0; add [rax], al; sub rdx, [rax + 8]; mov eax, [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret
0x00030cb1 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x0000d8b8 : push rdi; sbb [rax - 0x75], cl; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x000304ee : inc [rax]; add [rax], al; nop cs:[rax + rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x00031345 : movq mm2, [rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x0007007b : adc al, ch; lahf ; std ; inc [rbp + 0x75c389c0]; mov rdi, [rsp + 0x38]; mov r9, [rsp + 0x30]; call r9
0x0000bf7e : mov eax, [rbx + 0xa0]; mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x0002b4dc : add [rax], al; add [rax], al; mov dx, [rsi + 1]; mov cx, [rsi]; mov [rdi + 1], dx; mov [rdi], cx; ret
0x00059834 : add [rax], al; add [rax], al; mov rax, [rdi + 0xd8]; movsxd r12, edx; mov rdx, r12; call [rax + 0x38]
0x00090305 : lea eax, [rip + 0x2280d]; movzx edi, dil; mov rbp, rsi; movsxd rax, [r8 + rdi*4]; add r8, rax; jmp r8
0x000310cd : add [rax], al; add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x0006388d : add [rax], al; add [rax - 0x39], cl; rol [rax + rax], 0; add bl, al; nop [rax + rax]; mov rax, 5; ret
0x000363b0 : add [rax], al; add [rcx + rcx*4 - 0x11], cl; call rbx; mov edx, 1; mov esi, 1; mov rdi, r12; call rbx
0x00030bef : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x0001c3b5 : mov [rdx], ch; add [rax], al; add [rax], cl; add [rax + rcx + 0x48], dh; lea eax, [rip + 0x852b]; ret
0x0003132a : sbb bl, dh; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x000367d4 : add [rax], al; add [rdi], cl; test [rbx + 5], cl; add [rax], al; xor esi, esi; mov rdi, r14; call rbx
0x00036525 : add [rax], al; add [rdi], cl; test [rdx + 7], bl; add [rax], al; xor esi, esi; mov rdi, r14; call rbx
0x00000a9d : mov [rip + 0x2c130d], eax; mov rax, rbp; sar rax, 1; pop rbp; mov [rip + 0x2c131f], rax; pop r12; ret
0x0002ed9e : add [rax + 0x48018b48], dl; mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x00000a9c : mov [rip + 0x2c130d], rax; mov rax, rbp; sar rax, 1; pop rbp; mov [rip + 0x2c131f], rax; pop r12; ret
0x0002eddd : add [rax], r8b; mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; mov rax, rdi; ret
0x00030c91 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x00030cd1 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x00036a72 : add [rax], al; add [rdi], cl; test [rbp + 3], cl; add [rax], al; xor esi, esi; mov rdi, r15; call rbx
0x00030c37 : adc [rsi - 0x75], ah; sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x000367f4 : add [rax], al; add [rdi], cl; test [rbx + 6], cl; add [rax], al; xor esi, esi; mov rdi, r15; call rbx
0x000470cc : add [rax], al; add [rax], al; mov rax, [rdi + 0xd8]; movsxd r13, edx; mov rdx, r13; call [rax + 0x38]
0x0002850e : add [rax], al; mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0003c8e0 : xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x0003fab2 : xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r15
0x0002edfe : add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; mov rax, rdi; ret
0x00024e51 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x71da2]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0002811e : add [rax], al; mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00083514 : mov dh, 7; lea rdx, [rip + 0x17c03]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0002a9ce : add [rax], al; mov rdx, [rsi - 0xb]; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x00024f18 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x71cdc]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0002a94e : add [rax], al; mov rdx, [rsi - 0xc]; mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x0002504a : add esi, edx; add rdi, rdx; lea r11, [rip + 0x71baa]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00030b7c : movnti [r8 + 0x66f0ff3], r10; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x00027f3e : add [rax], al; mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0002a82e : add [rax], al; mov rdx, [rsi - 0xe]; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x0000e2c2 : mov r12, rdx; push rbp; mov rbp, rsi; push rbx; mov rax, [rdi + 0xd8]; mov rbx, rdi; call [rax + 0x60]
0x000312ea : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00025254 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x7199f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00045dc9 : mov [rdx + 0xe], bh; mov [rax + 0xe], sil; mov rdx, r12; mov rsi, [rsp + 0x10]; mov rdi, rbx; call rbp
0x00024a10 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x721e4]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00025049 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x71baa]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00024d3d : add esi, edx; add rdi, rdx; lea r11, [rip + 0x71eb7]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0003de39 : xor rcx, rcx; xor edx, edx; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x000252e4 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x71910]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00024e52 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x71da2]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00024901 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x722f3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000312c6 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x0002830d : add [rax], al; add [rax - 0x75], cl; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x000874a4 : mov dh, 7; lea rdx, [rip + 0x13c73]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00024b41 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x720b3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00031245 : adc bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x00039cd6 : add [rax], al; add [rax], al; mov r9, r14; mov rcx, r12; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x0006195f : add [rax - 0x75], cl; sbb eax, 0; add [rax], al; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x0002830e : add [rax], al; mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0001f334 : mov dh, 7; lea rdx, [rip + 0x7bde3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0002535d : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x71896]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00027d5e : add [rax], al; mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00024900 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x722f3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0000e2c3 : mov esp, edx; push rbp; mov rbp, rsi; push rbx; mov rax, [rdi + 0xd8]; mov rbx, rdi; call [rax + 0x60]
0x00059c4f : add [rdi + 0xf], dh; movzx eax, [rax + 0x4a8cc0]; mov rdx, [rax*8 + 0x4a8bc0]; mov r14d, 0x10; jmp rdx
0x00024dd4 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x71e20]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00025255 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x7199f]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0002d704 : mov dh, 7; lea rdx, [rip + 0x6da13]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00024b40 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x720b3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000252e3 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x71910]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0002aa4e : add [rax], al; mov rdx, [rsi - 0xa]; mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x0002a8be : add [rax], al; mov rdx, [rsi - 0xd]; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x00030a6f : add [rbx - 0x3ce876ea], cl; nop cs:[rax + rax]; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; ret
0x0002535e : add esi, edx; add rdi, rdx; lea r11, [rip + 0x71896]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00024d3c : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x71eb7]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00024f17 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x71cdc]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00022554 : mov dh, 7; lea rdx, [rip + 0x78bc3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00024dd3 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x71e20]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0003c2a1 : xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r14
0x0002870e : add [rax], al; mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0006235c : add [rax], al; add [rax], al; sub rdx, [rax + 8]; mov eax, [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret
0x00061764 : add [rax - 0x75], cl; sbb eax, 0; add [rax], al; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x0002850d : add [rax], al; add [rax - 0x75], cl; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00081544 : mov dh, 7; lea rdx, [rip + 0x19bd3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0002a79e : add [rax], al; mov rdx, [rsi - 0xf]; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x00084ec4 : mov dh, 7; lea rdx, [rip + 0x16253]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00040410 : xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call r14
0x00020ee4 : mov dh, 7; lea rdx, [rip + 0x7a233]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00024a0f : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x721e4]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0003c2a0 : xor rcx, rcx; xor edx, edx; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r14
0x000478a4 : add [rax], al; add [rcx + rbp - 0x18], cl; mov rsi, r13; mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x0003de3a : xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x0003761e : mov [rip + 0x28a7f3], rdx; mov rax, [rbx]; mov [rip + 0x28a7f1], rax; add rsp, 8; pop rbx; pop rbp; ret
0x0005bdbf : add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1134], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0008dddb : mov [rip + 0x23673b], 8; mov [rip + 0x236735], 8; mov [rip + 0x23672f], 8; mov [rip + 0x236729], 8; ret
0x00030a8c : add [rax], al; add [rax], al; mov ecx, [rsi]; mov dx, [rsi + 4]; mov [rdi], ecx; mov [rdi + 4], dx; ret
0x0005bff4 : add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1114], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0004de70 : mov eax, [rax + 0x38]; mov [rbp - 0xc8], r9d; mov rdx, r8; mov [rbp - 0xb0], r8; mov rdi, rbx; call rax
0x000621ed : add [rax], al; add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rsi - 1], bh; call [rax + 0x30]
0x0003761f : mov [rip + 0x28a7f3], edx; mov rax, [rbx]; mov [rip + 0x28a7f1], rax; add rsp, 8; pop rbx; pop rbp; ret
0x00039cd7 : add [rax], al; add [rbp - 0x77], cl; int1 ; mov rcx, r12; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x0005bb58 : add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1120], 1; mov rdx, [rax*8 + 0x4a88c0]; jmp rdx
0x0005bd7d : add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1130], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0009119d : mov ebp, esi; lea r14, [r13 - 1]; mov rdx, [rsp]; mov rdi, rbx; mov rsi, [r15 + r14*8 + 0x10]; call rbp
0x0000da4b : sbb [rax - 0x75], ecx; sbb eax, 0; add [rax], al; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x00087d80 : sub al, 2; add [rax], al; mov [rsp + 0x80], rax; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x80]; call rbp
0x00031329 : sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x000013f5 : mov rdx, [rip + 0x2c212c]; mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; mov rax, [rsp + 0x18]; call rax
0x0003e947 : add [rax], al; mov rcx, [r14]; mov [rsp], rax; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; call [r13]
0x0004de6f : mov rax, [rax + 0x38]; mov [rbp - 0xc8], r9d; mov rdx, r8; mov [rbp - 0xb0], r8; mov rdi, rbx; call rax
0x0003663d : add [rax], al; add [rcx + rcx*4 - 0x19], cl; call rbx; xor edx, edx; mov esi, 1; mov rdi, rbp; call rbx
0x0002a9cf : add [rax - 0x75], cl; push rsi; cmc ; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x00030cf1 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x00036139 : add [rax], al; add [rdi], cl; test [rsi + 0xa], ch; add [rax], al; xor esi, esi; mov rdi, r12; call rbx
0x000362c7 : add [rax], al; add [rdi], cl; test [rax + 0xc], bh; add [rax], al; xor esi, esi; mov rdi, r15; call rbx
0x0009119c : mov r13, r14; lea r14, [r13 - 1]; mov rdx, [rsp]; mov rdi, rbx; mov rsi, [r15 + r14*8 + 0x10]; call rbp
0x0005aeda : add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1108], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x000315ec : add [rax], al; add [rax - 0x73], cl; movnti [r14 + 0x66], r12d; nop cs:[rax + rax]; lea rax, [rdi]; ret
0x0000dbcb : sbb [rax - 0x75], ecx; sbb eax, 0; add [rax], al; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x000313a5 : movq mm2, [rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x0003522e : sub edx, [rax + 0x32cabe8]; add [rbp + 0x482178c0], al; add esp, 8; mov rax, rbx; pop rbx; pop rbp; ret
0x00060149 : dec [rax - 0x75]; sbb eax, 0; add [rax], al; mov rdx, r12; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00010208 : add [rax], al; add [rax + rbp*8], al; fist [rax + 2]; add [rax - 0x7d], cl; clc ; dec [rax - 0x77]; ret
0x00030b7d : movnti [rax + 0x66f0ff3], edx; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; ret
0x0003109b : add [rax], 0; add [rax], al; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x00045dc8 : mov [rdx + 0xe], dil; mov [rax + 0xe], sil; mov rdx, r12; mov rsi, [rsp + 0x10]; mov rdi, rbx; call rbp
0x000013f6 : mov edx, [rip + 0x2c212c]; mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; mov rax, [rsp + 0x18]; call rax
0x00031079 : add ebx, eax; nop [rax + rax]; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x0007ec4b : add [rax], 0; add [rax], al; mov rax, [rbx + 0x18]; mov rdx, [rdi + 0x30]; mov [rax], rdx; pop rbx; ret
0x0005bf61 : add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x10e8], 1; mov rdx, [rax*8 + 0x4a86c0]; jmp rdx
0x00026adb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x70259]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002b3fb : add [rax], 0; add [rax], al; mov edx, [rsi + 1]; mov ecx, [rsi]; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x00026d7b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x6ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002755b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006e0f3 : adc [rbx + rax], 0; add [rsi*2 + 0x158f8015], al; add eax, [rax]; add [rax + rcx*2], al; add esp, 8; ret
0x00064475 : lea rdx, [rsp + 0x40]; mov [rsp + 8], 1; mov [rsp], 0; mov r9, r15; mov rsi, r14; mov rdi, r12; call rbp
0x0007ec4c : add [rax], al; add [rax], al; mov rax, [rbx + 0x18]; mov rdx, [rdi + 0x30]; mov [rax], rdx; pop rbx; ret
0x000732a7 : mov rsi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x48; jmp r11
0x0003109c : add [rax], al; add [rax], al; mov ecx, [rsi]; mov [rdi + 4], dh; mov [rdi], ecx; lea rax, [rdi + 4]; ret
0x0002ee8e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; mov rax, rdi; ret
0x00025fb5 : mov ecx, [rip + 0x29be55]; lea r11, [rip + 0x70ebe]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x00026ecb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002600f : mov ecx, [rip + 0x29bdfb]; lea r11, [rip + 0x70ea4]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x000485e8 : dec [rax - 0x75]; sbb eax, 0; add [rax], al; mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x0002eddf : add [rsi - 0x75], ah; add [rsi - 0x77], esp; add cl, [rdx + 0x42880241]; add cl, [rax - 0x77]; clc ; ret
0x00009c39 : mov [rsp + 8], rcx; mov rdx, [rdx + 0x38]; mov rcx, rax; mov [rsp], rdx; mov rdx, r14; call [r13 + 0x18]
0x00026e32 : movdqu xmm[r8], xmm0; lea r11, [rip + 0x6ff02]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030573 : add cl, [rax - 0x73]; add al, bl; nop [rax + rax]; mov ax, [rcx]; mov [rdx], ax; lea rax, [rdx + 1]; ret
0x0002b07b : add [rax], 0; add [rax], al; mov rdx, [rsi + 5]; mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0002af9b : add [rax], 0; add [rax], al; mov rdx, [rsi + 7]; mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x0002740b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002701b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00039ccb : mov [rsp + 8], 0; mov [rsp], 0; mov r9, r14; mov rcx, r12; mov rdx, rbp; mov rsi, [rsp + 0x18]; call rbx
0x0002b23b : add [rax], 0; add [rax], al; mov rdx, [rsi + 1]; mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x000620b1 : mov [rax], rdx; mov [rax + 0x28], rdx; mov [rax + 0x18], rdx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x0002716b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002eeae : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; mov rax, rdi; ret
0x0002b15b : add [rax], 0; add [rax], al; mov rdx, [rsi + 3]; mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x00009c3a : mov [rsp + 8], ecx; mov rdx, [rdx + 0x38]; mov rcx, rax; mov [rsp], rdx; mov rdx, r14; call [r13 + 0x18]
0x00064476 : lea edx, [rsp + 0x40]; mov [rsp + 8], 1; mov [rsp], 0; mov r9, r15; mov rsi, r14; mov rdi, r12; call rbp
0x000277fb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00025fb4 : mov rcx, [rip + 0x29be55]; lea r11, [rip + 0x70ebe]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0002b00b : add [rax], 0; add [rax], al; mov rdx, [rsi + 6]; mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x0008c8d3 : mov edx, [rsp + 0xc]; mov rax, [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call [rax + 0x48]
0x0000bde1 : mov [rbp + 0x90], -1; mov rax, [rbp + 0xd8]; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call [rax + 0x78]
0x0002b0eb : add [rax], 0; add [rax], al; mov rdx, [rsi + 4]; mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x00047f22 : sbb eax, 0; add [rax], al; mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x0002683b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x704f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002b31b : add [rax], 0; add [rax], al; mov edx, [rsi + 3]; mov ecx, [rsi]; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x00031078 : add r11d, r8d; nop [rax + rax]; mov cx, [rsi]; mov [rdi], cx; mov [rdi + 2], dh; lea rax, [rdi + 2]; ret
0x0002698b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x703a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007eca6 : add [rax], al; mov rax, [rbx + 0x18]; mov [rax], 0; mov rdx, [rdi + 0x448]; mov [rax], rdx; pop rbx; ret
0x0002b38b : add [rax], 0; add [rax], al; mov edx, [rsi + 2]; mov ecx, [rsi]; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x000732a8 : mov esi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x48; jmp r11
0x000276ab : movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004727c : add [rax], al; add [rcx + rcx*4 - 0x1a], cl; mov rdi, rbx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x000266eb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x70649]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000620b2 : mov [rax], edx; mov [rax + 0x28], rdx; mov [rax + 0x18], rdx; mov [rbx], ecx; xor eax, eax; pop rbx; ret
0x00026c2b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x70109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00070b9e : add [rax], al; mov rax, [rip + 0x250169]; mov [rdi], rax; mov rax, [rip + 0x253bb7]; mov [rsi], rax; ret
0x0002659b : movdqu xmm[r8], xmm0; lea r11, [rip + 0x70799]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002799e : add [rax], al; mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0002600e : mov rcx, [rip + 0x29bdfb]; lea r11, [rip + 0x70ea4]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0002a79f : add [rax - 0x75], cl; push rsi; int1 ; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x0002b1cb : add [rax], 0; add [rax], al; mov rdx, [rsi + 2]; mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x0005ff70 : dec [rax - 0x75]; sbb eax, 0; add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x38]
0x000272bb : movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00049375 : mov rax, [rbx + 0xd8]; mov rdx, r10; mov [rbp - 0x578], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0000c463 : mov [rbx + 0x90], edx; mov rax, [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x00081689 : add ecx, [rax]; add eax, [rax]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0002b31c : add [rax], al; add [rax], al; mov edx, [rsi + 3]; mov ecx, [rsi]; mov [rdi + 3], edx; mov [rdi], ecx; ret
0x00049285 : mov edx, edx; mov [rbp - 0x590], r10; mov rsi, r9; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x000470cf : add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rbx - 0x16], cl; mov rdx, r13; call [rax + 0x38]
0x0000a352 : pop rax; lea rax, [rsp + 0x20]; mov [rsp + 8], rax; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r15 + 8]
0x00009850 : mov rdx, [rbx + 0x40]; mov rax, [rbx + 0xd8]; mov rsi, r12; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x00059837 : add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rbx - 0x1e], cl; mov rdx, r12; call [rax + 0x38]
0x00045493 : add r14, [rsp]; lea r15, [rax + r13]; nop [rax + rax]; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x000900d9 : add [rax], eax; add [rax], al; mov rdi, [rdx + 8]; sbb ecx, ecx; cmp [rsi + 8], rdi; cmovbe eax, ecx; ret
0x000247e5 : xor [rax + 9], cl; int1 ; bsf rcx, rcx; movzx eax, [rax + rcx]; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x0002b3fc : add [rax], al; add [rax], al; mov edx, [rsi + 1]; mov ecx, [rsi]; mov [rdi + 1], edx; mov [rdi], ecx; ret
0x00049376 : mov eax, [rbx + 0xd8]; mov rdx, r10; mov [rbp - 0x578], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x000348ed : push [rdi + 0x18]; mov eax, [rsp - 0x64]; mov edx, eax; neg edx; cmp [rsp - 0x68], 2; cmove eax, edx; ret
0x0002b23c : add [rax], al; add [rax], al; mov rdx, [rsi + 1]; mov rcx, [rsi]; mov [rdi + 1], rdx; mov [rdi], rcx; ret
0x0004a731 : mov edx, edx; mov [rbp - 0x538], r10; mov rsi, r9; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x0002b1cc : add [rax], al; add [rax], al; mov rdx, [rsi + 2]; mov rcx, [rsi]; mov [rdi + 2], rdx; mov [rdi], rcx; ret
0x0002b15c : add [rax], al; add [rax], al; mov rdx, [rsi + 3]; mov rcx, [rsi]; mov [rdi + 3], rdx; mov [rdi], rcx; ret
0x0000c462 : mov [rbx + 0x90], rdx; mov rax, [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x0002af9c : add [rax], al; add [rax], al; mov rdx, [rsi + 7]; mov rcx, [rsi]; mov [rdi + 7], rdx; mov [rdi], rcx; ret
0x0002881c : add edi, edx; sfence ; lea r11, [rip + 0x6e518]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00049284 : mov rdx, r10; mov [rbp - 0x590], r10; mov rsi, r9; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x0002b38c : add [rax], al; add [rax], al; mov edx, [rsi + 2]; mov ecx, [rsi]; mov [rdi + 2], edx; mov [rdi], ecx; ret
0x00045494 : add esi, [rsp]; lea r15, [rax + r13]; nop [rax + rax]; mov rdx, r12; mov rsi, rbx; mov rdi, r14; call rbp
0x0004a730 : mov rdx, r10; mov [rbp - 0x538], r10; mov rsi, r9; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x0002881b : add rdi, rdx; sfence ; lea r11, [rip + 0x6e518]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004a836 : mov eax, [rbx + 0xd8]; mov rdx, r10; mov [rbp - 0x4f8], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0002b0ec : add [rax], al; add [rax], al; mov rdx, [rsi + 4]; mov rcx, [rsi]; mov [rdi + 4], rdx; mov [rdi], rcx; ret
0x00009851 : mov edx, [rbx + 0x40]; mov rax, [rbx + 0xd8]; mov rsi, r12; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x0002b00c : add [rax], al; add [rax], al; mov rdx, [rsi + 6]; mov rcx, [rsi]; mov [rdi + 6], rdx; mov [rdi], rcx; ret
0x0004a835 : mov rax, [rbx + 0xd8]; mov rdx, r10; mov [rbp - 0x4f8], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0000de2f : add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rbx + 0x48], dl; mov ebx, edi; call [rax + 0x20]
0x00061e85 : add [rax], al; add [rax], al; mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x000673b1 : add [rax], al; add [rax], al; mov [rax + 0x18], 0; mov [rax + 0x20], 0; mov [rax + 0x28], 0; pop rbx; ret
0x000477a2 : add [rcx - 0x52f73], cl; dec [rcx + rcx*4 - 0xe]; mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x0002b07c : add [rax], al; add [rax], al; mov rdx, [rsi + 5]; mov rcx, [rsi]; mov [rdi + 5], rdx; mov [rdi], rcx; ret
0x0002ed4b : add [rax], al; add [rax], al; add [rax - 0x75], cl; add [rax - 0x77], ecx; add cl, [rax - 0x77]; clc ; ret
0x000116d2 : mov eax, [rip + 0x2afe10]; mov [rbx + 0x24], edi; mov [rbx + 0x14], eax; add rsp, 8; pop rbx; pop rbp; ret
0x0002edcb : add [rax], al; add [rax], al; add [rsi - 0x75], ah; add [rsi - 0x77], esp; add cl, [rax - 0x77]; clc ; ret
0x0008c8d2 : dec [rbx + 0x480c2454]; mov eax, [rbx + 0xd8]; mov ecx, ebp; mov rsi, r12; mov rdi, rbx; call [rax + 0x48]
0x0000d9a8 : add [rax - 0x39], cl; add [rax], al; add [rax], al; mov [rbx + 0x58], 0; mov [rbx + 0x50], 0; pop rbx; ret
0x000485e2 : mov rsi, [rbp - 0x5a8]; mov rax, [rbx + 0xd8]; mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x0002ed3f : add [rax], al; add [rsi + 0x66], ah; nop cs:[rax + rax]; mov rax, [rcx]; mov [rdx], rax; mov rax, rdi; ret
0x000834bc : xchg eax, edx; lea rcx, [rip + 0x17c5c]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x00063b49 : lea r9, [rsp + 0x38]; mov rcx, r14; lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r13]; call r12
0x00062145 : add [rax - 0x39], cl; add [rax], al; add [rax], al; mov [rax + 0x50], 0; mov [rax + 0x48], 0; pop rbx; ret
0x0007ec57 : xor [rax - 0x77], cl; adc [rbx - 0x3d], bl; nop [rax]; mov rax, [rbx + 0x18]; mov [rax], rdi; pop rbx; ret
0x00062043 : xor [rcx + rcx*4 + 0x62], cl; cmp [rcx + 0x1b87443], cl; add [rax], al; add [rbx + 0x5d], bl; pop r12; ret
0x000308f1 : xor [rbp + rcx*4 + 0x1d], cl; imul r8d, [r14], 0; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00083637 : lea edx, [rip + 0x2e893]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0004b068 : mov rsi, [rbp - 0x528]; mov rax, [rbx + 0xd8]; mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x0000edaf : add [rax - 0x75], cl; xchg al, bl; add [rax], al; add [rax - 0x77], cl; fistp [rsi - 1]; call [rax + 0x18]
0x0006195c : add [rax], al; add [rax], al; mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x0000879b : add [rax], al; mov [rax + 8], r8; add [rdx + 4], 1; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x00020e97 : xchg eax, edx; lea rcx, [rip + 0x7a281]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x0008f5ff : add [rax - 0x75], cl; or [rax - 0x77], ecx; mov ebx, [rax + 0x48000000]; add esp, 8; pop rbx; pop rbp; ret
0x0004b069 : mov esi, [rbp - 0x528]; mov rax, [rbx + 0xd8]; mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x000116d1 : mov rax, [rip + 0x2afe10]; mov [rbx + 0x24], edi; mov [rbx + 0x14], eax; add rsp, 8; pop rbx; pop rbp; ret
0x0000b4ee : mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x00083636 : lea r10, [rip + 0x2e893]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00084e6c : xchg eax, edx; lea rcx, [rip + 0x162ac]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x000422ae : add [rcx + rcx*4 - 0xf], cl; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x0000b4ef : mov [rax + 0x140], edx; mov rax, [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x000422ad : add [rax], al; mov rcx, r14; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x00020fe7 : lea edx, [rip + 0x75ad3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00022507 : xchg eax, edx; lea rcx, [rip + 0x78c11]; mov edx, [rcx + rdx*4]; mov eax, [rcx + rax*4]; sub eax, edx; ret
0x00020fe6 : lea r10, [rip + 0x75ad3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0008aab5 : sub edi, 1; lea r15, [rax + r15*8 + 8]; mov rbx, rax; mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x00027b64 : mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00027b65 : mov ecx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00061761 : add [rax], al; add [rax], al; mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x0003058e : add [rax], al; mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x000485e3 : mov esi, [rbp - 0x5a8]; mov rax, [rbx + 0xd8]; mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x00061e88 : add [rax - 0x39], cl; add [rax], al; add [rax], al; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x00063b4a : lea ecx, [rsp + 0x38]; mov rcx, r14; lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r13]; call r12
0x0001f455 : leave ; lea r10, [rip + 0x77623]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00047627 : mov [rbp - 0x588], eax; mov rdx, rcx; mov [rbp - 0x578], rcx; mov rsi, r14; mov rdi, rbx; call [rax + 0x38]
0x0002795e : push rsi; clc ; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0007ec46 : add bl, [rbx - 0x3d]; nop [rax]; mov rax, [rbx + 0x18]; mov rdx, [rdi + 0x30]; mov [rax], rdx; pop rbx; ret
0x00047626 : mov [rbp - 0x588], r8d; mov rdx, rcx; mov [rbp - 0x578], rcx; mov rsi, r14; mov rdi, rbx; call [rax + 0x38]
0x0005a25c : mov eax, [rdi + 0xd8]; mov rdx, r10; mov [rbp - 0x10f0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00049bec : mov edi, edi; mov r11, [rip + 0x27b253]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, rbx; call [r11 + rax*8]
0x00031384 : movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x00031344 : movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x0005d7be : mov rax, [r15 + 0xd8]; mov rdx, r10; mov [rbp - 0x10e0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00045094 : add al, [rax]; add [rbp - 0x3f6bf040], al; movzx eax, al; mov [rbx + 0x40], eax; xor eax, eax; pop rbx; ret
0x00018c95 : leave ; lea r10, [rip + 0x7dce3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00031364 : movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x00030c90 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0008aab4 : sub r15d, 1; lea r15, [rax + r15*8 + 8]; mov rbx, rax; mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x00081685 : leave ; lea r10, [rip + 0x30803]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00027b4c : mov dl, [rsi - 1]; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x000311bb : add [rax], al; add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm[rdi], xmm0; lea rax, [rdi + 0xf]; ret
0x0005a25b : mov rax, [r15 + 0xd8]; mov rdx, r10; mov [rbp - 0x10f0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00063d50 : leave ; xor edx, edx; mov [rsp + 8], 1; mov [rsp], 1; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx
0x000284ce : push rsi; clc ; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0005c1ef : mov edi, edi; mov r11, [rip + 0x268c50]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, r12; call [r11 + rax*8]
0x0002852b : add [rax], al; add [rax], al; add [rbx + 0x4e8bfa56], cl; cld ; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x0008825b : add edx, eax; mov rax, rbp; and rax, r13; and eax, 1; lea rbx, [rdx + rax]; mov [rsp + 0x90], rbx; call r12
0x00049beb : mov rdi, r15; mov r11, [rip + 0x27b253]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, rbx; call [r11 + rax*8]
0x00000c76 : add [rax], al; add [rax - 0x7b], cl; sal [rsp + rsi*8 + 0x5d], cl; mov rsi, rax; mov edi, 0x6c2c30; jmp rdx
0x00027f0d : push rsi; cld ; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0003058d : add [rax], r8b; mov ax, [rcx]; mov [rdx], ax; mov al, [rcx + 2]; mov [rdx + 2], al; lea rax, [rdx + 2]; ret
0x0005d7bf : mov eax, [rdi + 0xd8]; mov rdx, r10; mov [rbp - 0x10e0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x000609e3 : leave ; lea rsi, [rbx + 0x98]; mov [rsp + 8], 0; mov [rsp], 1; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00070103 : add [rbx + rcx*4 + 0x38], cl; mov rbx, rax; mov [rip + 0x25416f], r13; mov rdi, rbp; mov [rax], 0; call r12
0x00027d2d : push rsi; cld ; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0008825a : add rdx, rax; mov rax, rbp; and rax, r13; and eax, 1; lea rbx, [rdx + rax]; mov [rsp + 0x90], rbx; call r12
0x000286ce : push rsi; clc ; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00030cb0 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x000280ed : push rsi; cld ; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x000282ce : push rsi; clc ; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0002872b : add [rax], al; add [rax], al; add [rbx + 0x4e8bf956], cl; cld ; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x0005b70d : mov rax, [r15 + 0xd8]; mov rdx, rcx; mov [rbp - 0x1140], rcx; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0005c1ee : mov rdi, r15; mov r11, [rip + 0x268c50]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, r12; call [r11 + rax*8]
0x0005b70e : mov eax, [rdi + 0xd8]; mov rdx, rcx; mov [rbp - 0x1140], rcx; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00030cd0 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x0002832b : add [rax], al; add [rax], al; add [rbx + 0x4e8bfb56], cl; cld ; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x0000d92a : mov [rbx + 8], rax; mov [rbx + 0x30], rax; mov [rbx + 0x20], rax; mov [rbx], edx; xor eax, eax; pop rbx; ret
0x000270ce : add [rax + 1], cl; salc ; lea r11, [rip + 0x6fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030bce : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x00038f13 : add [rax], al; mov [rip + 0x28bdbd], esi; mov [rip + 0x28bdbb], edi; mov [rip + 0x28bd78], r8d; pop rbx; ret
0x000274be : add [rax + 1], cl; salc ; lea r11, [rip + 0x6f877]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006120e : mov [rax + 8], ecx; mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x0004ba40 : add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a78c0]; jmp rdx
0x0005a07d : add [rax], al; mov rsi, r14; mov rdi, r15; sar r9, 2; mov rdx, r9; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x0006124d : mov rcx, [rax + 0x10]; mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x0002775e : add [rax + 1], cl; salc ; lea r11, [rip + 0x6f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005a07e : add [rcx + rcx*4 - 0xa], cl; mov rdi, r15; sar r9, 2; mov rdx, r9; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x000264fe : add [rax + 1], cl; salc ; lea r11, [rip + 0x70837]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002721e : add [rax + 1], cl; salc ; lea r11, [rip + 0x6fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000477a1 : add [rax], al; mov [rbp - 0x530], ecx; mov rdx, r14; mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x00030b6e : add [rax], al; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x0008a92b : adc [rax - 0x75], ecx; or [rax + 3], cl; add ecx, [rcx + rcx*4 - 0x16]; mov rsi, r12; mov edi, ebp; call rax
0x00045311 : mov edx, [rsp + 0x30]; mov [r8 + 0x88], edx; mov rdx, [rsp + 0x38]; mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x00044ef0 : mov rsi, -0x18; mov fs:[rsi], rcx; mov rcx, -0x28; mov fs:[rcx], rax; mov rax, -0x20; mov fs:[rax], rdx; ret
0x0002760e : add [rax + 1], cl; salc ; lea r11, [rip + 0x6f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002679e : add [rax + 1], cl; salc ; lea r11, [rip + 0x70597]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026b8e : add [rax + 1], cl; salc ; lea r11, [rip + 0x701a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00074b7d : sbb [rbx + rcx*4 + 0x77], cl; and [rbx + rcx*4 + 0x7f], cl; sub [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx
0x00026cde : add [rax + 1], cl; salc ; lea r11, [rip + 0x70057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027f3d : add [rax], al; add [rax - 0x75], cl; cmc ; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0000d92b : mov [rbx + 8], eax; mov [rbx + 0x30], rax; mov [rbx + 0x20], rax; mov [rbx], edx; xor eax, eax; pop rbx; ret
0x0002736e : add [rax + 1], cl; salc ; lea r11, [rip + 0x6f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000498b3 : add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7dc0]; jmp rdx
0x0007492d : add [rax], al; add [rax - 0x75], cl; or bl, al; nop cs:[rax + rax]; mov rax, [rax + 8]; sub rax, fs:[0]; ret
0x0006120d : mov [rax + 8], rcx; mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x000305be : add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov al, [rcx + 4]; mov [rdx + 4], al; lea rax, [rdx + 4]; ret
0x00026f7e : add [rax + 1], cl; salc ; lea r11, [rip + 0x6fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00045310 : mov rdx, [rsp + 0x30]; mov [r8 + 0x88], edx; mov rdx, [rsp + 0x38]; mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x00061562 : xchg [rsi + 0x66], esp; nop cs:[rax + rax]; mov rax, [rdi + 0xd8]; push rbx; mov rbx, rdi; call [rax + 0x20]
0x000268ee : add [rax + 1], cl; salc ; lea r11, [rip + 0x70447]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004b832 : add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7ac0]; jmp rdx
0x0002664e : add [rax + 1], cl; salc ; lea r11, [rip + 0x706e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000b4f4 : add [rax - 0x75], cl; sbb eax, 0; add [rax], al; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x00030bae : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0000d30d : add [rax - 0x75], cl; sbb eax, 0; add [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x0000c468 : add [rax - 0x75], cl; sbb eax, 0; add [rax], al; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x0004b91c : add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a79c0]; jmp rdx
0x0006124e : mov ecx, [rax + 0x10]; mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x00026a3e : add [rax + 1], cl; salc ; lea r11, [rip + 0x702f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001f333 : movzx eax, [rdi]; lea rdx, [rip + 0x7bde3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000874a3 : movzx eax, [rdi]; lea rdx, [rip + 0x13c73]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00081543 : movzx eax, [rdi]; lea rdx, [rip + 0x19bd3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0002870d : add [rax], al; add [rax - 0x75], cl; int1 ; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0000ae8e : mov [rbx + 0x10], esi; mov [rbx + 0x30], rsi; mov [rbx + 0x28], rsi; mov [rbx + 0x20], rsi; call [rax + 0x70]
0x00084ec3 : movzx eax, [rdi]; lea rdx, [rip + 0x16253]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00018d24 : add [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; sub eax, edx; ret
0x00030cf0 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x00059d41 : sub eax, ebp; mov rsi, r13; mov rdx, rax; mov [rbp - 0x1098], ecx; mov rdi, r15; sar rdx, 2; call [r9 + 0x38]
0x00022553 : movzx eax, [rdi]; lea rdx, [rip + 0x78bc3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0003166b : add [rax], al; add [rax], al; add [rax - 0x73], cl; or r11b, r8b; nop cs:[rax + rax]; lea rax, [rdi + 9]; ret
0x0000ae8d : mov [rbx + 0x10], rsi; mov [rbx + 0x30], rsi; mov [rbx + 0x28], rsi; mov [rbx + 0x20], rsi; call [rax + 0x70]
0x00063f50 : mov [rsp], 0; lea r9, [rsp + 0x70]; mov rcx, r15; mov rdx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x0000d8e8 : push rdi; sbb [rax - 0x77], cl; adc [r8 - 0x77], r9b; sbb [r8 - 0x77], r9b; push rdi; mov [rdi + 8], rax; ret
0x00060be1 : mov [rsp], 0; lea r9, [rbp - 0x38]; mov rcx, r15; lea rdx, [rbp - 0x40]; mov rdi, r13; xor r8d, r8d; call r12
0x0002d703 : movzx eax, [rdi]; lea rdx, [rip + 0x6da13]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00018bdc : add [rax], al; add [rax], al; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x000728ff : add [rax], al; add [rax - 0x7b], cl; sal [rdx + rcx + 0x49], cl; mov eax, [rbp]; add rax, [rdx + 8]; call rax
0x0004a837 : sbb eax, 0; add [rax], al; mov rdx, r10; mov [rbp - 0x4f8], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00083513 : movzx eax, [rdi]; lea rdx, [rip + 0x17c03]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0003054e : add [rax + 0x48018b48], dl; mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x0008a963 : sub eax, 1; lea r14, [rbx + rax*8 + 8]; nop [rax + rax]; mov rdx, r13; mov rsi, r12; mov edi, ebp; call [rbx]
0x00059d40 : sub rax, r13; mov rsi, r13; mov rdx, rax; mov [rbp - 0x1098], ecx; mov rdi, r15; sar rdx, 2; call [r9 + 0x38]
0x0003059b : add cl, [rax - 0x73]; add al, bl; nop cs:[rax + rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x00020ee3 : movzx eax, [rdi]; lea rdx, [rip + 0x7a233]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00049377 : sbb eax, 0; add [rax], al; mov rdx, r10; mov [rbp - 0x578], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x000313a4 : movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x0002adcc : add [rax], al; add [rax], al; mov dx, [rsi - 3]; mov cx, [rsi - 2]; mov [rdi - 3], dx; mov [rdi - 2], cx; ret
0x00028d90 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6e3a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028c53 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6e4e0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030f64 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x6654f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0003e941 : lea r8, [rsp + 0x90]; mov rcx, [r14]; mov [rsp], rax; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; call [r13]
0x00026148 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x70bec]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029b11 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6d623]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000310ce : add [rax], al; mov ecx, [rsi]; mov edx, [rsi + 3]; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x00030bee : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x00029d4d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d1a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003cb5c : add eax, [rax]; mov rdi, [r15 + 0x18]; mov r8, rbx; mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r15 + 8]
0x000298cd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d626]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002914d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6dda6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a04d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6cea6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029f90 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d1a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030944 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x66aef]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0002a291 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6cea3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028f11 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6e223]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003daec : add eax, [rax]; mov rdi, [rbx + 0x18]; mov r8, r12; mov rcx, rbp; mov rdx, [r14]; mov rsi, r13; call [rbx + 8]
0x0002944e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6daa6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a4f8 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6cc3b]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029090 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6e0a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0009017b : add [rax], al; mov rdx, [r12 + rax*8]; lea rbp, [r12 + r9 - 8]; mov [rsp + 0x10], r9; mov rsi, [rbp]; call r14
0x0002a6ac : sub esi, edx; sub rdi, rdx; lea r11, [rip + 0x6c848]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029991 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6d7a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003162b : add [rax], al; add [rax], al; add [rax - 0x73], cl; add r8d, r11d; nop cs:[rax + rax]; lea rax, [rdi + 4]; ret
0x0008fa3d : add [rax], al; add [rax - 0x75], cl; xchg [rax - 0x3d000000], esp; nop [rax + rax]; mov rax, [rdi + 0xb8]; ret
0x0004085c : add eax, [rax]; mov rdi, [r13 + 0x18]; mov r8, r12; mov rcx, rbp; mov rdx, [r14]; mov rsi, rbx; call [r13 + 8]
0x0008fa8d : add [rax], al; add [rax - 0x75], cl; xchg [rax - 0x3d000000], esi; nop [rax + rax]; mov rax, [rdi + 0xa8]; ret
0x000292ce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6dc26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028cd5 : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6e21f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029690 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6daa3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000ba01 : mov eax, esp; sub rax, rdx; mov rdx, rax; mov rax, [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call [rax + 0x70]
0x00029bce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6d326]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063ddf : mov [rsp], 0; lea r9, [rsp + 0x28]; lea rdx, [rsp + 0x20]; lea rsi, [rsp + 0x40]; lea rcx, [rax + 4]; call rbx
0x0000ba00 : mov rax, r12; sub rax, rdx; mov rdx, rax; mov rax, [rbx + 0xd8]; mov rsi, r14; mov rdi, rbx; call [rax + 0x70]
0x0002a290 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6cea3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028af8 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x6e63c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000288e6 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6e44d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000298ce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6d626]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000292cd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6dc26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a34d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6cba6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a6ab : sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x6c848]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027d44 : mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00028e4d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6e0a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003061e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 6]; mov [rdx + 6], eax; lea rax, [rdx + 9]; ret
0x0006407b : add [rax], al; mov [rsp], 0; lea r9, [rsp + 0x28]; mov rcx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x0000e3df : add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rcx + 0x48d231d1], cl; mov eax, [rax + 0x48]; jmp rax
0x000282f5 : mov ecx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00030943 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x66aef]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00029c91 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6d4a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030f80 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x66532]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000284f4 : mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0002a1ce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6cd26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029091 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6e0a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028fcd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6df26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a5cb : mov edi, ebp; mov [rsp + 8], r14; lea rsi, [rax + 0x58]; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x00029b10 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d623]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030f81 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x66532]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00026082 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x70cb1]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029810 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d923]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029210 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6df23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000295ce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6d926]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000284f5 : mov ecx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0002944d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6daa6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028105 : mov ecx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00026236 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x70afd]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029691 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6daa3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a111 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6d023]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029e12 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6d322]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029e11 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d322]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063f55 : add [rax], al; lea r9, [rsp + 0x70]; mov rcx, r15; mov rdx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x00028fce : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6df26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029bcd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d326]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000311e1 : movq mm0, [rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x0003f08c : add eax, [rax]; mov rdi, [r14 + 0x18]; mov r8, rbx; mov rcx, rbp; mov rdx, [r13]; mov rsi, r12; call [r14 + 8]
0x00029d4e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6d1a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029ecd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d026]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026237 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x70afd]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026083 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x70cb1]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028c54 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x6e4e0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00060be6 : add [rax], al; lea r9, [rbp - 0x38]; mov rcx, r15; lea rdx, [rbp - 0x40]; mov rdi, r13; xor r8d, r8d; call r12
0x00027f25 : mov ecx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0002914e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6dda6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030f63 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x6654f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000286f5 : mov ecx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00029391 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6dda3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029f91 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6d1a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030961 : add esi, ecx; bsf rdx, rdx; lea r11, [rip + 0x66ad2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0003c58c : add eax, [rax]; mov rdi, [r14 + 0x18]; mov r8, r15; mov rcx, rbp; mov rdx, [r12]; mov rsi, rbx; call [r14 + 8]
0x0002974d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d7a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a110 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d023]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028af7 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6e63c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029ece : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6d026]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003160b : add [rax], al; add [rax], al; add [rax - 0x73], cl; add r11d, r8d; nop cs:[rax + rax]; lea rax, [rdi + 2]; ret
0x00031261 : movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x00027afb : mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00027d45 : mov ecx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00029a4d : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d4a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029510 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6dc23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000295cd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d926]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000282f4 : mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x000288e7 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x6e44d]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000c131 : add [rax], al; add [rax - 0x77], cl; sbb eax, 0; add [rax], al; mov [rdx + 0x140], 0x494fc0; call [rax + 0x20]
0x0003daeb : add eax, [eax]; mov rdi, [rbx + 0x18]; mov r8, r12; mov rcx, rbp; mov rdx, [r14]; mov rsi, r13; call [rbx + 8]
0x0000a5ca : mov rdi, r13; mov [rsp + 8], r14; lea rsi, [rax + 0x58]; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x00029811 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6d923]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028d91 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6e3a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003161b : add [rax], al; add [rax], al; add [rax - 0x73], cl; add r8b, r11b; nop cs:[rax + rax]; lea rax, [rdi + 3]; ret
0x0002a1cd : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6cd26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029990 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d7a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028e4e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6e0a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029511 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6dc23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029211 : add edi, edx; add rsi, rdx; lea r11, [rip + 0x6df23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a04e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6cea6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026147 : add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x70bec]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000305ee : add [rax], al; mov eax, [rcx]; mov [rdx], eax; mov eax, [rcx + 3]; mov [rdx + 3], eax; lea rax, [rdx + 6]; ret
0x0003c144 : add eax, [rax]; mov rdi, [r15 + 0x18]; mov r8, r12; mov rcx, rbx; mov rdx, [r13]; mov rsi, rbp; call [r15 + 8]
0x00029a4e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6d4a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030960 : add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x66ad2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0002a4f9 : add esi, edx; add rdi, rdx; lea r11, [rip + 0x6cc3b]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028104 : mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0002a34e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6cba6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000286f4 : mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00029c90 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d4a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028f10 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6e223]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002974e : sub edi, edx; sub rsi, rdx; lea r11, [rip + 0x6d7a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029390 : add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6dda3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027f24 : mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00031201 : movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x00028cd4 : sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6e21f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00031281 : movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x000279ff : mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x0003167b : add [rax], al; add [rax], al; add [rax - 0x73], cl; or r11d, r8d; nop cs:[rax + rax]; lea rax, [rdi + 0xa]; ret
0x0003cbbc : mov rcx, rbx; lea rdx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r15
0x0000a554 : add [rax], al; add [rax - 0x77], cl; fistp [rbx + 0x48]; mov eax, [rax + 0x140]; mov rax, [rax + 0x20]; jmp rax
0x0002795d : mov edx, [rsi - 8]; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0003e942 : lea eax, [rsp + 0x90]; mov rcx, [r14]; mov [rsp], rax; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; call [r13]
0x00040046 : mov ecx, ebx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x00059c90 : movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x10e8], 1; mov [rbp - 0x1110], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00040045 : mov rcx, rbx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x000408d0 : mov ecx, esp; lea rdx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x0003db5f : mov ecx, esp; lea rdx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x0003db5e : mov rcx, r12; lea rdx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x000408cf : mov rcx, r12; lea rdx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x00027a00 : mov [rdi - 0x21], ecx; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x00030c11 : movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0004789e : add [rax], al; mov rcx, [rbx + 0xd8]; sub rax, r13; mov rsi, r13; mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x00019988 : xchg rdi, rsi; nop [rax + rax]; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x000284cd : mov edx, [rsi - 8]; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x000280ec : mov edx, [rsi - 4]; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00019989 : xchg edi, esi; nop [rax + rax]; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x00027f0c : mov edx, [rsi - 4]; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x000282cd : mov edx, [rsi - 8]; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00070aca : add [rbp + 0x17], dh; mov rdx, [rip + 0x253c9c]; lea rax, [rdx + 1]; mov [rip + 0x253c91], rax; add rsp, 8; ret
0x00027a47 : mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0005a874 : add [rcx + rcx*4 - 0xa], cl; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x0003f0fd : mov rcx, rbx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r12
0x00073651 : add esi, ebx; movsq [rdi], [rsi]; mov rcx, [rdi + 0x18]; mov rsi, [rdi + 0x20]; mov rdi, [rdi + 0x28]; call r11
0x00030c36 : push rsi; adc [rsi - 0x75], ah; sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x0000e3dc : add [rax], al; add [rax], al; mov rax, [rdi + 0xd8]; mov ecx, edx; xor edx, edx; mov rax, [rax + 0x48]; jmp rax
0x0005bb9c : movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1118], 1; mov [rbp - 0x1120], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x0003c1a4 : mov rcx, r12; lea rdx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call rbx
0x0006dbd3 : add eax, 8; mov [rdi + 0x308], rax; lea rax, [rax + rdx*4]; mov [rdi + 0x2ec], edx; mov [rdi + 0x300], rax; ret
0x0005c9ce : add [rcx + rcx*4 - 0xa], cl; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x00061e7f : add [rax], al; mov [rax + 0x50], 0; mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x0003c5f2 : mov ecx, edi; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call rbx
0x0005c9cd : add [rax], al; mov rsi, r14; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x0002795c : mov rdx, [rsi - 8]; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0005a873 : add [rax], al; mov rsi, r14; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x0003168b : add [rax], al; add [rax], al; add [rax - 0x73], cl; or r8b, r11b; nop cs:[rax + rax]; lea rax, [rdi + 0xb]; ret
0x0000dd9f : xchg eax, edi; rol [rax], 0; add [rbp + 0x48487ed2], al; mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x68]
0x000286cc : mov rdx, [rsi - 8]; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00027d2c : mov edx, [rsi - 4]; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000284cc : mov rdx, [rsi - 8]; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0003d562 : mov ecx, ebx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x0003f0fe : mov ecx, ebx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r12
0x000286cd : mov edx, [rsi - 8]; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0003c1a5 : mov ecx, esp; lea rdx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call rbx
0x0006dbd2 : add rax, 8; mov [rdi + 0x308], rax; lea rax, [rax + rdx*4]; mov [rdi + 0x2ec], edx; mov [rdi + 0x300], rax; ret
0x0003169b : add [rax], al; add [rax], al; add [rax - 0x73], cl; or r8d, r11d; nop cs:[rax + rax]; lea rax, [rdi + 0xc]; ret
0x0007ec37 : add [rax], al; add [rdi], cl; test [rax + 0x48000000], edx; mov edx, [rbx + 0x18]; mov [rdx], rax; pop rbx; ret
0x00030a3b : add [rax], al; add [rax], al; add [rax + 0x6666c337], cl; nop cs:[rax + rax]; mov dx, [rsi]; mov [rdi], dx; ret
0x00064080 : add [rax], al; add [rax], al; lea r9, [rsp + 0x28]; mov rcx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x0003c5f1 : mov rcx, r15; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call rbx
0x00063de4 : add [rax], al; lea r9, [rsp + 0x28]; lea rdx, [rsp + 0x20]; lea rsi, [rsp + 0x40]; lea rcx, [rax + 4]; call rbx
0x00027afc : mov [rdi - 0x21], ecx; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x0000879c : add [rcx + rcx*4 + 0x40], cl; or [rbx + 0x48010442], al; mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x00030b91 : movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x0003d561 : mov rcx, rbx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x0005c038 : movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x10e8], 1; mov [rbp - 0x1110], 1; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x0003cbbd : mov ecx, ebx; lea rdx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r15
0x00061e8e : add [rax], al; add [rcx - 0x75], cl; xchg eax, ebx; add [rax], al; add [rcx + rcx*4 - 1], cl; call [rax + 0x20]
0x000282cc : mov rdx, [rsi - 8]; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00090175 : lea r9, [rax*8]; mov rdx, [r12 + rax*8]; lea rbp, [r12 + r9 - 8]; mov [rsp + 0x10], r9; mov rsi, [rbp]; call r14
0x00044f1a : add [rax], al; nop [rax]; mov rax, -0x60; movsxd rdi, edi; mov rax, fs:[rax]; mov rax, [rax + rdi*8 + 0x80]; ret
0x00031221 : movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x0000a296 : add [rax], al; mov rcx, [rbx + 0x10]; mov rdx, [rbx + 0x18]; sar r8, 2; lea rsi, [rax + 0x58]; call [r15 + 0x30]
0x00026b8b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x701a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063a04 : lea r9, [rsp + 0x38]; lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r12]; lea rcx, [rax + 1]; call rbx
0x00047b80 : add [rax], al; mov rcx, r14; mov rdi, rbx; sub rcx, rsi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x0003115e : add [rax], al; mov rcx, [rsi]; mov rdx, [rsi + 5]; mov [rdi], rcx; mov [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret
0x00027a48 : mov [rdi - 0x21], ecx; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0002775b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003063e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 7]; mov [rdx + 7], eax; lea rax, [rdx + 0xa]; ret
0x00061956 : add [rax], al; mov [rax + 0x48], 0; mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x00047b81 : add [rcx + rcx*4 - 0xf], cl; mov rdi, rbx; sub rcx, rsi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x00027985 : mov ebx, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0002721b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000306be : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 7]; mov [rdx + 7], rax; lea rax, [rdx + 0xe]; ret
0x00026cdb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x70057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00009a70 : mov [rax + 0x10], r9; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, r13; mov [rsp], rax; call [r13 + 0x18]
0x0003065e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov eax, [rcx + 8]; mov [rdx + 8], eax; lea rax, [rdx + 0xb]; ret
0x0002a82d : add [rax], al; add [rax - 0x75], cl; push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x0002a8bd : add [rax], al; add [rax - 0x75], cl; push rsi; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x000274bb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6f877]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002679b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x70597]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00018c93 : sub r9, rcx; lea r10, [rip + 0x7dce3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0003113e : add [rax], al; mov rcx, [rsi]; mov edx, [rsi + 8]; mov [rdi], rcx; mov [rdi + 8], edx; lea rax, [rdi + 0xb]; ret
0x0002736b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026f7b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002664b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x706e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026a3b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x702f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000270cb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003119e : add [rax], al; mov rcx, [rsi]; mov rdx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret
0x0003067e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 5]; mov [rdx + 5], rax; lea rax, [rdx + 0xc]; ret
0x000304ef : add [rax], al; add [rsi + 0x66], ah; nop cs:[rax + rax]; mov rax, [rcx]; mov [rdx], rax; lea rax, [rdx + 7]; ret
0x0003117e : add [rax], al; mov rcx, [rsi]; mov rdx, [rsi + 6]; mov [rdi], rcx; mov [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret
0x0003e4d9 : add [rax], al; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x28]; mov [rsp + 8], esi; mov rsi, [rsp + 0x58]; call rax
0x00027984 : mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0000a477 : mov [rax + 0x10], r9; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x0001f453 : sub r9, rcx; lea r10, [rip + 0x77623]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00037b05 : add [rsi + 0x12], edi; mov rdx, [rbp - 0x20]; movsxd rcx, eax; cmp [rdx + rcx*8 - 8], 1; sbb eax, 0; leave ; ret
0x000312a1 : movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x000268eb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x70447]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002760b : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x6f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006175b : add [rax], al; mov [rax + 0x48], 0; mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x00081683 : sub r9, rcx; lea r10, [rip + 0x30803]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x000264fb : movq [r8], mm0; add rsi, rdx; lea r11, [rip + 0x70837]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003069e : add [rax], al; mov rax, [rcx]; mov [rdx], rax; mov rax, [rcx + 6]; mov [rdx + 6], rax; lea rax, [rdx + 0xd]; ret
0x0003111e : add [rax], al; mov rcx, [rsi]; mov edx, [rsi + 7]; mov [rdi], rcx; mov [rdi + 7], edx; lea rax, [rdi + 0xa]; ret
0x00085083 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x2cebf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00017843 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7f16f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00090176 : lea ecx, [rax*8]; mov rdx, [r12 + rax*8]; lea rbp, [r12 + r9 - 8]; mov [rsp + 0x10], r9; mov rsi, [rbp]; call r14
0x0007f033 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x32ecf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0001d213 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x798df]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0002832c : add [rax], al; add [rax], al; mov edx, [rsi - 5]; mov ecx, [rsi - 4]; mov [rdi - 5], edx; mov [rdi - 4], ecx; ret
0x00027848 : mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00030caf : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x0002664c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x706e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a478 : mov [rax + 0x10], ecx; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x0002679c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x70597]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030ccf : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x00026b8c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x701a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0001f454 : sub ecx, ecx; lea r10, [rip + 0x77623]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0002852c : add [rax], al; add [rax], al; mov edx, [rsi - 6]; mov ecx, [rsi - 4]; mov [rdi - 6], edx; mov [rdi - 4], ecx; ret
0x000270cc : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002aacc : add [rax], al; add [rax], al; mov rdx, [rsi - 9]; mov ecx, [rsi - 4]; mov [rdi - 9], rdx; mov [rdi - 4], ecx; ret
0x0002775c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00019d83 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7cc6f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00009a71 : mov [rax + 0x10], ecx; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, r13; mov [rsp], rax; call [r13 + 0x18]
0x000096c4 : lea rsi, [rax + 0x58]; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x00026f7c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027f9f : mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00027b7c : add [rax], al; add [rax], al; mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00027886 : mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00081684 : sub ecx, ecx; lea r10, [rip + 0x30803]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x000422a7 : lea r8, [rsp + 0x90]; mov rcx, r14; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x00042380 : mov [rsp], 0; lea r8, [rsp + 0x90]; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x000268ec : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x70447]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028370 : mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00018c94 : sub ecx, ecx; lea r10, [rip + 0x7dce3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x000264fc : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x70837]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000274bc : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6f877]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027bcf : mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000607b7 : add [rbp + 0x49eb7edb], al; mov eax, [rsp + 0xd8]; movsxd rdx, ebx; mov rsi, r13; mov rdi, r12; call [rax + 0x38]
0x00028170 : mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0002721c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026a3c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x702f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000098c6 : lea rsi, [rax + 0x58]; mov [rsp + 8], rdx; mov rax, [rax + 0x38]; mov rdx, r10; mov [rsp], rax; call [r13 + 0x18]
0x000609e2 : xor ecx, ecx; lea rsi, [rbx + 0x98]; mov [rsp + 8], 0; mov [rsp], 1; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00064075 : mov [rsp + 8], 1; mov [rsp], 0; lea r9, [rsp + 0x28]; mov rcx, r14; lea rsi, [rsp + 0x30]; mov rdi, r12; call rbx
0x00028570 : mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00063a05 : lea ecx, [rsp + 0x38]; lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r12]; lea rcx, [rax + 1]; call rbx
0x00049379 : add [rax], al; add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x578], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00026cdc : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x70057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030c8f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0004a839 : add [rax], al; add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x4f8], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0002736c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002b6d3 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x6bd1f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000098c7 : lea esi, [rax + 0x58]; mov [rsp + 8], rdx; mov rax, [rax + 0x38]; mov rdx, r10; mov [rsp], rax; call [r13 + 0x18]
0x000096c5 : lea esi, [rax + 0x58]; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x00009c38 : pop rax; mov [rsp + 8], rcx; mov rdx, [rdx + 0x38]; mov rcx, rax; mov [rsp], rdx; mov rdx, r14; call [r13 + 0x18]
0x00023453 : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7375f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00063d4f : xor ecx, ecx; xor edx, edx; mov [rsp + 8], 1; mov [rsp], 1; lea r9, [rsp + 0x28]; lea rsi, [rsp + 0x40]; call rbx
0x00027daf : mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0002872c : add [rax], al; add [rax], al; mov edx, [rsi - 7]; mov ecx, [rsi - 4]; mov [rdi - 7], edx; mov [rdi - 4], ecx; ret
0x0000fbde : add [rax], al; mov rax, [rdi + 0x10]; cmp [rdi + 0x28], rax; cmovae rax, [rdi + 0x28]; sub rax, [rdi + 0x18]; ret
0x0002760c : movq [rax], mm0; add rsi, rdx; lea r11, [rip + 0x6f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030bad : add [rax], al; add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0001d214 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x798df]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00008797 : mov edx, [rbx + 0x88]; mov [rax + 8], r8; add [rdx + 4], 1; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x00027db0 : mov [rdi - 0x23], ecx; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00018bd3 : xchg edi, esi; nop cs:[rax + rax]; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x000266e9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70649]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00008796 : mov rdx, [rbx + 0x88]; mov [rax + 8], r8; add [rdx + 4], 1; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x00026ec9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030b6d : add [rax], al; add bl, dh; movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x00027849 : mov [rdi - 0x28], eax; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00026c29 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000fbdd : add [rax], r8b; mov rax, [rdi + 0x10]; cmp [rdi + 0x28], rax; cmovae rax, [rdi + 0x28]; sub rax, [rdi + 0x18]; ret
0x00083635 : leave ; lea r10, [rip + 0x2e893]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00027bd0 : mov [rdi - 0x22], ecx; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000277f9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026d79 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00019d84 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7cc6f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00085084 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x2cebf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00027559 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000272b9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027887 : mov [rdi - 0x28], eax; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00027fa0 : mov [rdi - 0x24], ecx; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00028171 : mov [rdi - 0x25], ecx; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00028571 : mov [rdi - 0x27], ecx; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00017844 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7f16f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00018bd2 : xchg rdi, rsi; nop cs:[rax + rax]; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x000276a9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027019 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030597 : add cl, [r8 - 0x72b7fdbe]; add al, bl; nop cs:[rax + rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x00042385 : add [rax], al; lea r8, [rsp + 0x90]; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x000422a8 : lea eax, [rsp + 0x90]; mov rcx, r14; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x00026839 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x704f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026599 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70799]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00020fe5 : leave ; lea r10, [rip + 0x75ad3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00027169 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002b6d4 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x6bd1f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00028371 : mov [rdi - 0x26], ecx; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0000984f : add [rax - 0x75], cl; push rbx; mov rax, [rbx + 0xd8]; mov rsi, r12; mov rdi, rbx; sub rdx, r12; call [rax + 0x70]
0x0005a8e3 : add r13, [rbp - 0x10b0]; mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; sar rdx, 2; call [rax + 0x38]
0x00030bcd : add [rax], al; add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x00023454 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7375f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0005a8e4 : add ebp, [rbp - 0x10b0]; mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; sar rdx, 2; call [rax + 0x38]
0x0007f034 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x32ecf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00027409 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ad9 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70259]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026989 : push rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x703a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0006dba6 : mov edx, r8d; shl rdx, 2; mov [rdi + 0x300], rax; lea rax, [rax + rcx*4]; sub rax, rdx; mov [rdi + 0x308], rax; ret
0x00083788 : movzx edx, [rsi + rcx]; lea rcx, [rip + 0x1798d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0006dba7 : mov edx, eax; shl rdx, 2; mov [rdi + 0x300], rax; lea rax, [rax + rcx*4]; sub rax, rdx; mov [rdi + 0x308], rax; ret
0x0000d8b7 : mov edx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x000210ef : movzx edx, [rsi + rcx]; lea rcx, [rip + 0x7a026]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0000d8e6 : mov rdx, [rdi + 0x18]; mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x00030cef : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0000d8b6 : mov rdx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x00006feb : mov eax, [rsp + 8]; mov rdx, [rsp]; mov rsi, r14; mov rdi, r12; lea r9, [r15 + rax]; mov [rsp + 0x10], r9; call r13
0x00061e84 : push rax; add [rax], al; add [rax], al; mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x0005a25f : add [rax], al; add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x10f0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0003dc44 : mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; mov [rsp + 8], rax; lea rax, [rsp + 0xa0]; mov [rsp], rax; call [rbx]
0x0003dc45 : mov esi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; mov [rsp + 8], rax; lea rax, [rsp + 0xa0]; mov [rsp], rax; call [rbx]
0x0008151d : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x19bf8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0000b459 : mov rax, [rbx + 0x18]; mov [rbx + 0x90], rsi; mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x0000ad5a : mov [rbx + 0x20], rax; mov [rbx + 0x18], rax; mov [rbx + 8], rax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x00081828 : movzx edx, [rsi + rcx]; lea rcx, [rip + 0x198ed]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0000d8e7 : mov edx, [rdi + 0x18]; mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x000834ed : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x17c28]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00006fea : mov rax, [rsp + 8]; mov rdx, [rsp]; mov rsi, r14; mov rdi, r12; lea r9, [r15 + rax]; mov [rsp + 0x10], r9; call r13
0x0000de40 : push [rdi + rcx + 0x48]; mov eax, [rbx + 8]; lea rdx, [rax + 1]; mov [rbx + 8], rdx; movzx eax, [rax]; pop rbx; ret
0x00022538 : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x78bdd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00020ec8 : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x7a24d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00030598 : add cl, [rax - 0x72b7fdbe]; add al, bl; nop cs:[rax + rax]; mov eax, [rcx]; mov [rdx], eax; lea rax, [rdx + 3]; ret
0x0005ab58 : div [rdi - 0x19]; mov rax, [rip + 0x26a226]; mov [rbp - 0x1190], r9; mov rsi, r14; mov rdi, r15; call [rax + r11*8]
0x0002d6e8 : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x6da2d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00084e9d : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x16278]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0000ee3e : add [rax - 0x75], cl; push rax; or [rbp + 0xb], dh; sub edx, [rax + 0x18]; mov eax, [rdi + 0x10]; sub eax, edx; ret
0x00090302 : add [rax], al; lea r8, [rip + 0x2280d]; movzx edi, dil; mov rbp, rsi; movsxd rax, [r8 + rdi*4]; add r8, rax; jmp r8
0x0001f5bf : movzx edx, [rsi + rcx]; lea rcx, [rip + 0x7bb56]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0000ad5b : mov [rbx + 0x20], eax; mov [rbx + 0x18], rax; mov [rbx + 8], rax; mov [rbx + 0x10], rax; mov rax, rbx; pop rbx; ret
0x0008747d : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x13c98]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0000b45a : mov eax, [rbx + 0x18]; mov [rbx + 0x90], rsi; mov [rbx + 8], rax; mov [rbx + 0x10], rax; xor eax, eax; pop rbx; ret
0x0005d7c2 : add [rax], al; add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x10e0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0001f318 : movzx eax, [rdi + rdx]; lea rdx, [rip + 0x7bdfd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00031260 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x000749a5 : mov r10, [rsp + 0x28]; mov r11, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x50; jmp [rax]
0x000673aa : mov [rax + 8], edx; mov [rax + 0x10], 0; mov [rax + 0x18], 0; mov [rax + 0x20], 0; mov [rax + 0x28], 0; pop rbx; ret
0x0000bf7b : add [rax], al; mov rax, [rbx + 0xa0]; mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x000312e8 : mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x0005a079 : mov eax, [rdi + 0xd8]; mov rsi, r14; mov rdi, r15; sar r9, 2; mov rdx, r9; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x000310cb : add [rax], al; add [rax], al; add [rbx + 0x3568b0e], cl; mov [rdi], ecx; mov [rdi + 3], edx; lea rax, [rdi + 6]; ret
0x0004779c : mov rax, [rbx + 0xd8]; mov [rbp - 0x530], ecx; mov rdx, r14; mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x00031200 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x0002850b : add [rax], 0; add [rax], al; mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00030c34 : mov rdx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x000478a2 : mov ebx, eax; add [rax], al; add [rcx + rbp - 0x18], cl; mov rsi, r13; mov rdx, rax; mov rdi, rbx; call [rcx + 0x38]
0x00074b7a : mov r13, [rdi + 0x18]; mov r14, [rdi + 0x20]; mov r15, [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx
0x00024a0d : mov [rax + 0x48], 1; salc ; add rdi, rdx; lea r11, [rip + 0x721e4]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x000749a6 : mov edx, [rsp + 0x28]; mov r11, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x50; jmp [rax]
0x000311e0 : movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x00074b7b : mov ebp, [rdi + 0x18]; mov r14, [rdi + 0x20]; mov r15, [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; jmp rdx
0x00030b4a : adc bl, al; nop [rax]; movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; ret
0x00074a17 : mov r10, [rsp + 0x28]; mov r11, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x48; jmp [rax]
0x00030c35 : mov edx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x000673a9 : mov [rax + 8], rdx; mov [rax + 0x10], 0; mov [rax + 0x18], 0; mov [rax + 0x20], 0; mov [rax + 0x28], 0; pop rbx; ret
0x00031280 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x00030bed : add [rax], al; add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x0005a078 : mov rax, [r15 + 0xd8]; mov rsi, r14; mov rdi, r15; sar r9, 2; mov rdx, r9; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x0004779d : mov eax, [rbx + 0xd8]; mov [rbp - 0x530], ecx; mov rdx, r14; mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x0006e0f1 : add dh, dh; adc [rbx + rax], 0; add [rsi*2 + 0x158f8015], al; add eax, [rax]; add [rax + rcx*2], al; add esp, 8; ret
0x0002830b : add [rax], 0; add [rax], al; mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00074a18 : mov edx, [rsp + 0x28]; mov r11, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x48; jmp [rax]
0x0002870b : add [rax], 0; add [rax], al; mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00024f15 : mov [rax + 0x48], 1; salc ; add rdi, rdx; lea r11, [rip + 0x71cdc]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x00031244 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x00027d5c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000312c4 : mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x00056a2e : add [rax - 0x73], cl; push rax; add [rcx - 0x77], ecx; push rdi; or [rdi + rcx - 0x4a], al; xor [rax - 0x7d], cl; ret
0x00061b18 : dec [rcx - 0x75]; test [rax + rbx*8], ah; add [rax], al; add [rcx + rcx*4 - 0xa], al; mov rdi, r12; call [rax + 0x18]
0x0002a8bc : add [rax], al; add [rax], al; mov rdx, [rsi - 0xd]; mov rcx, [rsi - 8]; mov [rdi - 0xd], rdx; mov [rdi - 8], rcx; ret
0x0002a94c : add [rax], al; add [rax], al; mov rdx, [rsi - 0xc]; mov ecx, [rsi - 4]; mov [rdi - 0xc], rdx; mov [rdi - 4], ecx; ret
0x00030c10 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x00018bd4 : mul [rsi + 0x66]; nop cs:[rax + rax]; bsf rdx, rdx; movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; sub eax, ecx; ret
0x0002830c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0002a79c : add [rax], al; add [rax], al; mov rdx, [rsi - 0xf]; mov rcx, [rsi - 8]; mov [rdi - 0xf], rdx; mov [rdi - 8], rcx; ret
0x0002aa4c : add [rax], al; add [rax], al; mov rdx, [rsi - 0xa]; mov ecx, [rsi - 4]; mov [rdi - 0xa], rdx; mov [rdi - 4], ecx; ret
0x000312c5 : mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x00059c4d : add [rax], al; add [rdi + 0xf], dh; movzx eax, [rax + 0x4a8cc0]; mov rdx, [rax*8 + 0x4a8bc0]; mov r14d, 0x10; jmp rdx
0x00067eb1 : mov [r8 + 0x19], rcx; movzx ecx, [rsp - 0x17]; mov [r8 + 0x21], cx; movzx ecx, [rsp - 0x15]; mov [r8 + 0x23], cl; ret
0x0002850c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00027f3c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0002ed9c : add [rax], eax; add [rax + 0x48018b48], dl; mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; mov rax, rdi; ret
0x0002a82c : add [rax], al; add [rax], al; mov rdx, [rsi - 0xe]; mov rcx, [rsi - 8]; mov [rdi - 0xe], rdx; mov [rdi - 8], rcx; ret
0x00030b90 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; ret
0x00087b76 : add [rax], al; test r9d, r9d; setne al; mov [rsp + 0x40], eax; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x00061e7a : mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x0002a9cc : add [rax], al; add [rax], al; mov rdx, [rsi - 0xb]; mov ecx, [rsi - 4]; mov [rdi - 0xb], rdx; mov [rdi - 4], ecx; ret
0x00087b77 : add [rbp - 0x7b], al; leave ; setne al; mov [rsp + 0x40], eax; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x0004de6d : mov esi, edi; mov rax, [rax + 0x38]; mov [rbp - 0xc8], r9d; mov rdx, r8; mov [rbp - 0xb0], r8; mov rdi, rbx; call rax
0x0002811c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0004de6c : mov rsi, r15; mov rax, [rax + 0x38]; mov [rbp - 0xc8], r9d; mov rdx, r8; mov [rbp - 0xb0], r8; mov rdi, rbx; call rax
0x0002870c : add [rax], al; add [rax], al; mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x000312e9 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x0002736a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002760a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000274ba : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f877]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000268ea : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70447]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004fe5d : add [rax - 0x73], cl; push rax; add [rax - 0x77], ecx; push rbx; sub dh, al; add [rip - 0x71817], ch; jmp [rsi - 0x70]
0x0004cd0d : add [rax - 0x73], cl; push rax; add [rax - 0x77], ecx; push rbx; sub dh, al; add [rip - 0x1ae17], ch; jmp [rsi - 0x70]
0x000286cb : int1 ; mov rdx, [rsi - 8]; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0004fac5 : add [rax - 0x73], cl; push rax; add [rax - 0x77], ecx; push rbx; sub dh, al; add [rip - 0xa8d17], ch; jmp [rsi + 0x2e]
0x00067eb2 : mov [rax + 0x19], ecx; movzx ecx, [rsp - 0x17]; mov [r8 + 0x21], cx; movzx ecx, [rsp - 0x15]; mov [r8 + 0x23], cl; ret
0x0006124c : push rax; mov rcx, [rax + 0x10]; mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x0002721a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000264fa : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70837]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00059a23 : add [rax - 0x77], cl; fimul [rcx + rcx*4 - 1]; sub r13, rbx; mov r14, r13; sar r14, 2; mov rdx, r14; call [rax + 0x38]
0x00061951 : mov [rax + 0x50], 0; mov [rax + 0x48], 0; mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x20]; jmp rax
0x0006120b : push rax; mov [rax + 8], rcx; mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x0008ddd9 : add [rax], cl; mov [rip + 0x23673b], 8; mov [rip + 0x236735], 8; mov [rip + 0x23672f], 8; mov [rip + 0x236729], 8; ret
0x00031308 : mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x00026cda : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000270ca : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002679a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70597]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000621eb : add [rax], al; add [rax], al; add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rsi - 1], bh; call [rax + 0x30]
0x00030c55 : mov edx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x00030c75 : mov edx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x0002775a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000312a0 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x00026f7a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026b8a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x701a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000013f3 : add [rax], al; mov rdx, [rip + 0x2c212c]; mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; mov rax, [rsp + 0x18]; call rax
0x00030c74 : mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x00061756 : mov [rax + 0x50], 0; mov [rax + 0x48], 0; mov rax, [rbx + 0xd8]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x28]; jmp rax
0x00026a3a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x702f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002799b : add [rax], 0; add [rax], al; mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00026e30 : add edi, edx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6ff02]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005bff2 : sbb dl, [rax]; add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1114], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0002664a : movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x706e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030c54 : mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x00031328 : mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x00026e2f : add rdi, rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6ff02]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00031220 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x000248a8 : dec [rdi]; test [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, [rax + rcx]; movzx edx, [rdx + rcx]; sub eax, edx; ret
0x000498b1 : inc [rcx]; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7dc0]; jmp rdx
0x0005c9c8 : mov rax, [r15 + 0xd8]; mov rsi, r14; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x0004ba3e : inc [rcx]; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a78c0]; jmp rdx
0x00020fe3 : sub r9, rcx; lea r10, [rip + 0x75ad3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0005a86f : mov eax, [rdi + 0xd8]; mov rsi, r14; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x0002600c : add [rax], al; mov rcx, [rip + 0x29bdfb]; lea r11, [rip + 0x70ea4]; movsxd r9, [r11 + r9*4]; lea r9, [r11 + r9]; jmp r9
0x0005a86e : mov rax, [r15 + 0xd8]; mov rsi, r14; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x0000a34f : lea rsi, [rax + 0x58]; lea rax, [rsp + 0x20]; mov [rsp + 8], rax; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r15 + 8]
0x00070b9c : add [rax], al; add [rax], al; mov rax, [rip + 0x250169]; mov [rdi], rax; mov rax, [rip + 0x253bb7]; mov [rsi], rax; ret
0x00028818 : add rsi, rdx; add rdi, rdx; sfence ; lea r11, [rip + 0x6e518]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a350 : lea esi, [rax + 0x58]; lea rax, [rsp + 0x20]; mov [rsp + 8], rax; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r15 + 8]
0x0004b91a : inc [rcx]; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a79c0]; jmp rdx
0x0004b96e : inc [rax]; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a79c0]; jmp rdx
0x00083633 : sub r9, rcx; lea r10, [rip + 0x2e893]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00062345 : add [rax - 0x75], cl; adc [rbp + 0x15], dh; sub rdx, [rax + 0x10]; mov eax, [rdi + 0x10]; shr rdx, 2; sub eax, edx; ret
0x0005c9c9 : mov eax, [rdi + 0xd8]; mov rsi, r14; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x00028819 : add esi, edx; add rdi, rdx; sfence ; lea r11, [rip + 0x6e518]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002799c : add [rax], al; add [rax], al; mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0004b830 : inc [rcx]; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7ac0]; jmp rdx
0x0000a292 : mov eax, [rbx + 0xa0]; mov rcx, [rbx + 0x10]; mov rdx, [rbx + 0x18]; sar r8, 2; lea rsi, [rax + 0x58]; call [r15 + 0x30]
0x00047271 : mov r13, [rbp - 0x4e8]; mov rax, [rbx + 0xd8]; mov rsi, r12; mov rdi, rbx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x00047b7b : mov rax, [rbx + 0xd8]; mov rcx, r14; mov rdi, rbx; sub rcx, rsi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x00047272 : mov ebp, [rbp - 0x4e8]; mov rax, [rbx + 0xd8]; mov rsi, r12; mov rdi, rbx; sub r13, r12; mov rdx, r13; call [rax + 0x38]
0x00049373 : add [rax], al; mov rax, [rbx + 0xd8]; mov rdx, r10; mov [rbp - 0x578], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x00063b47 : xor eax, eax; lea r9, [rsp + 0x38]; mov rcx, r14; lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r13]; call r12
0x00020fe4 : sub ecx, ecx; lea r10, [rip + 0x75ad3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x000477a0 : add [rax], al; add [rcx - 0x52f73], cl; dec [rcx + rcx*4 - 0xe]; mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x000700fd : mov r14, [rip + 0x25417c]; mov r15, [rax]; mov rbx, rax; mov [rip + 0x25416f], r13; mov rdi, rbp; mov [rax], 0; call r12
0x00059835 : add [rax], al; add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rbx - 0x1e], cl; mov rdx, r12; call [rax + 0x38]
0x00083634 : sub ecx, ecx; lea r10, [rip + 0x2e893]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x000700fe : mov esi, [rip + 0x25417c]; mov r15, [rax]; mov rbx, rax; mov [rip + 0x25416f], r13; mov rdi, rbp; mov [rax], 0; call r12
0x00027fe6 : int3 ; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0003e4d3 : lea rdx, [rsp + 0x80]; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x28]; mov [rsp + 8], esi; mov rsi, [rsp + 0x58]; call rax
0x0003be6a : mov [rdx + 0x4c], ecx; movsx ecx, [rax + 0xa]; movsx eax, [rax + 0xb]; mov [rdx + 0x50], ecx; mov [rdx + 0x54], eax; ret
0x00061560 : add bl, ch; xchg [rsi + 0x66], esp; nop cs:[rax + rax]; mov rax, [rdi + 0xd8]; push rbx; mov rbx, rdi; call [rax + 0x20]
0x00063b46 : xor r8d, r8d; lea r9, [rsp + 0x38]; mov rcx, r14; lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r13]; call r12
0x0004a72e : add [rax], al; mov rdx, r10; mov [rbp - 0x538], r10; mov rsi, r9; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x0000de2d : add [rax], al; add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rbx + 0x48], dl; mov ebx, edi; call [rax + 0x20]
0x00047b7c : mov eax, [rbx + 0xd8]; mov rcx, r14; mov rdi, rbx; sub rcx, rsi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x0003e4d4 : lea edx, [rsp + 0x80]; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x28]; mov [rsp + 8], esi; mov rsi, [rsp + 0x58]; call rax
0x000470cd : add [rax], al; add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rbx - 0x16], cl; mov rdx, r13; call [rax + 0x38]
0x0004779e : sbb eax, 0; add [rax], al; mov [rbp - 0x530], ecx; mov rdx, r14; mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x00049282 : add [rax], al; mov rdx, r10; mov [rbp - 0x590], r10; mov rsi, r9; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x0000a291 : mov rax, [rbx + 0xa0]; mov rcx, [rbx + 0x10]; mov rdx, [rbx + 0x18]; sar r8, 2; lea rsi, [rax + 0x58]; call [r15 + 0x30]
0x000285b7 : leave ; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x0000b4ec : add [rax], al; mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x0007361d : mov ecx, [rsp + 0x18]; mov rsi, [rsp + 0x20]; mov rdi, [rsp + 0x28]; mov rsp, rbx; mov rbx, [rsp]; add rsp, 0x30; jmp r11
0x0004b066 : add [rax], al; mov rsi, [rbp - 0x528]; mov rax, [rbx + 0xd8]; mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x00008799 : mov [rax], al; add [rax], al; mov [rax + 8], r8; add [rdx + 4], 1; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x00049283 : add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x590], r10; mov rsi, r9; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x00061e86 : add [rax], al; add [rax - 0x39], cl; add [rax], al; add [rax], al; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x0004a72f : add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x538], r10; mov rsi, r9; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x000422ac : add [rax], al; add [rcx + rcx*4 - 0xf], cl; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x000485e0 : add [rax], al; mov rsi, [rbp - 0x5a8]; mov rax, [rbx + 0xd8]; mov rdi, rbx; sub r14, rsi; mov rdx, r14; call [rax + 0x38]
0x0007361c : mov rcx, [rsp + 0x18]; mov rsi, [rsp + 0x20]; mov rdi, [rsp + 0x28]; mov rsp, rbx; mov rbx, [rsp]; add rsp, 0x30; jmp r11
0x00083785 : mov dh, 4; pi2fd mm6, [rsi - 0x72b7f1ec]; lea edi, [rcx + 1]; add [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret
0x0002a4f7 : add [rax + 1], cl; salc ; add rdi, rdx; lea r11, [rip + 0x6cc3b]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000608f7 : lea edx, [rsp + 0x20]; lea rsi, [rbx + 0x50]; mov [rsp + 8], 0; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00030cae : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x0008fd0c : mov r12, [rbp - 0x20]; mov r13, [rbp - 0x18]; mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; mov rbp, [rbp]; mov rsp, rcx; ret
0x00060ad3 : lea edx, [rsp + 0x20]; lea rsi, [rbx + 0x98]; mov [rsp + 8], 0; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x000311ff : add bl, dh; movq mm0, [rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x000608f6 : lea rdx, [rsp + 0x20]; lea rsi, [rbx + 0x50]; mov [rsp + 8], 0; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x00060ad2 : lea rdx, [rsp + 0x20]; lea rsi, [rbx + 0x98]; mov [rsp + 8], 0; mov [rsp], 0; lea r9, [rsp + 0x10]; mov rdi, r12; call rbp
0x0000a54d : add bl, [rbx - 0x3d]; mov rax, [rbx + 0xa0]; mov rdi, rbx; pop rbx; mov rax, [rax + 0x140]; mov rax, [rax + 0x20]; jmp rax
0x00030cce : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x0003125f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x0005b70b : add [rax], al; mov rax, [r15 + 0xd8]; mov rdx, rcx; mov [rbp - 0x1140], rcx; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0008fd0d : mov esp, [rbp - 0x20]; mov r13, [rbp - 0x18]; mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; mov rbp, [rbp]; mov rsp, rcx; ret
0x0005d7bc : add [rax], al; mov rax, [r15 + 0xd8]; mov rdx, r10; mov [rbp - 0x10e0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00030c8e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x00028c52 : add [rax + 1], cl; salc ; add rdi, rdx; lea r11, [rip + 0x6e4e0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000bdeb : dec [rax - 0x75]; test ebx, eax; add [rax], al; add [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbp; call [rax + 0x78]
0x0005a259 : add [rax], al; mov rax, [r15 + 0xd8]; mov rdx, r10; mov [rbp - 0x10f0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00047624 : add [rax], al; mov [rbp - 0x588], r8d; mov rdx, rcx; mov [rbp - 0x578], rcx; mov rsi, r14; mov rdi, rbx; call [rax + 0x38]
0x0003127f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x00029e10 : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6d322]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029b0f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6d623]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002980f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6d923]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004530e : add [rax], al; mov rdx, [rsp + 0x30]; mov [r8 + 0x88], edx; mov rdx, [rsp + 0x38]; mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x00030bcc : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; ret
0x00030b6c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x00028af6 : sbb [rax + 1], ecx; salc ; add rdi, rdx; lea r11, [rip + 0x6e63c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029c8f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6d4a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002920f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6df23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030c0f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x0005a07c : add [rax], al; add [rcx + rcx*4 - 0xa], cl; mov rdi, r15; sar r9, 2; mov rdx, r9; mov [rbp - 0x10e0], r9; call [rax + 0x38]
0x0002998f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6d7a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0008fc6d : mov rbx, [rbp - 0x28]; mov r12, [rbp - 0x20]; mov r13, [rbp - 0x18]; mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; leave ; ret
0x0002968f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6daa3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028d8f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6e3a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028f0f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6e223]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0008fc6e : mov ebx, [rbp - 0x28]; mov r12, [rbp - 0x20]; mov r13, [rbp - 0x18]; mov r14, [rbp - 0x10]; mov r15, [rbp - 8]; leave ; ret
0x0001ce82 : pop rsi; and [rbx + rcx*4 + 0x66], cl; sub [rbx + rcx*4 + 0x6e], cl; xor [rbx + rcx*4 + 0x76], cl; cmp [rax + 0xf], cl; ret
0x0002950f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6dc23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029f8f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6d1a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00059d3f : add [rcx + rbp - 0x18], cl; mov rsi, r13; mov rdx, rax; mov [rbp - 0x1098], ecx; mov rdi, r15; sar rdx, 2; call [r9 + 0x38]
0x00030bac : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x0002938f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6dda3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a28f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6cea3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a10f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6d023]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002908f : add [rax + 1], cl; xlatb ; add rsi, rdx; lea r11, [rip + 0x6e0a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000d8b4 : pop r8; mov rdx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x00090171 : add rax, 1; lea r9, [rax*8]; mov rdx, [r12 + rax*8]; lea rbp, [r12 + r9 - 8]; mov [rsp + 0x10], r9; mov rsi, [rbp]; call r14
0x00031361 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x00030941 : add edi, ecx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x66aef]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000312e7 : adc [rsi - 0x75], ah; sbb bl, r14b; movq [rdi], mm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x0004040b : mov r9, [rsp + 0x40]; xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call r14
0x000013ec : mov fs:[0x300], rax; mov rdx, [rip + 0x2c212c]; mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; mov rax, [rsp + 0x18]; call rax
0x0000bf76 : mov [rbx + 0xd8], rax; mov rax, [rbx + 0xa0]; mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x0000a5c8 : mov edx, esp; mov rdi, r13; mov [rsp + 8], r14; lea rsi, [rax + 0x58]; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x0000bf77 : mov [rbx + 0xd8], eax; mov rax, [rbx + 0xa0]; mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x0003121f : add bl, dh; movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x0003faad : mov r9, [rsp + 0x40]; xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r15
0x0003c8db : mov r9, [rsp + 0x40]; xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x00047f1d : lea ebp, [rcx + rax*8]; mov rax, [rbx + 0xd8]; mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x00030940 : add rdi, rcx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x66aef]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0000d8e5 : pop rax; mov rdx, [rdi + 0x18]; mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x00027e7c : int 0x4c; mov [rdi - 0x23], ecx; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0003de35 : mov r9, [rsp + 0x48]; xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x00090172 : add eax, 1; lea r9, [rax*8]; mov rdx, [r12 + rax*8]; lea rbp, [r12 + r9 - 8]; mov [rsp + 0x10], r9; mov rsi, [rbp]; call r14
0x0000a5c7 : mov rdx, r12; mov rdi, r13; mov [rsp + 8], r14; lea rsi, [rax + 0x58]; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x00087b70 : mov [rsp + 0x80], r8; test r9d, r9d; setne al; mov [rsp + 0x40], eax; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x0003129f : add bl, dh; movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x00030f61 : add edi, ecx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x6654f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00031341 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x0003c29c : mov r9, [rsp + 0x48]; xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r14
0x00030cee : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x00030f60 : add rdi, rcx; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x6654f]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00047f1c : lea r13, [rcx + rax*8]; mov rax, [rbx + 0xd8]; mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x00031381 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x0000d8b5 : pop rax; mov rdx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0008fa8b : add [rax], al; add [rax], al; add [rax - 0x75], cl; xchg [rax - 0x3d000000], esi; nop [rax + rax]; mov rax, [rdi + 0xa8]; ret
0x0002a10e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d023]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00090179 : add [rax], al; add [rax], al; mov rdx, [r12 + rax*8]; lea rbp, [r12 + r9 - 8]; mov [rsp + 0x10], r9; mov rsi, [rbp]; call r14
0x00028fcb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6df26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002b372 : movq [rdi + 0x16], mm0; lddqu xmm0, xmm[rsi + 6]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 6], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002a34b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6cba6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a6aa : add [rax + 0x29], cl; salc ; sub rdi, rdx; lea r11, [rip + 0x6c848]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002938e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6dda3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00090123 : lea rbp, [r12 + rax*8]; movsxd rcx, ecx; mov rdx, [rbp]; mov rdi, [rsp + 8]; lea r15, [r12 + rcx*8]; mov rsi, [r15]; call r14
0x00028e4b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6e0a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000295cb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d926]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002914b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6dda6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028cd2 : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6e21f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029e0f : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d322]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000248fd : add [rax + 0x48], esi; add esi, edx; add rdi, rdx; lea r11, [rip + 0x722f3]; movsxd rcx, [r11 + rdx*4]; add rcx, r11; jmp rcx
0x0002a04b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6cea6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029bcb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d326]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029d4b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d1a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030bec : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x0002968e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6daa3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003c8dc : mov ecx, [rsp + 0x40]; xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x0003faae : mov ecx, [rsp + 0x40]; xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r15
0x00028f0e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6e223]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000e3dd : add [rax], al; add [rax - 0x75], cl; xchg eax, ebx; add [rax], al; add [rcx + 0x48d231d1], cl; mov eax, [rax + 0x48]; jmp rax
0x0004040c : mov ecx, [rsp + 0x40]; xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call r14
0x0002980e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d923]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030b5f : adc bl, al; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x00029f8e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d1a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002b5a2 : movq [rdi + 0x11], mm0; lddqu xmm0, xmm[rsi + 1]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 1], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002950e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6dc23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002974b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d7a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a6a9 : add [rax], al; sub rsi, rdx; sub rdi, rdx; lea r11, [rip + 0x6c848]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000292cb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6dc26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a1cb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6cd26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002920e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6df23]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029a4b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d4a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000298cb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d626]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a4f6 : add [rax], al; add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6cc3b]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002b532 : movq [rdi + 0x12], mm0; lddqu xmm0, xmm[rsi + 2]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 2], xmm0; movdqu xmm[rdi], xmm1; ret
0x0003054c : add [rax], eax; add [rax + 0x48018b48], dl; mov [rdx], eax; mov rax, [rcx + 8]; mov [rdx + 8], rax; lea rax, [rdx + 0xf]; ret
0x0003de36 : mov ecx, [rsp + 0x48]; xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x00090124 : lea ebp, [rsp + rax*8]; movsxd rcx, ecx; mov rdx, [rbp]; mov rdi, [rsp + 8]; lea r15, [r12 + rcx*8]; mov rsi, [r15]; call r14
0x00028d8e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6e3a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00087b71 : mov [rsp + 0x80], eax; test r9d, r9d; setne al; mov [rsp + 0x40], eax; lea rsi, [rsp + 0xa0]; lea rdi, [rsp + 0x70]; call rbp
0x0008fa3b : add [rax], al; add [rax], al; add [rax - 0x75], cl; xchg [rax - 0x3d000000], esp; nop [rax + rax]; mov rax, [rdi + 0xb8]; ret
0x00029b0e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d623]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029ecb : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6d026]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002b4c2 : movq [rdi + 0x13], mm0; lddqu xmm0, xmm[rsi + 3]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 3], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002998e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d7a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002908e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6e0a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003095e : add [rax], al; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x66ad2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00030f7e : add [rax], al; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x66532]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x0002a28e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6cea3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029c8e : add [rax], al; add rdi, rdx; add rsi, rdx; lea r11, [rip + 0x6d4a3]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002b222 : movq [rdi + 0x19], mm0; lddqu xmm0, xmm[rsi + 9]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 9], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b292 : movq [rdi + 0x18], mm0; lddqu xmm0, xmm[rsi + 8]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 8], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002944b : add [rax], al; sub rdi, rdx; sub rsi, rdx; lea r11, [rip + 0x6daa6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003c29d : mov ecx, [rsp + 0x48]; xor ecx, ecx; xor edx, edx; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r14
0x0002b3e2 : movq [rdi + 0x15], mm0; lddqu xmm0, xmm[rsi + 5]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 5], xmm0; movdqu xmm[rdi], xmm1; ret
0x00063ddd : add [rax], al; mov [rsp], 0; lea r9, [rsp + 0x28]; lea rdx, [rsp + 0x20]; lea rsi, [rsp + 0x40]; lea rcx, [rax + 4]; call rbx
0x00028c51 : add [rax], al; add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6e4e0]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002b302 : movq [rdi + 0x17], mm0; lddqu xmm0, xmm[rsi + 7]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 7], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b452 : movq [rdi + 0x14], mm0; lddqu xmm0, xmm[rsi + 4]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 4], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002944c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6daa6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029bcc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6d326]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0003095d : add [rax], r8b; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x66ad2]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x000313a1 : movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x0005bb9a : add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1118], 1; mov [rbp - 0x1120], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00029ecc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6d026]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030f7d : add [rax], r8b; add rsi, rcx; bsf rdx, rdx; lea r11, [rip + 0x66532]; movsxd rcx, [r11 + rdx*4]; lea rcx, [r11 + rcx]; jmp rcx
0x00029d4c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6d1a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000639fd : mov [rsp], 0; lea r9, [rsp + 0x38]; lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r12]; lea rcx, [rax + 1]; call rbx
0x00059c8e : add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x10e8], 1; mov [rbp - 0x1110], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00028e4c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6e0a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00061e7d : add [rax], al; add [rax], al; mov [rax + 0x50], 0; mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x000298cc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6d626]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002914c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6dda6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028fcc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6df26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005a872 : add [rax], al; add [rcx + rcx*4 - 0xa], cl; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1140], rcx; call [rax + 0x38]
0x00028cd3 : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6e21f]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005c036 : add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x10e8], 1; mov [rbp - 0x1110], 1; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x0000879a : add [rax], al; add [rcx + rcx*4 + 0x40], cl; or [rbx + 0x48010442], al; mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x0002a1cc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6cd26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002a04c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6cea6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002974c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6d7a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00029a4c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6d4a6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005c9cc : add [rax], al; add [rcx + rcx*4 - 0xa], cl; mov rdi, r15; sar rcx, 2; mov rdx, rcx; mov [rbp - 0x1150], rcx; call [rax + 0x38]
0x000292cc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6dc26]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000295cc : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6d926]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00063de2 : add [rax], al; add [rax], al; lea r9, [rsp + 0x28]; lea rdx, [rsp + 0x20]; lea rsi, [rsp + 0x40]; lea rcx, [rax + 4]; call rbx
0x0002a34c : add [rax + 0x29], cl; xlatb ; sub rsi, rdx; lea r11, [rip + 0x6cba6]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00084ec0 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x16253]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000272b7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000266e8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70649]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00081540 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x19bd3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0001f330 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x7bde3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000276a7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026988 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x703a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026598 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70799]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027557 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027018 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000d307 : add [rdi], ecx; test [rdx + 0x48000000], dl; mov eax, [rbx + 0xd8]; xor edx, edx; xor esi, esi; mov rdi, rbx; call [rax + 0x58]
0x00026ec7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00009c35 : lea rsi, [rdx + 0x58]; mov [rsp + 8], rcx; mov rdx, [rdx + 0x38]; mov rcx, rax; mov [rsp], rdx; mov rdx, r14; call [r13 + 0x18]
0x00026c27 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000277f8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026d77 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000277f7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027b49 : mov ecx, [rsi - 9]; mov dl, [rsi - 1]; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x0007364b : mov rdi, rsp; shr rcx, 3; rep movsq [rdi], [rsi]; mov rcx, [rdi + 0x18]; mov rsi, [rdi + 0x20]; mov rdi, [rdi + 0x28]; call r11
0x000422a0 : mov [rsp], 0; lea r8, [rsp + 0x90]; mov rcx, r14; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x00026ad7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70259]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0005aed7 : xchg [rbp + 0x21], esi; add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1108], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x00027408 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000732a2 : mov rdi, [rsp + 0x20]; mov rsi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x48; jmp r11
0x00047b7f : add [rax], al; add [rcx + rcx*4 - 0xf], cl; mov rdi, rbx; sub rcx, rsi; mov rdx, rcx; mov [rbp - 0x4f8], rcx; call [rax + 0x38]
0x00027168 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00045dc4 : movzx edi, [rax + 0xe]; mov [rdx + 0xe], dil; mov [rax + 0xe], sil; mov rdx, r12; mov rsi, [rsp + 0x10]; mov rdi, rbx; call rbp
0x00009c36 : lea esi, [rdx + 0x58]; mov [rsp + 8], rcx; mov rdx, [rdx + 0x38]; mov rcx, rax; mov [rsp], rdx; mov rdx, r14; call [r13 + 0x18]
0x0002d700 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x6da13]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000272b8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00083510 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x17c03]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00026987 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x703a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000874a0 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x13c73]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00027407 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000276a8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027558 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026837 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x704f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ad8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70259]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000732a3 : mov edi, [rsp + 0x20]; mov rsi, [rsp + 0x18]; mov rdx, [rsp + 0x10]; mov rcx, [rsp + 8]; mov rax, [rsp]; add rsp, 0x48; jmp r11
0x00026597 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70799]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027b48 : mov rcx, [rsi - 9]; mov dl, [rsi - 1]; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00027167 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000266e7 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70649]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026838 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x704f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0007364c : mov edi, esp; shr rcx, 3; rep movsq [rdi], [rsi]; mov rcx, [rdi + 0x18]; mov rsi, [rdi + 0x20]; mov rdi, [rdi + 0x28]; call r11
0x00026d78 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ec8 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00022550 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x78bc3]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00026c28 : lea edx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a474 : mov [rax], r9; mov [rax + 0x10], r9; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x0005bb55 : xchg [rdx + 0x14], edi; add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1120], 1; mov rdx, [rax*8 + 0x4a88c0]; jmp rdx
0x00027017 : lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00009a6d : mov [rax], r9; mov [rax + 0x10], r9; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, r13; mov [rsp], rax; call [r13 + 0x18]
0x00020ee0 : movzx ecx, [rsi]; movzx eax, [rdi]; lea rdx, [rip + 0x7a233]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0005bdbc : xchg [rax + 0x12], eax; add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1134], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0006dbd0 : mov edx, [rax]; add rax, 8; mov [rdi + 0x308], rax; lea rax, [rax + rdx*4]; mov [rdi + 0x2ec], edx; mov [rdi + 0x300], rax; ret
0x00063a02 : add [rax], al; lea r9, [rsp + 0x38]; lea rdx, [rsp + 0x30]; lea rsi, [rsp + 0x40]; mov rdi, [r12]; lea rcx, [rax + 1]; call rbx
0x0005bd7a : xchg [rbx + 0x12], esi; add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x1130], 1; mov rdx, [rax*8 + 0x4a8bc0]; jmp rdx
0x0002b6d0 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x6bd1f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0004237e : add [rax], al; mov [rsp], 0; lea r8, [rsp + 0x90]; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x00030b5e : adc r11b, r8b; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; ret
0x00085081 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x2cebf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x000311de : adc bl, al; movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x00009a6e : mov [rax], ecx; mov [rax + 0x10], r9; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, r13; mov [rsp], rax; call [r13 + 0x18]
0x0007f031 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x32ecf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00030c8d : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0001d211 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x798df]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0004927d : mov rax, [rbx + 0xd8]; mov rdx, r10; mov [rbp - 0x590], r10; mov rsi, r9; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x00030cad : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x00023450 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7375f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0001d210 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x798df]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0004a729 : mov rax, [rbx + 0xd8]; mov rdx, r10; mov [rbp - 0x538], r10; mov rsi, r9; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x000422a5 : add [rax], al; lea r8, [rsp + 0x90]; mov rcx, r14; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r12
0x0004a72a : mov eax, [rbx + 0xd8]; mov rdx, r10; mov [rbp - 0x538], r10; mov rsi, r9; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x00085080 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x2cebf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00017841 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7f16f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0000bf78 : sbb eax, 0; add [rax], al; mov rax, [rbx + 0xa0]; mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x20]
0x0000a475 : mov [rax], ecx; mov [rax + 0x10], r9; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x0007f030 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x32ecf]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0002b6d1 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x6bd1f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00023451 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7375f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x0004927e : mov eax, [rbx + 0xd8]; mov rdx, r10; mov [rbp - 0x590], r10; mov rsi, r9; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x00017840 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7f16f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00019d80 : xchg rdi, rsi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7cc6f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00019d81 : xchg edi, esi; lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7cc6f]; movsxd r9, [r10 + r9*4]; lea r10, [r10 + r9]; jmp r10
0x00030ccd : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x0008ddd4 : mov [rip + 0x236741], 8; mov [rip + 0x23673b], 8; mov [rip + 0x236735], 8; mov [rip + 0x23672f], 8; mov [rip + 0x236729], 8; ret
0x00060787 : xor [rcx - 0x75], cl; test [rax + rbx*8], ah; add [rax], al; add [rdx + 0x10], bh; mov rsi, r13; mov rdi, r12; call [rax + 0x38]
0x00063dd7 : mov [rsp + 8], 1; mov [rsp], 0; lea r9, [rsp + 0x28]; lea rdx, [rsp + 0x20]; lea rsi, [rsp + 0x40]; lea rcx, [rax + 4]; call rbx
0x0002af82 : movq [rdi + 0x1f], mm0; lddqu xmm0, xmm[rsi + 0xf]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xf], xmm0; movdqu xmm[rdi], xmm1; ret
0x00027b61 : mov ebx, [rsi - 0x11]; mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0002aff2 : movq [rdi + 0x1e], mm0; lddqu xmm0, xmm[rsi + 0xe]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xe], xmm0; movdqu xmm[rdi], xmm1; ret
0x00027b20 : mov dl, [rsi - 1]; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00042383 : add [rax], al; add [rax], al; lea r8, [rsp + 0x90]; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x00027b60 : mov r11, [rsi - 0x11]; mov rcx, [rsi - 9]; mov edx, [rsi - 4]; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00008794 : add [rax], al; mov rdx, [rbx + 0x88]; mov [rax + 8], r8; add [rdx + 4], 1; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x0002b0d2 : movq [rdi + 0x1c], mm0; lddqu xmm0, xmm[rsi + 0xc]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xc], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b062 : movq [rdi + 0x1d], mm0; lddqu xmm0, xmm[rsi + 0xd]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xd], xmm0; movdqu xmm[rdi], xmm1; ret
0x0000a290 : pop rax; mov rax, [rbx + 0xa0]; mov rcx, [rbx + 0x10]; mov rdx, [rbx + 0x18]; sar r8, 2; lea rsi, [rax + 0x58]; call [r15 + 0x30]
0x0000b4e7 : mov rax, [rbx + 0xa0]; mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x0002b1b2 : movq [rdi + 0x1a], mm0; lddqu xmm0, xmm[rsi + 0xa]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xa], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b142 : movq [rdi + 0x1b], mm0; lddqu xmm0, xmm[rsi + 0xb]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xb], xmm0; movdqu xmm[rdi], xmm1; ret
0x00032a57 : adc [rdi], cl; test [rcx + rax - 0x67d0000], al; adc [rdi], ecx; test [rbx], bl; add al, [rax]; add [rbx - 0x7bf0ed07], al; ret 2
0x0000b4e8 : mov eax, [rbx + 0xa0]; mov [rax + 0x140], rdx; mov rax, [rbx + 0xd8]; mov rdx, r12; mov rsi, rbp; mov rdi, rbx; call [rax + 0x40]
0x0005e260 : add [rax - 0x22], bh; mov rax, [r15 + 0xd8]; mov rdx, rcx; mov [rbp - 0x1140], rcx; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0003e93c : mov [rsp + 8], r12; lea r8, [rsp + 0x90]; mov rcx, [r14]; mov [rsp], rax; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; call [r13]
0x00031360 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x00030ced : add [rax], al; add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0005c1ea : movsxd rax, [r15 + 8]; mov rdi, r15; mov r11, [rip + 0x268c50]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, r12; call [r11 + rax*8]
0x0005d7c0 : xchg eax, ebx; add [rax], al; add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x10e0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0003e93d : mov [rsp + 8], esp; lea r8, [rsp + 0x90]; mov rcx, [r14]; mov [rsp], rax; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; call [r13]
0x0004761f : mov rax, [rbx + 0xd8]; mov [rbp - 0x588], r8d; mov rdx, rcx; mov [rbp - 0x578], rcx; mov rsi, r14; mov rdi, rbx; call [rax + 0x38]
0x00045309 : mov [r8 + 0x80], rdx; mov rdx, [rsp + 0x30]; mov [r8 + 0x88], edx; mov rdx, [rsp + 0x38]; mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x00031340 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x00047620 : mov eax, [rbx + 0xd8]; mov [rbp - 0x588], r8d; mov rdx, rcx; mov [rbp - 0x578], rcx; mov rsi, r14; mov rdi, rbx; call [rax + 0x38]
0x0004de6b : add [rcx + rcx*4 - 2], cl; mov rax, [rax + 0x38]; mov [rbp - 0xc8], r9d; mov rdx, r8; mov [rbp - 0xb0], r8; mov rdi, rbx; call rax
0x00049be7 : movsxd rax, [r15 + 8]; mov rdi, r15; mov r11, [rip + 0x27b253]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, rbx; call [r11 + rax*8]
0x00031380 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x0005a25d : xchg eax, ebx; add [rax], al; add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x10f0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x0004530a : mov [rax + 0x80], edx; mov rdx, [rsp + 0x30]; mov [r8 + 0x88], edx; mov rdx, [rsp + 0x38]; mov [r8 + 0x90], rdx; add rsp, 0xd0; ret
0x00042378 : mov [rsp + 8], 0; mov [rsp], 0; lea r8, [rsp + 0x90]; lea rdx, [rsp + 0x80]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x10]; call r15
0x0002b4c1 : movdqu xmm[rdi + 0x13], xmm0; lddqu xmm0, xmm[rsi + 3]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 3], xmm0; movdqu xmm[rdi], xmm1; ret
0x0003127e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret
0x0002b451 : movdqu xmm[rdi + 0x14], xmm0; lddqu xmm0, xmm[rsi + 4]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 4], xmm0; movdqu xmm[rdi], xmm1; ret
0x0006124a : mov [rax + 0x50], ecx; mov rcx, [rax + 0x10]; mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x0004779a : add [rax], al; mov rax, [rbx + 0xd8]; mov [rbp - 0x530], ecx; mov rdx, r14; mov rsi, [rbp - 0x528]; mov rdi, rbx; call [rax + 0x38]
0x0002b5a1 : movdqu xmm[rdi + 0x11], xmm0; lddqu xmm0, xmm[rsi + 1]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 1], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b221 : movdqu xmm[rdi + 0x19], xmm0; lddqu xmm0, xmm[rsi + 9]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 9], xmm0; movdqu xmm[rdi], xmm1; ret
0x0006120a : mov edx, [rax + 0x40]; mov [rax + 8], rcx; mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x0002b531 : movdqu xmm[rdi + 0x12], xmm0; lddqu xmm0, xmm[rsi + 2]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 2], xmm0; movdqu xmm[rdi], xmm1; ret
0x0003125e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret
0x0002b301 : movdqu xmm[rdi + 0x17], xmm0; lddqu xmm0, xmm[rsi + 7]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 7], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b3e1 : movdqu xmm[rdi + 0x15], xmm0; lddqu xmm0, xmm[rsi + 5]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 5], xmm0; movdqu xmm[rdi], xmm1; ret
0x00061249 : mov [rax + 0x50], rcx; mov rcx, [rax + 0x10]; mov [rax + 8], rdx; mov [rax], rdx; mov [rax + 0x10], rsi; mov [rax + 0x40], rcx; ret
0x0002b291 : movdqu xmm[rdi + 0x18], xmm0; lddqu xmm0, xmm[rsi + 8]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 8], xmm0; movdqu xmm[rdi], xmm1; ret
0x000311dd : adc r11b, r8b; movdqu xmm0, xmm[rsi]; mov cx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret
0x0003dc41 : mov rcx, [r14]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; mov [rsp + 8], rax; lea rax, [rsp + 0xa0]; mov [rsp], rax; call [rbx]
0x00061209 : mov rdx, [rax + 0x40]; mov [rax + 8], rcx; mov rcx, [rax + 0x10]; mov [rax], rdx; mov [rax + 0x10], rdx; mov [rax + 0x40], rcx; ret
0x0003dc42 : mov ecx, [rsi]; mov rsi, [rsp + 0x18]; mov rdi, [rsp + 0x68]; mov [rsp + 8], rax; lea rax, [rsp + 0xa0]; mov [rsp], rax; call [rbx]
0x0002b371 : movdqu xmm[rdi + 0x16], xmm0; lddqu xmm0, xmm[rsi + 6]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 6], xmm0; movdqu xmm[rdi], xmm1; ret
0x000311fe : add [rax], al; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0xf]; movdqu xmm[rdi], xmm0; mov [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret
0x0002af28 : movq [rdi + 0x20], mm0; lddqu xmm0, xmm[rsi + 0x10]; movdqu xmm[rdi + 0x10], xmm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x00027218 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028af4 : add [rbx + 0x19], dh; add rsi, rdx; add rdi, rdx; lea r11, [rip + 0x6e63c]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027367 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000270c7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027607 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026797 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70597]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000098c2 : mov r9, [rax + 8]; lea rsi, [rax + 0x58]; mov [rsp + 8], rdx; mov rax, [rax + 0x38]; mov rdx, r10; mov [rsp], rax; call [r13 + 0x18]
0x00027758 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000268e7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70447]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000313a0 : movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x00026a37 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x702f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027608 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f727]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00061e77 : add [rax], al; mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x000270c8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6fc67]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026b87 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x701a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000ae89 : mov [rbx + 0x18], rsi; mov [rbx + 0x10], rsi; mov [rbx + 0x30], rsi; mov [rbx + 0x28], rsi; mov [rbx + 0x20], rsi; call [rax + 0x70]
0x00026cd8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026f78 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000c45f : push [rdx + rsi*4 + 0x48]; mov [rbx + 0x90], edx; mov rax, [rbx + 0xd8]; mov rdx, rbp; mov rsi, r12; mov rdi, rbx; call [rax + 0x78]
0x000274b8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f877]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000268e8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70447]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00030c0e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; ret
0x00026cd7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70057]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000264f7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70837]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026648 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x706e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000264f8 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70837]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027368 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f9c7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000274b7 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f877]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000ae8a : mov [rbx + 0x18], esi; mov [rbx + 0x10], rsi; mov [rbx + 0x30], rsi; mov [rbx + 0x28], rsi; mov [rbx + 0x20], rsi; call [rax + 0x70]
0x00026647 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x706e7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027af7 : mov [rdi - 0x29], r8; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00026b88 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x701a7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026a38 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x702f7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026f77 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6fdb7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027217 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6fb17]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027757 : add rdi, rdx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x6f5d7]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026798 : add edi, edx; movdqu xmm[r8], xmm0; add rsi, rdx; lea r11, [rip + 0x70597]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000280c0 : mov edx, [rsi - 4]; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0003c19f : mov r9, [rsp + 0x48]; mov rcx, r12; lea rdx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call rbx
0x000286c9 : mov ecx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x000282c9 : mov ecx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x000284f1 : mov ebx, [rsi - 0x16]; mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00027d28 : mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00027d00 : mov edx, [rsi - 4]; mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00027f09 : mov ecx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00027f21 : mov ebx, [rsi - 0x13]; mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0008167f : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x30803]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0001f44f : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x77623]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00018c8f : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7dce3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x000284f0 : mov r11, [rsi - 0x16]; mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00027930 : mov rdx, [rsi - 8]; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x000280e9 : mov ecx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0003d55c : mov r9, [rsp + 0x40]; mov rcx, rbx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x0003f0f8 : mov r9, [rsp + 0x40]; mov rcx, rbx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r12
0x00030c31 : movq mm0, [rsi]; mov rdx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x000282a1 : mov edx, [rsi - 8]; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0000a34d : mov edx, ebp; lea rsi, [rax + 0x58]; lea rax, [rsp + 0x20]; mov [rsp + 8], rax; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r15 + 8]
0x00027d29 : mov ecx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000286a0 : mov rdx, [rsi - 8]; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x000286f1 : mov ebx, [rsi - 0x17]; mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x000098c3 : mov ecx, [rax + 8]; lea rsi, [rax + 0x58]; mov [rsp + 8], rdx; mov rax, [rax + 0x38]; mov rdx, r10; mov [rsp], rax; call [r13 + 0x18]
0x00027f20 : mov r11, [rsi - 0x13]; mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00028100 : mov r11, [rsi - 0x14]; mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x000282f0 : mov r11, [rsi - 0x15]; mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00027d40 : mov r11, [rsi - 0x12]; mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x000408ca : mov r9, [rsp + 0x48]; mov rcx, r12; lea rdx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x0003db59 : mov r9, [rsp + 0x48]; mov rcx, r12; lea rdx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x000013f1 : add [rbx], al; add [rax], al; mov rdx, [rip + 0x2c212c]; mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; mov rax, [rsp + 0x18]; call rax
0x000280e8 : mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x00027f08 : mov rcx, [rsi - 0xb]; mov edx, [rsi - 4]; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0003cbb7 : mov r9, [rsp + 0x48]; mov rcx, rbx; lea rdx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r15
0x0000a34c : mov rdx, rbp; lea rsi, [rax + 0x58]; lea rax, [rsp + 0x20]; mov [rsp + 8], rax; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r15 + 8]
0x000284c8 : mov rcx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x000286a1 : mov edx, [rsi - 8]; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00027ee0 : mov edx, [rsi - 4]; mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x000282a0 : mov rdx, [rsi - 8]; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x000286c8 : mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00049370 : mov [rdi + 0x48000012], al; mov eax, [rbx + 0xd8]; mov rdx, r10; mov [rbp - 0x578], r10; mov rsi, r9; mov rdi, rbx; call [rax + 0x38]
0x0003c5ec : mov r9, [rsp + 0x40]; mov rcx, r15; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call rbx
0x00027a81 : mov [rdi - 0x29], r8; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0000dd97 : add [rbx + 0x7402a807], cl; or cl, [rbx + 0xc097]; add [rbp + 0x48487ed2], al; mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x68]
0x0003129e : add [rax], al; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret
0x00027d41 : mov ebx, [rsi - 0x12]; mov rcx, [rsi - 0xa]; mov edx, [rsi - 4]; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0003121e : add [rax], al; movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret
0x00027931 : mov edx, [rsi - 8]; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00027af8 : mov [rdi - 0x29], eax; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 1], dl; ret
0x00028101 : mov ebx, [rsi - 0x14]; mov rcx, [rsi - 0xc]; mov edx, [rsi - 4]; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x000284a0 : mov rdx, [rsi - 8]; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x000286f0 : mov r11, [rsi - 0x17]; mov rcx, [rsi - 0xf]; mov rdx, [rsi - 8]; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x000284c9 : mov ecx, [rsi - 0xe]; mov rdx, [rsi - 8]; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00091199 : adc [rsp + rsi*2 + 0x4d], dh; mov ebp, esi; lea r14, [r13 - 1]; mov rdx, [rsp]; mov rdi, rbx; mov rsi, [r15 + r14*8 + 0x10]; call rbp
0x000284a1 : mov edx, [rsi - 8]; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00040040 : mov r9, [rsp + 0x40]; mov rcx, rbx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x000282c8 : mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x000279fb : mov [rdi - 0x29], rcx; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x000279fc : mov [rdi - 0x29], ecx; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], r8; mov [rdi - 4], edx; ret
0x000282f1 : mov ebx, [rsi - 0x15]; mov rcx, [rsi - 0xd]; mov rdx, [rsi - 8]; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00027959 : mov ebx, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0003e4d0 : mov rcx, r12; lea rdx, [rsp + 0x80]; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x28]; mov [rsp + 8], esi; mov rsi, [rsp + 0x58]; call rax
0x00027a82 : mov [rdi - 0x29], eax; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00081680 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x30803]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0003e4d1 : mov ecx, esp; lea rdx, [rsp + 0x80]; mov rdi, [rsp + 0x50]; mov rax, [rsp + 0x28]; mov [rsp + 8], esi; mov rsi, [rsp + 0x58]; call rax
0x00040041 : mov ecx, [rsp + 0x40]; mov rcx, rbx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x00018c90 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x7dce3]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0001f450 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x77623]; movsxd r9, [r10 + r9*4]; pcmpeqb xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x0003c1a0 : mov ecx, [rsp + 0x48]; mov rcx, r12; lea rdx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call rbx
0x000312c1 : movq mm0, [rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x00031241 : movq mm0, [rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x0003cbb8 : mov ecx, [rsp + 0x48]; mov rcx, rbx; lea rdx, [rsp + 0x50]; mov rsi, [rsp + 0x40]; mov rdi, [rsp + 0x38]; mov [rsp + 8], eax; call r15
0x0003f0f9 : mov ecx, [rsp + 0x40]; mov rcx, rbx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r12
0x0003d55d : mov ecx, [rsp + 0x40]; mov rcx, rbx; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call r14
0x000408cb : mov ecx, [rsp + 0x48]; mov rcx, r12; lea rdx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbx
0x0003db5a : mov ecx, [rsp + 0x48]; mov rcx, r12; lea rdx, [rsp + 0xa0]; mov rsi, [rsp + 0x58]; mov rdi, [rsp + 0x50]; mov [rsp + 8], eax; call rbp
0x0003c5ed : mov ecx, [rsp + 0x40]; mov rcx, r15; lea rdx, [rsp + 0x70]; mov rsi, [rsp + 0x50]; mov rdi, [rsp + 0x48]; mov [rsp + 8], eax; call rbx
0x00027958 : mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0002af81 : movdqu xmm[rdi + 0x1f], xmm0; lddqu xmm0, xmm[rsi + 0xf]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xf], xmm0; movdqu xmm[rdi], xmm1; ret
0x00027a43 : movq [rdi - 0x31], mm1; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00027ab9 : movq [rdi - 0x31], mm0; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x0005d7b9 : mov [rax + 0x49000006], ch; mov eax, [rdi + 0xd8]; mov rdx, r10; mov [rbp - 0x10e0], r10; mov rsi, r14; mov rdi, r15; call [rax + 0x38]
0x00027f9b : mov [rdi - 0x2c], r8; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0002856c : mov [rdi - 0x2f], r8; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x000096c0 : mov r9, [rax + 0x10]; lea rsi, [rax + 0x58]; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x0002b061 : movdqu xmm[rdi + 0x1d], xmm0; lddqu xmm0, xmm[rsi + 0xd]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xd], xmm0; movdqu xmm[rdi], xmm1; ret
0x00027980 : mov r10, [rsi - 0x18]; mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00027bcb : mov [rdi - 0x2a], r8; mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0002aff1 : movdqu xmm[rdi + 0x1e], xmm0; lddqu xmm0, xmm[rsi + 0xe]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xe], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002836c : mov [rdi - 0x2e], r8; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0002b141 : movdqu xmm[rdi + 0x1b], xmm0; lddqu xmm0, xmm[rsi + 0xb]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xb], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b1b1 : movdqu xmm[rdi + 0x1a], xmm0; lddqu xmm0, xmm[rsi + 0xa]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xa], xmm0; movdqu xmm[rdi], xmm1; ret
0x00027dab : mov [rdi - 0x2b], r8; mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x00030c51 : movq mm0, [rsi]; mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x00027981 : mov edx, [rsi - 0x18]; mov r11, [rsi - 0x10]; mov rdx, [rsi - 8]; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0002b0d1 : movdqu xmm[rdi + 0x1c], xmm0; lddqu xmm0, xmm[rsi + 0xc]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xc], xmm0; movdqu xmm[rdi], xmm1; ret
0x00030c71 : movq mm0, [rsi]; mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x0002816c : mov [rdi - 0x2d], r8; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0003133f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x00027882 : mov [rdi - 0x30], rcx; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x00027bcc : mov [rdi - 0x2a], eax; mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00027dac : mov [rdi - 0x2b], eax; mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0003135f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x0003137f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x000096c1 : mov ecx, [rax + 0x10]; lea rsi, [rax + 0x58]; mov [rsp + 8], rdi; mov rax, [rax + 0x38]; mov rdi, rbp; mov [rsp], rax; call [rbp + 0x18]
0x00030c85 : sbb bl, al; nop [rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0002816d : mov [rdi - 0x2d], eax; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00027f9c : mov [rdi - 0x2c], eax; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0004a72d : add [rax], al; add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x538], r10; mov rsi, r9; mov [rbp - 0x530], r9; mov rdi, rbx; call [rax + 0x38]
0x00027883 : mov [rdi - 0x30], ecx; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rdx; ret
0x0002836d : mov [rdi - 0x2e], eax; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0002856d : mov [rdi - 0x2f], eax; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00049281 : add [rax], al; add [rcx + rcx*4 - 0x2e], cl; mov [rbp - 0x590], r10; mov rsi, r9; mov [rbp - 0x578], r9; mov rdi, rbx; call [rax + 0x38]
0x0002b290 : sbb bl, dh; movq [rdi + 0x18], mm0; lddqu xmm0, xmm[rsi + 8]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 8], xmm0; movdqu xmm[rdi], xmm1; ret
0x000278ba : movq [rdi - 0x38], mm0; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00030cac : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; ret
0x00030c8c : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0002b530 : adc dh, bl; movq [rdi + 0x12], mm0; lddqu xmm0, xmm[rsi + 2]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 2], xmm0; movdqu xmm[rdi], xmm1; ret
0x0000878f : mov rax, [rbx + 0x88]; mov rdx, [rbx + 0x88]; mov [rax + 8], r8; add [rdx + 4], 1; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x00008790 : mov eax, [rbx + 0x88]; mov rdx, [rbx + 0x88]; mov [rax + 8], r8; add [rdx + 4], 1; mov rax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x60]
0x00027c99 : movq [rdi - 0x32], mm0; mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x00030ccc : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; ret
0x0002842a : movq [rdi - 0x36], mm0; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x0002af27 : movdqu xmm[rdi + 0x20], xmm0; lddqu xmm0, xmm[rsi + 0x10]; movdqu xmm[rdi + 0x10], xmm0; lddqu xmm0, xmm[rsi]; movdqu xmm[rdi], xmm0; ret
0x000285b4 : movq [rdi - 0x37], mm1; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00027e79 : movq [rdi - 0x33], mm0; mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x000281b4 : movq [rdi - 0x35], mm1; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x00027844 : movq [rdi - 0x38], mm1; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00028059 : movq [rdi - 0x34], mm0; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0002822e : movq [rdi - 0x35], mm0; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0002862a : movq [rdi - 0x37], mm0; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x000283b4 : movq [rdi - 0x36], mm1; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00027fe3 : movq [rdi - 0x34], mm1; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x000749a0 : mov r9, [rsp + 0x20]; mov r10, [rsp + 0x28]; mov r11, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x50; jmp [rax]
0x0000d8e2 : mov [rdi + 0x58], rdx; mov rdx, [rdi + 0x18]; mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x00074b78 : adc [ebx + ecx*4 + 0x6f], cl; sbb [rbx + rcx*4 + 0x77], cl; and [rbx + rcx*4 + 0x7f], cl; sub [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx
0x0000d8b3 : mov [rdi + 0x58], eax; mov rdx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0003139f : add bl, dh; movq mm0, [rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x00074b79 : adc [rbx + rcx*4 + 0x6f], cl; sbb [rbx + rcx*4 + 0x77], cl; and [rbx + rcx*4 + 0x7f], cl; sub [rcx - 0x3b76b310], cl; mov rbp, r9; jmp rdx
0x0000d8b2 : mov [rdi + 0x58], rax; mov rdx, [rdi + 0x18]; mov rax, [rdi + 0x48]; mov [rdi + 0x48], rdx; mov [rdi + 0x18], rax; mov [rdi + 8], rax; ret
0x0000d8e3 : mov [rdi + 0x58], edx; mov rdx, [rdi + 0x18]; mov [rdi + 0x10], rax; mov [rdi + 0x18], rcx; mov [rdi + 0x48], rdx; mov [rdi + 8], rax; ret
0x00074a12 : mov r9, [rsp + 0x20]; mov r10, [rsp + 0x28]; mov r11, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x48; jmp [rax]
0x00081519 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x19bf8]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00030c30 : movdqu xmm0, xmm[rsi]; mov rdx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; ret
0x000210eb : movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; lea rcx, [rip + 0x7a026]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x00081824 : movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; lea rcx, [rip + 0x198ed]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x000749a1 : mov ecx, [rsp + 0x20]; mov r10, [rsp + 0x28]; mov r11, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x50; jmp [rax]
0x0002b28f : sbb bl, r14b; movq [rdi + 0x18], mm0; lddqu xmm0, xmm[rsi + 8]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 8], xmm0; movdqu xmm[rdi], xmm1; ret
0x0000dd9b : add dh, [rdx + rcx - 0x75]; xchg eax, edi; rol [rax], 0; add [rbp + 0x48487ed2], al; mov eax, [rbx + 0xd8]; mov rdi, rbx; call [rax + 0x68]
0x0002b220 : sbb ebx, esi; movq [rdi + 0x19], mm0; lddqu xmm0, xmm[rsi + 9]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 9], xmm0; movdqu xmm[rdi], xmm1; ret
0x00083784 : movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; lea rcx, [rip + 0x1798d]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0001f314 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x7bdfd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00030c84 : sbb r11b, r8b; nop [rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x00087479 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x13c98]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00074a13 : mov ecx, [rsp + 0x20]; mov r10, [rsp + 0x28]; mov r11, [rsp + 0x30]; mov rdx, [rsp + 0x38]; mov rcx, [rsp + 0x40]; add rsp, 0x48; jmp [rax]
0x0002d6e4 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x6da2d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000312e5 : mov edx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x00020ec4 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x7a24d]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00067ead : mov [r8 + 0x38], edx; mov [r8 + 0x19], rcx; movzx ecx, [rsp - 0x17]; mov [r8 + 0x21], cx; movzx ecx, [rsp - 0x15]; mov [r8 + 0x23], cl; ret
0x000834e9 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x17c28]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x00030cec : add [rax], al; add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0001f5bb : movzx eax, [rdi + rcx]; movzx edx, [rsi + rcx]; lea rcx, [rip + 0x7bb56]; mov eax, [rcx + rax*4]; mov edx, [rcx + rdx*4]; sub eax, edx; ret
0x0002b4c0 : adc esi, ebx; movq [rdi + 0x13], mm0; lddqu xmm0, xmm[rsi + 3]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 3], xmm0; movdqu xmm[rdi], xmm1; ret
0x00022534 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x78bdd]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x000312e4 : mov rdx, [rsi + 0x10]; mov cx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret
0x0002b5a0 : adc ebx, esi; movq [rdi + 0x11], mm0; lddqu xmm0, xmm[rsi + 1]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 1], xmm0; movdqu xmm[rdi], xmm1; ret
0x00084e99 : movzx ecx, [rsi + rdx]; movzx eax, [rdi + rdx]; lea rdx, [rip + 0x16278]; mov ecx, [rdx + rcx*4]; mov eax, [rdx + rax*4]; sub eax, ecx; ret
0x0002b52f : adc r14b, bl; movq [rdi + 0x12], mm0; lddqu xmm0, xmm[rsi + 2]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 2], xmm0; movdqu xmm[rdi], xmm1; ret
0x0005c1e9 : xor [rcx + 0x63], cl; or [r9 + r9*4 - 1], r9b; mov r11, [rip + 0x268c50]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, r12; call [r11 + rax*8]
0x0002b59f : adc ebx, r14d; movq [rdi + 0x11], mm0; lddqu xmm0, xmm[rsi + 1]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 1], xmm0; movdqu xmm[rdi], xmm1; ret
0x0000a5c6 : adc [rcx + rcx*4 - 0x1e], cl; mov rdi, r13; mov [rsp + 8], r14; lea rsi, [rax + 0x58]; mov rax, [rbx + 0x40]; mov [rsp], rax; call [r13 + 8]
0x00031240 : movdqu xmm0, xmm[rsi]; mov ecx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], ecx; mov [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret
0x00061e72 : mov rax, [r15 + 0xa0]; mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x00020fdf : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x75ad3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00067eae : mov [rax + 0x38], edx; mov [r8 + 0x19], rcx; movzx ecx, [rsp - 0x17]; mov [r8 + 0x21], cx; movzx ecx, [rsp - 0x15]; mov [r8 + 0x23], cl; ret
0x0008362f : lea r9, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x2e893]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00061e73 : mov eax, [rdi + 0xa0]; mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x00049be6 : xor [rcx + 0x63], cl; or [r9 + r9*4 - 1], r9b; mov r11, [rip + 0x27b253]; shl rdx, 2; lea rcx, [r14 + rdx]; add rdx, rbx; call [r11 + rax*8]
0x0002b4bf : adc r14d, ebx; movq [rdi + 0x13], mm0; lddqu xmm0, xmm[rsi + 3]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 3], xmm0; movdqu xmm[rdi], xmm1; ret
0x0002b21f : sbb ebx, r14d; movq [rdi + 0x19], mm0; lddqu xmm0, xmm[rsi + 9]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 9], xmm0; movdqu xmm[rdi], xmm1; ret
0x000312c0 : movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; mov [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret
0x00030b9c : adc [r8 + 0x66c31477], r9b; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x00031324 : mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x00030c70 : movdqu xmm0, xmm[rsi]; mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; ret
0x00030c50 : movdqu xmm0, xmm[rsi]; mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; ret
0x00030bde : movnti [r14 + 0x66], r12; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x0005c034 : add [rax], dl; add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x10e8], 1; mov [rbp - 0x1110], 1; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x00027a42 : movdqu xmm[rdi - 0x31], xmm1; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00030b9d : adc [rax + 0x66c31477], cl; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0xe]; movdqu xmm[rdi], xmm0; mov [rdi + 0xe], rcx; ret
0x00031304 : mov rdx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x00083630 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x2e893]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00026e2c : sub [rdi - 0x10], ebp; add rdi, rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6ff02]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00031325 : mov edx, [rsi + 0x10]; mov ecx, [rsi + 0x18]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret
0x0002b1b0 : sbb dh, bl; movq [rdi + 0x1a], mm0; lddqu xmm0, xmm[rsi + 0xa]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xa], xmm0; movdqu xmm[rdi], xmm1; ret
0x00020fe0 : lea ecx, [rax + 0xf]; sub r9, rcx; lea r10, [rip + 0x75ad3]; movsxd r9, [r10 + r9*4]; vpcmpeqb xmm0, xmm0, xmm1; lea r10, [r10 + r9]; jmp r10
0x00031305 : mov edx, [rsi + 0x10]; mov ecx, [rsi + 0x17]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rdx; mov [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret
0x00027ab8 : movdqu xmm[rdi - 0x31], xmm0; mov [rdi - 0x21], r9; mov [rdi - 0x19], r10; mov [rdi - 0x11], r11; mov [rdi - 9], rcx; mov [rdi - 4], edx; ret
0x00030bdf : movnti [rsi + 0x66], esp; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; mov rcx, [rsi + 0x10]; movdqu xmm[rdi], xmm0; mov [rdi + 0x10], rcx; ret
0x0003be66 : movsx ecx, [rax + 9]; mov [rdx + 0x4c], ecx; movsx ecx, [rax + 0xa]; movsx eax, [rax + 0xb]; mov [rdx + 0x50], ecx; mov [rdx + 0x54], eax; ret
0x0003be65 : movsx rcx, [rax + 9]; mov [rdx + 0x4c], ecx; movsx ecx, [rax + 0xa]; movsx eax, [rax + 0xb]; mov [rdx + 0x50], ecx; mov [rdx + 0x54], eax; ret
0x00026835 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x704f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028629 : movdqu xmm[rdi - 0x37], xmm0; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x000276a5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000272b5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026595 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70799]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000285b3 : movdqu xmm[rdi - 0x37], xmm1; mov [rdi - 0x27], r9; mov [rdi - 0x1f], r10; mov [rdi - 0x17], r11; mov [rdi - 0xf], rcx; mov [rdi - 8], rdx; ret
0x00027c98 : movdqu xmm[rdi - 0x32], xmm0; mov [rdi - 0x22], r9; mov [rdi - 0x1a], r10; mov [rdi - 0x12], r11; mov [rdi - 0xa], rcx; mov [rdi - 4], edx; ret
0x0002822d : movdqu xmm[rdi - 0x35], xmm0; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0002b1af : sbb r14b, bl; movq [rdi + 0x1a], mm0; lddqu xmm0, xmm[rsi + 0xa]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xa], xmm0; movdqu xmm[rdi], xmm1; ret
0x000266e5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70649]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026d75 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000281b3 : movdqu xmm[rdi - 0x35], xmm1; mov [rdi - 0x25], r9; mov [rdi - 0x1d], r10; mov [rdi - 0x15], r11; mov [rdi - 0xd], rcx; mov [rdi - 8], rdx; ret
0x0008ddd2 : add [rax], cl; mov [rip + 0x236741], 8; mov [rip + 0x23673b], 8; mov [rip + 0x236735], 8; mov [rip + 0x23672f], 8; mov [rip + 0x236729], 8; ret
0x00027fe2 : movdqu xmm[rdi - 0x34], xmm1; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x000283b3 : movdqu xmm[rdi - 0x36], xmm1; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00027015 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026c25 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ec5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027843 : movdqu xmm[rdi - 0x38], xmm1; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00027e78 : movdqu xmm[rdi - 0x33], xmm0; mov [rdi - 0x23], r9; mov [rdi - 0x1b], r10; mov [rdi - 0x13], r11; mov [rdi - 0xb], rcx; mov [rdi - 4], edx; ret
0x0002b140 : sbb esi, ebx; movq [rdi + 0x1b], mm0; lddqu xmm0, xmm[rsi + 0xb]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xb], xmm0; movdqu xmm[rdi], xmm1; ret
0x0000a28e : mov [rax + 0x58], edx; mov rax, [rbx + 0xa0]; mov rcx, [rbx + 0x10]; mov rdx, [rbx + 0x18]; sar r8, 2; lea rsi, [rax + 0x58]; call [r15 + 0x30]
0x00026985 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x703a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00028429 : movdqu xmm[rdi - 0x36], xmm0; mov [rdi - 0x26], r9; mov [rdi - 0x1e], r10; mov [rdi - 0x16], r11; mov [rdi - 0xe], rcx; mov [rdi - 8], rdx; ret
0x00027405 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0000a28d : mov [rax + 0x58], rdx; mov rax, [rbx + 0xa0]; mov rcx, [rbx + 0x10]; mov rdx, [rbx + 0x18]; sar r8, 2; lea rsi, [rax + 0x58]; call [r15 + 0x30]
0x000277f5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027555 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ad5 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70259]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027165 : sub [rdi], esp; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000278b9 : movdqu xmm[rdi - 0x38], xmm0; mov [rdi - 0x28], r8; mov [rdi - 0x20], r9; mov [rdi - 0x18], r10; mov [rdi - 0x10], r11; mov [rdi - 8], rcx; ret
0x00028058 : movdqu xmm[rdi - 0x34], xmm0; mov [rdi - 0x24], r9; mov [rdi - 0x1c], r10; mov [rdi - 0x14], r11; mov [rdi - 0xc], rcx; mov [rdi - 4], edx; ret
0x0002b13f : sbb r14d, ebx; movq [rdi + 0x1b], mm0; lddqu xmm0, xmm[rsi + 0xb]; lddqu xmm1, xmm[rsi]; movdqu xmm[rdi + 0xb], xmm0; movdqu xmm[rdi], xmm1; ret
0x0001ce7f : sbb [rbx + rcx*4 + 0x5e], cl; and [rbx + rcx*4 + 0x66], cl; sub [rbx + rcx*4 + 0x6e], cl; xor [rbx + rcx*4 + 0x76], cl; cmp [rax + 0xf], cl; ret
0x0002aca8 : movq [rdi - 0x25], mm0; lddqu xmm0, xmm[rsi - 0x15]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x15], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002a708 : movq [rdi - 0x30], mm0; lddqu xmm0, xmm[rsi - 0x20]; movdqu xmm[rdi - 0x20], xmm0; lddqu xmm0, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x10], xmm0; ret
0x0003137e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xf]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret
0x0002a928 : movq [rdi - 0x2c], mm0; lddqu xmm0, xmm[rsi - 0x1c]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1c], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aaa8 : movq [rdi - 0x29], mm0; lddqu xmm0, xmm[rsi - 0x19]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x19], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aba8 : movq [rdi - 0x27], mm0; lddqu xmm0, xmm[rsi - 0x17]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x17], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002ab28 : movq [rdi - 0x28], mm0; lddqu xmm0, xmm[rsi - 0x18]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x18], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aa28 : movq [rdi - 0x2a], mm0; lddqu xmm0, xmm[rsi - 0x1a]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1a], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002a808 : movq [rdi - 0x2e], mm0; lddqu xmm0, xmm[rsi - 0x1e]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1e], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002a898 : movq [rdi - 0x2d], mm0; lddqu xmm0, xmm[rsi - 0x1d]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1d], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002ad28 : movq [rdi - 0x24], mm0; lddqu xmm0, xmm[rsi - 0x14]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x14], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aeb8 : movq [rdi - 0x21], mm0; lddqu xmm0, xmm[rsi - 0x11]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x11], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002ada8 : movq [rdi - 0x23], mm0; lddqu xmm0, xmm[rsi - 0x13]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x13], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0003135e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xe]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret
0x0003133e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x0002a9a8 : movq [rdi - 0x2b], mm0; lddqu xmm0, xmm[rsi - 0x1b]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1b], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002ae38 : movq [rdi - 0x22], mm0; lddqu xmm0, xmm[rsi - 0x12]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x12], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002ac28 : movq [rdi - 0x26], mm0; lddqu xmm0, xmm[rsi - 0x16]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x16], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002a778 : movq [rdi - 0x2f], mm0; lddqu xmm0, xmm[rsi - 0x1f]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1f], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0003133d : add [rax], r8b; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret
0x0004b82a : inc edi; test [rax + 0x1fffffa], ebp; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7ac0]; jmp rdx
0x0004b4f9 : inc edi; test [rax + 0x1fffffa], edx; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7dc0]; jmp rdx
0x0004b4ab : inc edi; test [rax + 0x1fffffa], ebx; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7dc0]; jmp rdx
0x0004b33c : inc edi; test [rax + 0x1fffffa], edi; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a7dc0]; jmp rdx
0x0003139e : add [rax], al; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret
0x00061e74 : xchg [rax + 0x48000000], esp; mov [rax + 0x40], 0; mov [rax + 0x50], 0; mov [rax + 0x48], 0; mov rax, [r15 + 0xd8]; mov rdi, r15; call [rax + 0x20]
0x000013e7 : lea rax, [rsp + 0x20]; mov fs:[0x300], rax; mov rdx, [rip + 0x2c212c]; mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; mov rax, [rsp + 0x18]; call rax
0x000013e8 : lea eax, [rsp + 0x20]; mov fs:[0x300], rax; mov rdx, [rip + 0x2c212c]; mov rsi, [rsp + 0x10]; mov edi, [rsp + 0xc]; mov rax, [rsp + 0x18]; call rax
0x00026e2b : movaps xmm[rdi - 0x10], xmm5; add rdi, rdx; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6ff02]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0004b9ee : add bh, al; test [rax + 0xfffffa], ebp; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a79c0]; jmp rdx
0x00047f18 : lea rax, [rax + rax*8]; lea r13, [rcx + rax*8]; mov rax, [rbx + 0xd8]; mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x00047f19 : lea eax, [rax + rax*8]; lea r13, [rcx + rax*8]; mov rax, [rbx + 0xd8]; mov rsi, [r13 + 0x18]; mov rdx, [r13 + 0x20]; sub rdx, rsi; call [rax + 0x38]
0x0004b968 : add bh, al; test [rax + 0xfffffa], esi; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a79c0]; jmp rdx
0x0004b914 : add bh, al; test [rax + 0x1fffffa], esi; add [rax], al; add [rbx - 0x67b7df18], al; movzx eax, [rax + 0x4a7ec0]; mov rdx, [rax*8 + 0x4a79c0]; jmp rdx
0x00027164 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fbc9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ec4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fe69]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000266e4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70649]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027404 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f929]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026ad4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70259]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026984 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x703a9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000272b4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fa79]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x000277f4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f539]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026d74 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6ffb9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027554 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f7d9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026c24 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70109]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026594 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x70799]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00026834 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x704f9]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00059c8b : xchg [rcx + 0x28], esp; add [rax], al; movzx eax, [rax + 0x4a8cc0]; mov [rbp - 0x10e8], 1; mov [rbp - 0x1110], 0; mov rdx, [rax*8 + 0x4a87c0]; jmp rdx
0x000276a4 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6f689]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x00027014 : movaps xmm[rdi], xmm4; lea rdx, [rdx + 0x40]; movdqu xmm[r8], xmm0; lea r11, [rip + 0x6fd19]; movsxd rdx, [r11 + rdx*4]; lea rdx, [r11 + rdx]; jmp rdx
0x0002ac27 : movdqu xmm[rdi - 0x26], xmm0; lddqu xmm0, xmm[rsi - 0x16]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x16], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002a777 : movdqu xmm[rdi - 0x2f], xmm0; lddqu xmm0, xmm[rsi - 0x1f]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1f], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aaa7 : movdqu xmm[rdi - 0x29], xmm0; lddqu xmm0, xmm[rsi - 0x19]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x19], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002ad27 : movdqu xmm[rdi - 0x24], xmm0; lddqu xmm0, xmm[rsi - 0x14]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x14], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002ae37 : movdqu xmm[rdi - 0x22], xmm0; lddqu xmm0, xmm[rsi - 0x12]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x12], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002a897 : movdqu xmm[rdi - 0x2d], xmm0; lddqu xmm0, xmm[rsi - 0x1d]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1d], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002ab27 : movdqu xmm[rdi - 0x28], xmm0; lddqu xmm0, xmm[rsi - 0x18]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x18], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aba7 : movdqu xmm[rdi - 0x27], xmm0; lddqu xmm0, xmm[rsi - 0x17]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x17], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002a807 : movdqu xmm[rdi - 0x2e], xmm0; lddqu xmm0, xmm[rsi - 0x1e]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1e], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aca7 : movdqu xmm[rdi - 0x25], xmm0; lddqu xmm0, xmm[rsi - 0x15]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x15], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aeb7 : movdqu xmm[rdi - 0x21], xmm0; lddqu xmm0, xmm[rsi - 0x11]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x11], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002ada7 : movdqu xmm[rdi - 0x23], xmm0; lddqu xmm0, xmm[rsi - 0x13]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x13], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002aa27 : movdqu xmm[rdi - 0x2a], xmm0; lddqu xmm0, xmm[rsi - 0x1a]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1a], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002a707 : movdqu xmm[rdi - 0x30], xmm0; lddqu xmm0, xmm[rsi - 0x20]; movdqu xmm[rdi - 0x20], xmm0; lddqu xmm0, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x10], xmm0; ret
0x0002a9a7 : movdqu xmm[rdi - 0x2b], xmm0; lddqu xmm0, xmm[rsi - 0x1b]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1b], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x0002a927 : movdqu xmm[rdi - 0x2c], xmm0; lddqu xmm0, xmm[rsi - 0x1c]; lddqu xmm1, xmm[rsi - 0x10]; movdqu xmm[rdi - 0x1c], xmm0; movdqu xmm[rdi - 0x10], xmm1; ret
0x00030c82 : adc [rcx + 0x66c3184f], cl; nop [rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0xd]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0xd], xmm2; ret
0x0000ae86 : mov [rbx + 8], esi; mov [rbx + 0x18], rsi; mov [rbx + 0x10], rsi; mov [rbx + 0x30], rsi; mov [rbx + 0x28], rsi; mov [rbx + 0x20], rsi; call [rax + 0x70]
0x0000ae85 : mov [rbx + 8], rsi; mov [rbx + 0x18], rsi; mov [rbx + 0x10], rsi; mov [rbx + 0x30], rsi; mov [rbx + 0x28], rsi; mov [rbx + 0x20], rsi; call [rax + 0x70]
0x0008ddcd : mov [rip + 0x236747], 8; mov [rip + 0x236741], 8; mov [rip + 0x23673b], 8; mov [rip + 0x236735], 8; mov [rip + 0x23672f], 8; mov [rip + 0x236729], 8; ret
0x0001ce7e : push rsi; sbb [rbx + rcx*4 + 0x5e], cl; and [rbx + rcx*4 + 0x66], cl; sub [rbx + rcx*4 + 0x6e], cl; xor [rbx + rcx*4 + 0x76], cl; cmp [rax + 0xf], cl; ret
0x00030ce1 : movnti [rsi + 0x66], esp; nop cs:[rax + rax]; movdqu xmm0, xmm[rsi]; movdqu xmm2, xmm[rsi + 0x10]; movdqu xmm[rdi], xmm0; movdqu xmm[rdi + 0x10], xmm2; ret
0x0001ce7a : adc [rbx + r9*4 + 0x56], r9b; sbb [rbx + rcx*4 + 0x5e], cl; and [rbx + rcx*4 + 0x66], cl; sub [rbx + rcx*4 + 0x6e], cl; xor [rbx + rcx*4 + 0x76], cl; cmp [rax + 0xf], cl; ret
0x0001ce7b : adc [rbx + rcx*4 + 0x56], cl; sbb [rbx + rcx*4 + 0x5e], cl; and [rbx + rcx*4 + 0x66], cl; sub [rbx + rcx*4 + 0x6e], cl; xor [rbx + rcx*4 + 0x76], cl; cmp [rax + 0xf], cl; ret
